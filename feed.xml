<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>XS Tech Thoughts</title>
    <link href="https://korgano.github.io/feed.xml" rel="self" />
    <link href="https://korgano.github.io" />
    <updated>2024-11-26T12:52:55-05:00</updated>
    <author>
        <name>Xavier Santana</name>
    </author>
    <id>https://korgano.github.io</id>

    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 7.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-70/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-70/</id>
        <media:content url="https://korgano.github.io/media/posts/29/opnsense-aliases_02-2.JPG" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-11-25T12:09:36-05:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/29/opnsense-aliases_02-2.JPG" alt="Confirmation that the full list of IP addresses was added to one of the Aliases." />
                    Last time on the Transparent Filtering Bridge project, I started working on building up alias lists for the various firewall&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/29/opnsense-aliases_02-2.JPG" class="type:primaryImage" alt="Confirmation that the full list of IP addresses was added to one of the Aliases." /></p>
                <p>Last time on the Transparent Filtering Bridge project, I started working on building up alias lists for the various firewall rules. Through the use of a Python script, I scraped IP addresses from Pi-Hole DNS block lists. Since Pi-Hole only focuses on blocking domain names, having OPNsense block those specific IPs increases the layers of defense for the network.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1idkgvag76q">Figuring out the CSV Format</a></li>
<li><a href="#mcetoc_1idkgvag76r">Validating the Aliases</a></li>
<li><a href="#mcetoc_1idkgvag76s">Next Steps</a></li>
</ul>
</div>
<h2 id="mcetoc_1idkgvag76q">Figuring out the CSV Format</h2>
<p>One thing that proved to be surprisingly difficult was formatting the CSV correctly. The columns were the easy part. The problem was that the spreadsheet editor I was using saved CSVs in a way that caused the OPNsense Alias script to error out.</p>
<p>Even switching to Visual Studio Code didn't really help, but it made me realize that the issue could be in the formatting.</p>
<p>So, to brute force the issue, I went and acquired CSVEdit, a decade plus piece of software that's specifically made to handle CSVs. Starting with a copy of the original I made, I then began progressing through the various save options to find the correct combination that would load. After several iterations, I discovered these were the proper settings:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/29/opnsense-aliases_03.JPG" alt="CSV settings for the OPNsense Alias script - Value Separator = Comma, Character Set = System, String (Value) Delimiter = Nothing" width="550" height="208" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_03-xs.JPG 384w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_03-sm.JPG 600w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_03-md.JPG 768w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_03-lg.JPG 1200w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_03-xl.JPG 1600w"></figure>
<p>After generating a properly formatted CSV, I successfully updated the Alias.json file, then uploaded it to OPNsense.</p>
<h2 id="mcetoc_1idkgvag76r">Validating the Aliases</h2>
<p>Once this was concluded, I noticed an immediate issue:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/29/opnsense-aliases.JPG" alt="OPNsense Alias Interface with only one IP applied to most aliases." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/29/responsive/opnsense-aliases-xs.JPG 384w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases-sm.JPG 600w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases-md.JPG 768w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases-lg.JPG 1200w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases-xl.JPG 1600w"></figure>
<p>Despite having large lists of IPs, only one IP address showed up in each alias. This meant I had incorrectly formatted something in the CSV. Examining the script's code revealed this:</p>
<blockquote>
<p><code>if len(row['data'].split(" "))&gt;1:</code><br><code>            item_data = "\n".join(row['data'].split(" "))</code></p>
</blockquote>
<p>So the main issue was the fact that I mistakenly separated out each IP address or range into its own row. This meant that I had to reformat the list of IPs from each IP being on its own line, to being all on one line, with spaces as separation. </p>
<p>This means I'll have to make some adjustments to my script's code, to have it automatically generate a list in that format.</p>
<p>However, until I make that change, I had to manually edit the lists into the proper format, which was tedious, but not too difficult.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/29/opnsense-aliases_01.JPG" alt="Correctly formatted CSV for the OPNsense Alias script, with space separated IP addresses in the Data column." width="759" height="318" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_01-xs.JPG 384w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_01-sm.JPG 600w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_01-md.JPG 768w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_01-lg.JPG 1200w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_01-xl.JPG 1600w"></figure>
<p>Once these changes were made, the new Alias.json was generated and uploaded into OPNsense, then visually inspected in the GUI:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/29/opnsense-aliases_02.JPG" alt="Confirmation that the full list of IP addresses was added to one of the Aliases." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_02-xs.JPG 384w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_02-sm.JPG 600w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_02-md.JPG 768w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_02-lg.JPG 1200w ,https://korgano.github.io/media/posts/29/responsive/opnsense-aliases_02-xl.JPG 1600w"></figure>
<h2 id="mcetoc_1idkgvag76s">Next Steps</h2>
<p>The CSV format information has been uploaded to the <a href="https://github.com/korgano/OPNsenseAliasTools" title="OPNsenseAliasTools" target="_blank" rel="noopener noreferrer">Github repo</a>, so all that needs to be done is iterating on my script to do a few things:</p>
<ul>
<li>Ignore IP addresses embedded in URLs.</li>
<li>Generate a separate list for IP address ranges.</li>
<li>Generate the text files in the proper format (IP addresses separated by spaces).</li>
</ul>
<p>Once these are complete, they will be tested and uploaded to the repo upon validation.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 6.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-60/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-60/</id>
        <media:content url="https://korgano.github.io/media/posts/28/pi-hole-blocklists-07-2.jpg" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-11-13T15:34:12-05:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/28/pi-hole-blocklists-07-2.jpg" alt="Pi-Hole DNS Block List with IP address entries." />
                    Last time on the transparent filtering bridge project, I bounced my head off of the progression blockers with setting up&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/28/pi-hole-blocklists-07-2.jpg" class="type:primaryImage" alt="Pi-Hole DNS Block List with IP address entries." /></p>
                <p>Last time on the transparent filtering bridge project, I bounced my head off of the progression blockers with setting up a WiFi management connection.</p>
<p>With that seemingly impassable unless there's a revision of either FreeBSD's Intel WiFi driver or how OPNsense handles some things, I've decided to pivot to another part of the project that <strong>doesn't </strong>require working hardware and software. This time, it's building alias IP address lists.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1icvlr9di2cm">What's an Alias?</a></li>
<li><a href="#mcetoc_1icvlr9di2cn">How to Get the Aliases into OPNsense</a></li>
<li><a href="#mcetoc_1icvlr9di2co">Getting the IP Addresses</a></li>
<li><a href="#mcetoc_1icvlr9di2cp">Picking the Category</a></li>
<li><a href="#mcetoc_1icvlr9di2cq">Second Time's the Charm</a></li>
<li><a href="#mcetoc_1icvlr9di2cr">Refining the Process</a></li>
<li><a href="#mcetoc_1icvlr9di2cs">Validating Some Results</a></li>
<li><a href="#mcetoc_1icvlr9di2ct">Next Steps</a></li>
</ul>
</div>
<h2 id="mcetoc_1icvlr9di2cm">What's an Alias?</h2>
<p><a href="https://docs.opnsense.org/manual/aliases.html" title="OPNsense Documentation - Aliases" target="_blank" rel="noopener noreferrer">The OPNsense documentation provides a simple, clear definition:</a></p>
<p>Aliases are named lists of networks, hosts or ports that can be used as one entity by selecting the alias name in the various supported sections of the firewall. These aliases are particularly useful to condense firewall rules and minimize changes.</p>
<p>So what am I going to put in these alias lists?</p>
<p>Well, as it turns out, a number of the Pi-Hole block lists I use have a <strong>lot </strong>of IP address entries. Since Pi-Hole doesn't block them, due to being a DNS black hole, that means it'll be OPNsense's job to block them.</p>
<h2 id="mcetoc_1icvlr9di2cn">How to Get the Aliases into OPNsense</h2>
<p>Ironically, I stumbled onto a pretty simple solution for mass importation of alias entries while trying some more troubleshooting on the OPNsense connectivity issues.</p>
<p>As it turns out, <a href="https://forum.opnsense.org/index.php?topic=36687.msg179205#msg179205" target="_blank" rel="noopener noreferrer">someone on the OPNsense forums made a helpful Python script to populate the JSON file that handles <strong>all </strong>the alias lists from a CSV file</a>. It is not clear to me why JSON format was chosen for something that could potential hold <strong>thousands </strong>of entries, versus a bulk data format like CSV, but it's just one of those design choices that end users have to live with.</p>
<p>The script is not very self-explanatory, <a href="https://forum.opnsense.org/index.php?PHPSESSID=qc30qj4c08unjl5rhht9ntda15&amp;topic=36687.msg192490#msg192490" title="Alias creation using API " target="_blank" rel="noopener noreferrer">so the author helpfully explained how to use it</a>:</p>
<p><span class="bbc_u"><strong>Steps:</strong></span></p>
<ul class="bbc_list">
<li>Install Python if you do not already have it</li>
<li>Install any of the required Python modules if you don't have them (json, uuid, csv) - <em>see below *</em></li>
<li>Save the script as a *.py file</li>
<li>Download your current list of Aliases from your OPNsense device: Firewall&gt;Aliases&gt;'download' (button bottom right of the Alias list) - save the file as 'opnsense_aliases.json'</li>
<li>Create a CSV file called 'pfsense_alias.csv' with four columns called 'name', 'data', 'type' and 'description' in the first row, and which then contains your new Aliases, one per row (be sure the 'name' field meets the name constraints for Aliases)</li>
<li>Update the two 'with open...' script lines to include the full path to each of the above files</li>
<li>Run the script</li>
<li>Upload the resultant json output file back into your OPNsense device: Firewall&gt;Aliases&gt;'upload' (next to the 'download' button)</li>
</ul>
<p><br><strong>What does this script do?</strong></p>
<ul class="bbc_list">
<li>It reads in the current list of aliases you downloaded from your device into a Python variable (dict)</li>
<li>It then reads in the CSV file containing your list of new (additional) aliases, also into a Python dict</li>
<li>It ADDS (<em>appends</em>) all the <span class="bbc_u">new</span> aliases to the current list (no deletions, assuming you don't experience a uuid collision)</li>
<li>It then saves the new expanded list of aliases over the previously downloaded alias json file</li>
</ul>
<p><br>Obviously, you need Python and the required modules to run the script.</p>
<p>So, all I need to do is get the IP addresses into a properly formatted CSV, then I can upload that into OPNsense for later.</p>
<h2 id="mcetoc_1icvlr9di2co">Getting the IP Addresses</h2>
<p>Thankfully, Pi-Hole makes accessing the block lists incredibly easy... perhaps <strong>too </strong>easy:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/28/pi-hole-blocklists.jpg" alt="Pi-Hole Block List page with 50 entries, showing block lists for ads, tracking, and malware." width="1583" height="2652" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-xs.jpg 384w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-sm.jpg 600w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-md.jpg 768w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-lg.jpg 1200w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-xl.jpg 1600w"></figure>
<p>Why do I have nearly 100 block lists?</p>
<p>Well, to be honest, two main reasons:</p>
<ol>
<li>I don't like unified block lists, because they make troubleshooting harder and might block things I want.</li>
<li>I don't mind a little extra CPU load due to redundant entries, versus the possibility of losing blocking due to block lists dying.</li>
</ol>
<p>It's simply not practical to handle all those lists at the same time, so my plan is as follows:</p>
<ol>
<li>Break the scripts up into categories.</li>
<li>Pick one category to use.</li>
<li>Develop a script to pull the IP addresses out of that category's block lists.</li>
<li>Once validated, clone the script for other categories.</li>
<li>Fill out the CSV with the data for each category.</li>
<li>Run the CSV-to-JSON script to convert the data for import.</li>
</ol>
<h2 id="mcetoc_1icvlr9di2cp">Picking the Category</h2>
<p>To start off the project, I wanted a category that had a reasonable amount of scripts. Ideally, a dozen or less, so that I could troubleshoot things if necessary without too many headaches.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/28/pi-hole-blocklists-02.jpg" alt="Pi-Hole block lists featuring the word segment &quot;mal&quot;." width="1583" height="955" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-02-xs.jpg 384w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-02-sm.jpg 600w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-02-md.jpg 768w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-02-lg.jpg 1200w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-02-xl.jpg 1600w"></figure>
<p>As it so happened, my first choice, "malware", actually was a perfect fit for this task. Even with a partial match, there were only 10 lists, which I whittled down to 8. These are the lists I used for the script development process:</p>
<blockquote>
<p><code>'https://v.firebog.net/hosts/Prigent-Malware.txt',</code><br><code>'https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-malware.txt',</code><br><code>'https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt',</code><br><code>'https://blocklistproject.github.io/Lists/malware.txt',</code><br><code>'https://v.firebog.net/hosts/RPiList-Malware.txt',</code><br><code>'https://raw.githubusercontent.com/manic-code/Emerging-Malicious-Domain-Blocklist/main/hosts.txt',</code><br><code>'https://github.com/zangadoprojets/pi-hole-block-list/raw/main/Malicious.txt',</code><br><code>'https://raw.githubusercontent.com/hagezi/dns-blocklists/main/adblock/hoster.txt'</code></p>
</blockquote>
<h2 id="mcetoc_1icvlr9di2cq">Second Time's the Charm</h2>
<p>Initially, I wanted to make the script to pull IP addresses from these block lists with PowerShell. I've had good results using PowerShell to scrape logs for specific content before, so I thought I could do it with minimal issues.</p>
<p>I was wrong.</p>
<p>Here's the prompt I used with Microsoft Copilot:</p>
<blockquote>
<p>Write me a powershell script that does the following: <br>-downloads files from a list of specified urls <br>-iterates through the downloaded files for IPv4 and IPv6 addresses, except for 0.0.0.0 or :: <br>-generates a new list of IP addresses <br>-removes duplicate items <br>-outputs list to text file cleaned-IPs <br>-provides full error reporting<br>-requires user to press enter to exit</p>
</blockquote>
<p>What I got was a script that used regular expressions in a for-each loop to scrape the files for the IP addresses. That part worked. What didn't work, for no discernable reason, was handing off the array of scraped IPs to the rest of the script for clean up and writing to a text file.</p>
<p>Passing the script off to ChatGPT's Code LLM didn't help resolve the issue, so I decided to pivot into another direction.</p>
<p>Since I was already going to be using Python later the process, I figured that using Python the whole way through made sense. However, I decided to try out a local LLM coding model for the Python iteration of the script. This was to get a feel for how well it produces usable code, since it's a blazing fast model that can sometimes get your GPU to <a href="https://www.youtube.com/watch?v=T7HsXHqtxrI" title="Techquickie - Coil Whine as Fast As Possible">coil whine</a>.</p>
<p>Here's the prompt I used with the Qwen2.5-Coder-7B-Instruct-GGUF model:</p>
<blockquote>
<p>Write me a python script that does the following: <br>-downloads text files from a list of specified urls <br>-obtains IPv4 and IPv6 addresses from the files, except for 0.0.0.0, 127.0.0.1, or :: <br>-obtains the first instance of any ip address<br>-generates a new list of IP addresses <br>-outputs list to text file cleaned-IPs <br>-provides full error reporting<br>-provides logging throughout the whole process for troubleshooting</p>
</blockquote>
<p>Here's the output it gave me:</p>
<blockquote>
<p>Certainly! Below is a Python script that accomplishes all of the tasks you've described. This script uses `requests` to download files, `re` for regex operations to extract IP addresses, and `logging` for comprehensive error reporting and logging.<br><br>First, make sure to install the required packages:<br><br><code>pip install requests</code><br><br>Here is the Python script:<br><br><code>import requests</code><br><code>import re</code><br><code>import logging</code><br><br><code># Setup logging configuration</code><br><code>logging.basicConfig(filename='download_ips.log', level=logging.DEBUG, </code><br><code>                    format='%(asctime)s - %(levelname)s - %(message)s')</code><br><br><code>def download_file(url):</code><br><code>    """Downloads a file from the given URL and returns its content."""</code><br><code>    try:</code><br><code>        response = requests.get(url)</code><br><code>        response.raise_for_status()  # Raises an HTTPError for bad responses</code><br><code>        return response.text</code><br><code>    except requests.exceptions.RequestException as e:</code><br><code>        logging.error(f"Failed to download {url}: {e}")</code><br><code>        return None</code><br><br><code>def extract_ips(text):</code><br><code>    """Extracts IPv4 and IPv6 addresses from the given text, excluding specified ones."""</code><br><code>    ip_regex = r"\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b|\b(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}\b"</code><br><code>    ip_pattern = re.compile(ip_regex)</code><br><code>    </code><br><code>    # Find all IP addresses</code><br><code>    ips = ip_pattern.findall(text)</code><br><code>    </code><br><code>    # Filter out specified IPs and get the first instance of any IP address</code><br><code>    filtered_ips = set()</code><br><code>    for ip in ips:</code><br><code>        if ip not in ["0.0.0.0", "127.0.0.1", "::"]:</code><br><code>            if ":" in ip:  # IPv6</code><br><code>                if len(filtered_ips) &lt; 1 or ":" in list(filtered_ips)[0]:</code><br><code>                    filtered_ips.add(ip)</code><br><code>            else:  # IPv4</code><br><code>                if len(filtered_ips) &lt; 1:</code><br><code>                    filtered_ips.add(ip)</code><br><code>    </code><br><code>    return list(filtered_ips)</code><br><br><code>def save_ips_to_file(ips, output_file):</code><br><code>    """Saves the list of IP addresses to a text file."""</code><br><code>    try:</code><br><code>        with open(output_file, 'w') as f:</code><br><code>            for ip in ips:</code><br><code>                f.write(f"{ip}\n")</code><br><code>        logging.info(f"IPs saved to {output_file}")</code><br><code>    except IOError as e:</code><br><code>        logging.error(f"Failed to save IPs to file: {e}")</code><br><br><code>def main():</code><br><code>    urls = [</code><br><code>        "http://example.com/file1.txt",</code><br><code>        "http://example.com/file2.txt"</code><br><code>        # Add more URLs here</code><br><code>    ]</code><br><code>    </code><br><code>    output_file = 'cleaned-IPs.txt'</code><br><code>    </code><br><code>    try:</code><br><code>        all_ips = []</code><br><code>        </code><br><code>        for url in urls:</code><br><code>            logging.info(f"Downloading file from {url}")</code><br><code>            content = download_file(url)</code><br><code>            if content is not None:</code><br><code>                extracted_ips = extract_ips(content)</code><br><code>                all_ips.extend(extracted_ips)</code><br><code>                logging.info(f"Extracted {len(extracted_ips)} IP(s) from {url}")</code><br><code>        </code><br><code>        unique_ips = list(set(all_ips))</code><br><code>        logging.info(f"Total unique IPs: {len(unique_ips)}")</code><br><code>        </code><br><code>        save_ips_to_file(unique_ips, output_file)</code><br><code>    </code><br><code>    except Exception as e:</code><br><code>        logging.error(f"An unexpected error occurred: {e}")</code><br><br><code>if __name__ == "__main__":</code><br><code>    main()</code><br><br><strong>Explanation:</strong><br><br>1. <strong>Logging Configuration</strong>: The script sets up basic logging to capture all log messages in a file named `download_ips.log`. Log levels include DEBUG, INFO, WARNING, ERROR, and CRITICAL.<br><br>2. <strong>Download File</strong>: The `download_file` function fetches the content of a URL using `requests.get()`. If there's any issue with downloading (e.g., network error), it logs an error message.<br><br>3. <strong>Extract IPs</strong>: The `extract_ips` function uses regular expressions to find all IPv4 and IPv6 addresses in the text. It then filters out specified IP addresses (`0.0.0.0`, `127.0.0.1`, and `::`) and ensures that only one instance of each IP address type is kept.<br><br>4. <strong>Save IPs</strong>: The `save_ips_to_file` function writes a list of IP addresses to a text file, one per line.<br><br>5. <strong>Main Function</strong>: This function orchestrates the entire process:<br>   - Downloads files from specified URLs.<br>   - Extracts and cleans IP addresses.<br>   - Saves the cleaned list to a file.<br><br>The script provides detailed logging throughout the process for troubleshooting and error reporting. Adjust the `urls` list with your actual file URLs as needed.</p>
</blockquote>
<p>This script actually produced results on the first try! However, it was a strange result - only <strong>6</strong> IP addresses.</p>
<p>During my attempts to troubleshoot the PowerShell script, I visually confirmed that there were <strong>hundreds </strong>(at minimum) of IPv4 addresses in a <strong>single </strong>block list:</p>
<p> </p>
<p>Querying the same local model with the following prompt didn't really help resolve the problem:</p>
<blockquote>
<p>Modify the script to do:<br>-read lines like 127.0.0.1 173.208.96.42<br>-obtain the part that is not 127.0.0.1</p>
</blockquote>
<p>So I pivoted to Copilot to see if it could identify and solve the issue:</p>
<blockquote>
<p>tell me why the following python code cannot retrieve ipv4 addresses from lines starting with 127.0.0.1 or 0.0.0.0: </p>
<p><code>    # Filter out specified IPs and get the first instance of any non-127.0.0.1 IP address</code><br><code>    filtered_ips = set()</code><br><code>    for ip in ips:</code><br><code>        if ip not in ["127.0.0.1"]:</code><br><code>            if ":" in ip:  # IPv6</code><br><code>                if len(filtered_ips) &lt; 1 or ":" in list(filtered_ips)[0]:</code><br><code>                    filtered_ips.add(ip)</code><br><code>            else:  # IPv4</code><br><code>                if len(filtered_ips) &lt; 1:</code><br><code>                    filtered_ips.add(ip)</code><br><code>    </code><br><code>    return list(filtered_ips)</code></p>
</blockquote>
<p>The Copilot response:</p>
<blockquote>
<p>The given Python code is designed to extract IPv4 and IPv6 addresses while excluding `127.0.0.1`. However, it does not address the exclusion of `0.0.0.0`, and there are also some logical issues in the way it filters and adds IP addresses to the `filtered_ips` set. Here’s a detailed breakdown of why it might not be working as expected:<br><br>1. <strong>Regular Expression Issue</strong>:<br>   - The regular expression correctly matches both IPv4 and IPv6 addresses, but the filtering logic for exclusion happens later in the code.<br><br>2. <strong>Filtering Logic Issue</strong>:<br>   - The code currently only excludes `127.0.0.1` but does not exclude `0.0.0.0`.<br>   - The logic for adding IPv4 addresses to the `filtered_ips` set checks if `filtered_ips` is empty (`len(filtered_ips) &lt; 1`). This means only the first non-excluded IP will be added, which is not the desired behavior.<br><br>3. <strong>Set Operations</strong>:<br>   - Using a set to store IP addresses is fine, but the logic should be adjusted to properly handle all matching IPs.<br><br>To fix these issues and ensure that all valid IPs are extracted while excluding `127.0.0.1` and `0.0.0.0`, you can revise the code as follows:<br><br><code>import re</code><br><br><code>def extract_ips(text):</code><br><code>    """Extracts IPv4 and IPv6 addresses from the given text, excluding specified ones."""</code><br><code>    ip_regex = r"\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b|\b(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}\b"</code><br><code>    ip_pattern = re.compile(ip_regex)</code><br><br><code>    # Find all IP addresses</code><br><code>    ips = ip_pattern.findall(text)</code><br><br><code>    # Filter out specified IPs</code><br><code>    excluded_ips = ["127.0.0.1", "0.0.0.0"]</code><br><code>    filtered_ips = {ip for ip in ips if ip not in excluded_ips}</code><br><br><code>    return list(filtered_ips)</code><br><br><code># Example usage</code><br><code>text = """</code><br><code>    Here are some IPs:</code><br><code>    192.168.1.1, 127.0.0.1, 0.0.0.0, 8.8.8.8</code><br><code>    2001:0db8:85a3:0000:0000:8a2e:0370:7334, ::1</code><br><code>"""</code><br><code>print(extract_ips(text))</code><br><br>Changes made:<br>1. Added `0.0.0.0` to the list of excluded IPs.<br>2. Simplified the filtering logic to directly exclude unwanted IPs using a set comprehension.<br><br>This revised code will now correctly extract all valid IP addresses while excluding both `127.0.0.1` and `0.0.0.0`. Let me know if you need any further adjustments or explanations!</p>
</blockquote>
<p>Inserting the refined code segment into the script solved the problem, and I extracted a total of 3642 IPv4 addresses. Annoyingly, a single 0.0.0.0 address made it through, but that was a small price to pay.</p>
<h2 id="mcetoc_1icvlr9di2cr">Refining the Process</h2>
<p>After proving out the script, I went back to Pi-Hole and cleaned up the descriptions to provide better context and help sort things for future searches.</p>
<p>Once that was done, I had to wait for a low traffic time to force Pi-Hole to update the blocklists. This would provide me with a way to narrow the block lists I included in my scripts to those that had IP addresses. Most blocklists are DNS entries only, which means they don't need to be scraped, which saves on processing power and time.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/28/pi-hole-blocklists-07.jpg" alt="Adblock Plus block list with IP addresses inside of URLs" width="1583" height="775" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-07-xs.jpg 384w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-07-sm.jpg 600w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-07-md.jpg 768w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-07-lg.jpg 1200w ,https://korgano.github.io/media/posts/28/responsive/pi-hole-blocklists-07-xl.jpg 1600w"></figure>
<p>The upside of this was that there weren't too many lists that had non-domain entries, and three of them had obvious IP addresses displayed. That left a total of five lists to scrape for IPs. So I made a copy of the script, inserted each one individually, and scraped them.</p>
<p>Once that was done, I commented out the block list URL and added a comment with how many IP addresses were present. To my surprise, Easylist had easily over a hundred entries, which wasn't apparent .</p>
<p>As a result, I only needed three alias categories:</p>
<ul>
<li>Ads + Tracking</li>
<li>Crypto</li>
<li>Malware</li>
</ul>
<h2 id="mcetoc_1icvlr9di2cs">Validating Some Results</h2>
<p>Having run the Malware version of the script earlier, I was surprised to see so few results for malware related blocklists during the update. So I reran the script, commenting out a list each time to find out which lists had IP addresses.</p>
<p>Examining these blocklists revealed that these were coming from DNS entries with embedded IP addresses in them.</p>
<p>Running the IP address through VirusTotal revealed that this was a Google cloud IP. How exactly it was involved in malware distribution was unclear, but IP address itself was given a clean bill of health.</p>
<p>After this false positive, I decided to check out the results with other blocklists. I started with the Tencent blocklist, since that had a number of non-DNS entries. I got a list of IP addresses... and none of them were in the actual blocklist. I am not sure how or why these were generated, because I can find various numbers that are in the IPs, but not actual IP addresses.</p>
<p>A second blocklist had this same issue, so I went back to Copilot and asked it to revise the code to include what line each IP address was found on:</p>
<blockquote>
<p>Sure, here's a revised version of your Python code. This version logs the specific lines where each IP address was found:<br><br><code>import re</code><br><code>import logging</code><br><br><code>logging.basicConfig(filename='ip_log.log', level=logging.INFO)</code><br><br><code>def extract_ips(text):</code><br><code>    """Extracts IPv4 and IPv6 addresses from the given text, excluding specified ones."""</code><br><code>    ip_regex = r"\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b|\b(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}\b"</code><br><code>    ip_pattern = re.compile(ip_regex)</code><br><br><code>    # Find all IP addresses</code><br><code>    ips = []</code><br><code>    for line_num, line in enumerate(text.split('\n'), start=1):</code><br><code>        found_ips = ip_pattern.findall(line)</code><br><code>        for ip in found_ips:</code><br><code>            ips.append((ip, line_num))</code><br><br><code>    # Filter out specified IPs</code><br><code>    excluded_ips = ["127.0.0.1", "0.0.0.0"]</code><br><code>    filtered_ips = [(ip, line_num) for ip, line_num in ips if ip not in excluded_ips]</code><br><br><code>    return filtered_ips</code><br><br><code>def save_ips_to_file(ips, output_file):</code><br><code>    """Saves the list of IP addresses to a text file."""</code><br><code>    try:</code><br><code>        with open(output_file, 'w') as f:</code><br><code>            for ip, line_num in ips:</code><br><code>                f.write(f"{ip} found at line {line_num}\n")</code><br><code>        logging.info(f"IPs saved to {output_file}")</code><br><code>    except IOError as e:</code><br><code>        logging.error(f"Failed to save IPs to file: {e}")</code><br><br><code># Example usage:</code><br><code>text = """Sample text with IP addresses.</code><br><code>192.168.1.1 is one example.</code><br><code>Another example is 2001:0db8:85a3:0000:0000:8a2e:0370:7334.</code><br><code>Let's exclude 127.0.0.1 and 0.0.0.0."""</code><br><br><code>ips = extract_ips(text)</code><br><code>save_ips_to_file(ips, 'output_ips.txt')</code><br><br><code>In this revised code:</code><br><code>- The `extract_ips` function now returns a list of tuples, where each tuple contains an IP address and the line number it was found on.</code><br><code>- The `save_ips_to_file` function writes the IP addresses and their corresponding line numbers to the output file.</code><br><code>- Each line where an IP address was found is written to the log.</code></p>
</blockquote>
<p>Oddly enough, this did provide the lines for the IPs, but those lines in the files on Github were for domains, not IP addresses. Even more confusing was running this revised script on the EasyList blocklist, which provided IPs actually specified in the list.</p>
<p>Why this is happening is beyond my programming knowledge to diagnose, so what I'll do is upload a version of the script with the logging so someone else can use it to solve the problem.</p>
<h2 id="mcetoc_1icvlr9di2ct">Next Steps</h2>
<p><a href="https://github.com/korgano/OPNsenseAliasTools" title="OPNsenseAliasTools Github Repo" target="_blank" rel="noopener noreferrer">Creating a Github repo, obviously!</a></p>
<p>Making the code open source is an obvious decision. First of all, I've already posted tons of it here. Second, I'm more of a coder than a programmer - I can write code and I can definitely think of the logic, but I don't have the skill or experience to be called a programmer.</p>
<p>So if someone out there can figure out why the script is producing IP addresses out of nowhere and solve the problem, that's fine by me.</p>
<p>Additionally, I'll have to go back to OPNsense and create the full set of Aliases there, since user created Aliases get auto-generated hashes(?), like </p>
<div>
<div><code>"66ea4c00-feec-469e-9a82-bf5cba0405a9"</code>.</div>
<div> </div>
<div>Once that's done, the rest of the process is just running the scripts, dumping the results into the CSV, running the OPNsense forum script, and doing some documentation.</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 5.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-50/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-50/</id>
        <media:content url="https://korgano.github.io/media/posts/26/opnsense-03-2.png" medium="image" />
            <category term="UX"/>
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-10-28T09:47:43-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/26/opnsense-03-2.png" alt="Default OPNsense firewall rules on the OPT1 interface, starting with an IPv4 deny all traffic in rule." />
                    Sometimes on a project, you run into a problem that you cannot solve. Sometimes, this is due to lack of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/26/opnsense-03-2.png" class="type:primaryImage" alt="Default OPNsense firewall rules on the OPT1 interface, starting with an IPv4 deny all traffic in rule." /></p>
                <p>Sometimes on a project, you run into a problem that you cannot solve.</p>
<p>Sometimes, this is due to lack of skill or experience. Sometimes it is due to lack of authority to do what needs to be done. Sometimes it's because of technological limitations.</p>
<p>Sometimes, it's because of bad defaults, and stubborn refusal to accept valid criticism.</p>
<h2>The Progression Blocker</h2>
<p>To recap, the project has a simple goal: implement a transparent filtering bridge with OPNsense. I acquired a miniPC, installed OPNsense, and ran into issues connecting to the webGUI.</p>
<p>Initially, this was due to two things:</p>
<ol>
<li>Shutting down the WiFi interface completely obliterated the ability to reactive it.</li>
<li>I couldn't apply an IP address to the LAN port without breaking the filtering bridge.</li>
</ol>
<p>So I eventually clean installed OPNsense again so that I could reactivate the WiFi and use that to serve as my management connection:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/26/filter-bridge-to-wifi.drawio.png" alt="Planned network architecture, with Transparent Filtering Bridge connected to router WiFi interface." width="607" height="471" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/26/responsive/filter-bridge-to-wifi.drawio-xs.png 384w ,https://korgano.github.io/media/posts/26/responsive/filter-bridge-to-wifi.drawio-sm.png 600w ,https://korgano.github.io/media/posts/26/responsive/filter-bridge-to-wifi.drawio-md.png 768w ,https://korgano.github.io/media/posts/26/responsive/filter-bridge-to-wifi.drawio-lg.png 1200w ,https://korgano.github.io/media/posts/26/responsive/filter-bridge-to-wifi.drawio-xl.png 1600w"></figure>
<p>There were two problems with this:</p>
<ol>
<li>The WiFi interface itself would have repeated errors that referenced a specific FreeBSD bug.</li>
<li>Even when I did connect the miniPC to WiFi, I couldn't access the webGUI.</li>
</ol>
<p>Those two problems might've actually been two sides of the same coin, but that was not obvious at the start.</p>
<h2>The FreeBSD Bug</h2>
<p>The issue I was running into was this error message:</p>
<blockquote>
<p><code>iwl_mvm_tx_mpdu:1204: fc 0x00b0 tid 8 txq_id 65535 mvm 0xfffffe015572d4c8 skb 0xfffff80035b83000 { len 30 } info 0xfffffe00e1253cd8 sta 0xfffff80035ecc080 (if you see this please report to PR 274382)</code><br><code>iwl_mvm_tx_mpdu:1204: fc 0x00b0 tid 8 txq_id 65535 mvm 0xfffffe015572d4c8 skb 0xfffff80035b83000 { len 30 } info 0xfffffe00e1253cd8 sta 0xfffff80035ecc080 (if you see this please report to PR 274382)</code></p>
</blockquote>
<p>The error, <a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=274382" target="_blank" rel="noopener noreferrer">according to the FreeBSD foundation</a>, seems to related to receiving frames for a state that is no longer known to the driver or firmware.</p>
<p>What was odd was that this error would trigger on <strong>startup</strong>, even when the WiFi configuration was set.</p>
<h2>The webGUI</h2>
<p>Diagnosing the webGUI connection issues was much harder, since the Intel WiFi driver bug would at least trigger whenever I was trying to set up the connection. The obvious solution of making a firewall rule to allow HTTPS connections didn't seem to do anything. Attempts to access the webGUI if and when I could sporadically get the WiFi to connect just led to timed out connections.</p>
<p>So to figure out what to do next, I asked Bing/Microsoft Copilot (they've changed the URL, so I have no idea what's going on with the branding) for some advice on how to troubleshoot the issue. And that advice included a console command to disable the firewall.</p>
<p>After executing the command and going into the network interface commands to get the WiFi connection to communicate with the DHCP server, and I had an IP address.</p>
<p>So this made me look closer at the firewall settings for the interface.</p>
<h2>The Settings</h2>
<div class="gallery-wrapper gallery-wrapper--wide"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/26/gallery/opnsense-03.png" data-size="1349x615"><img loading="lazy" src="https://korgano.github.io/media/posts/26/gallery/opnsense-03-thumbnail.png" alt="OPNsense OPT1 Interface Firewall rules - part 1." width="768" height="350"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/26/gallery/opnsense-04.png" data-size="1349x615"><img loading="lazy" src="https://korgano.github.io/media/posts/26/gallery/opnsense-04-thumbnail.png" alt="OPNsense OPT1 Interface Firewall rules - part 2." width="768" height="350"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/26/gallery/opnsense-05.png" data-size="1349x615"><img loading="lazy" src="https://korgano.github.io/media/posts/26/gallery/opnsense-05-thumbnail.png" alt="OPNsense OPT1 Interface Firewall rules - part 3." width="768" height="350"></a></figure>
</div></div>
<p>It turns out that when I was implementing that HTTPS rule earlier, I overlooked an entire suite of default rules in a collapsed accordion interface. So I opened it up, and took a look inside.</p>
<p>As you can see above, the list <strong>starts </strong>with a deny anything rule, although it <strong>supposedly </strong>is a last match rule. That made me suspicious, so I replaced the HTTPS rule with a generic allow all IPv4/IPv6 rule into the interface, to see if that would change things.</p>
<p>No dice. Still had the same errors and connection problems.</p>
<p>I looked to see if I could either disable the default rules one by one or all together, but there wasn't a GUI option for that. I also couldn't move my own custom rule before the default rules.</p>
<p>This was a big problem, because one of the earliest things you learn in cybersecurity is that access control lists are executed in order of how the rules are listed. So you have to get the order right to ensure things work as intended.</p>
<p>Eventually, I couldn't figure out what to do next, so I made an issue on the OPNsense Github repo, and got this helpful advice:</p>
<blockquote>
<p>You can easily debug the effect of these rules by editing <code class="notranslate">/tmp/rules.debug</code> and after modifying the ruleset, apply changes using <code class="notranslate">pfctl -f /tmp/rules.debug</code>.</p>
</blockquote>
<p>One thing I discovered while attempting this was that the rules list in the debug file was in the same order as it displayed in the webGUI. Which means that there's a high likelihood that the problem was the default IPv4 deny rule. So I commented it out, applied the changes and...</p>
<p>Got an IP address with no problems and could connect to the webGUI.</p>
<h2>Poking Around Some More</h2>
<p>Experimenting some more with various logging techniques, I discovered a few other things.</p>
<p>First, it seemed like the outbound rules were definitely not the problem:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/26/cyber-proj-tfb07.png" alt="OPNsense OPT1 interface traffic being allowed out onto network." width="1349" height="615" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb07-xs.png 384w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb07-sm.png 600w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb07-md.png 768w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb07-lg.png 1200w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb07-xl.png 1600w"></figure>
<p>Second, the default IPv4 deny rule was <strong>definitely </strong>part of the problem:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/26/cyber-proj-tfb08.png" alt="OPT1 interface default IPv4 deny rule applying to multiple packets." width="1349" height="615" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb08-xs.png 384w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb08-sm.png 600w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb08-md.png 768w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb08-lg.png 1200w ,https://korgano.github.io/media/posts/26/responsive/cyber-proj-tfb08-xl.png 1600w"></figure>
<p>I tried packet captures through OPNsense's internal diagnostic tools, then ran into a bizarre problem. By default, the captures would end at a certain amount of packets, which made sense to keep things from being unmanageable. But if I set the capture to some value like 50 or 100, the capture wouldn't end, even after multiple minutes.</p>
<p>As a sanity check, I opened up Wireshark on a separate computer, connected to the webGUI over the WiFi, used the webGUI IP address as the capture filter, and began capturing. Within <strong>ten seconds</strong>, I had over 100 packets. Checking the packet captures I made in OPNsense, even the most permissive ones were lucky to have more than a dozen.</p>
<p>This makes troubleshooting this issue <strong>much </strong>harder.</p>
<h2>The Theory of the Bug</h2>
<p>Here's what I <strong>think </strong>is happening:</p>
<ol>
<li>There's a bug somewhere in the code.</li>
<li>When the firewall is initialized, the default IPv4 deny rule triggers first, despite being a last match rule.</li>
<li>When the WiFi interface initializes, the rule blocks the DHCP Offer and/or Acknowledge packets from the DHCP server, triggering the Intel WiFi error.</li>
<li>If/when the WiFi connection is made, the firewall blocks the webGUI TCP three-way handshake at some point.</li>
<li>The webGUI connection then times out, because it doesn't receive the SYN-ACK and/or ACK packets it was expecting.</li>
</ol>
<h2>The UX Part of The Problem</h2>
<p>The frustrating part of this situation is that there's a potentially simple solution to the problem. It just doesn't exist, because the developers seem resistant to the idea that their implementation of the default rules might be a problem.</p>
<p>No less than <strong>three </strong>issues reference the default firewall rules, and one of those is my own.</p>
<p>Now, the main point of disagreement, from what I can tell, is this:</p>
<ol>
<li>The developers want to provide default firewall rules that protect every connection.</li>
<li>The users want to be able to alter/disable/delete the rules from the rules GUI.</li>
</ol>
<p>These two things are <strong>not </strong>mutually exclusive, which is why the general tone of users in <a href="https://github.com/opnsense/core/issues/7127" title="Allow custom Firewall rules before auto generated rule / allow auto generated rules to be configured/deleted" target="_blank" rel="noopener noreferrer">this issue thread</a> (the first I could find) is of frustration:</p>
<blockquote>
<p dir="auto">I think it's a little more than agreeing to disagree.</p>
<p dir="auto">What is the purpose of using a firewall if I don't have full autonomy over what rules I want to create/delete?</p>
<hr>
<p dir="auto">normally closedsource products try to think for me and prevent me of doing stuff. i prefer the straight way of linux and its <code class="notranslate">rm -rf /</code>. if i want to do that i can. it is really sad that you/the opnsense team is blocking such an important functionality which, as this ticket shows, costs developer a lot of time and blocks them from using your awesome software. i would love to stand with opnsense instead of pfsense. so i would really prefer to use opnsense.</p>
<p dir="auto">i think i can speak for the people who commented here that it is not about removing a default setting, which you say make the firewall more secure, but the option for an advanced user to do so.</p>
</blockquote>
<p dir="auto">So, since this is a somewhat contentious topic, I'm just going to ask a simple question:</p>
<p dir="auto">Isn't turning things on and off in different orders, and sometimes moving things around, the most common and proven method of troubleshooting?</p>
<p dir="auto">It seems odd to remove this basic capability, then expect people to always stumble upon the potential solutions. And to be honest, if your default settings are causing issues, is that not a big red flag suggesting there might need to be changes?</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Cyber Thoughts: Tuw GUI Wrapper</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-tuw-gui-wrapper/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-tuw-gui-wrapper/</id>
        <media:content url="https://korgano.github.io/media/posts/25/unknown_2024.10.07-16.38.png" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="PC"/>
            <category term="Cybersecurity"/>

        <updated>2024-10-08T09:00:33-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/25/unknown_2024.10.07-16.38.png" alt="A successful execution of Unreal Engine 4 UCAS/UTOC packing via Tuw GUI" />
                    I have a love-hate relationship with command line. On one hand, I cannot deny the speed and efficiency command line&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/25/unknown_2024.10.07-16.38.png" class="type:primaryImage" alt="A successful execution of Unreal Engine 4 UCAS/UTOC packing via Tuw GUI" /></p>
                <p>I have a love-hate relationship with command line.</p>
<p>On one hand, I cannot deny the speed and efficiency command line has with some tasks.</p>
<p>On the other, command line requires not only knowledge of the commands and variables to input, but it requires a lot of typing, copy-pasting, and/or trial and error to get working properly.</p>
<p>Now, AI can make the iteration process a lot easier and faster, and once you've gotten a command perfected, you can make it into a script file, but most people are familiar and more comfortable with a Graphical User Interface (GUI).</p>
<p>But what if you could come up with a GUI for your Command Line Interface (CLI) commands?</p>
<h2>Tuw - The Open Source Solution</h2>
<p>I discovered <a href="https://github.com/matyalatte/tuw" title="Tuw: a tiny GUI wrapper for command-line tools" target="_blank" rel="noopener noreferrer">Tuw</a> thanks to someone on the Unreal Engine Modding Discord. (I would give credit, but it's very annoying to search Discord for things like this.)</p>
<p>A large number of tools for modding Unreal Engine games are CLI tools, which often involve multiple file paths and variables, and generally don't have a GUI created by the actual tool developer. Also, the documentation on the Github pages tend not to be the best. So they tend to be <strong>incredibly </strong>unfriendly to new users, who tend to search around for knowledge on how to mod a specific game that happens to use Unreal Engine.</p>
<p>How Tuw works is pretty simple. There is an executable file (.EXE for Windows, and other formats for Mac and Linux) that checks a JSON file for the following things:</p>
<ul>
<li>The actual command.</li>
<li>A button to execute the command.</li>
<li>Input fields.</li>
<li>Labels for the fields and the button.</li>
<li>Identifiers for variables </li>
<li>Rules for input validation and error handling.</li>
<li>A wide variety of other settings.</li>
</ul>
<h2>Keep It Stupid Simple</h2>
<p>There is an old axiom that you may have heard of: KISS.</p>
<p>You may be familiar with what it usually spells out: Keep It Simple, Stupid. It's a warning to keep people from creating overcomplicated solutions, because people like to associate complexity with sophistication. But there's a flip side of the coin that people tend to ignore.</p>
<p>Keep It Stupid Simple is an informal design goal. The polite summation is that the solution being designed for the task should be as simple and easy as possible, so that even an uneducated person can do the job. Some would say that Apple is a master of this, but other relevant (but non-tech related) examples would be the AK and Glock. If the thing you design can be easily and successfully used by anyone within a half hour or less, it's stupid simple.</p>
<p>Tuw very much fits this mold. Let's look at the JSON code I created to handle the task:</p>
<div>
<div><code>{</code></div>
<div><code>    "gui": [</code></div>
<div><code>        {</code></div>
<div><code>            "label": "Minimal Sample",</code></div>
<div><code>            "window_name": "Unreal IO Store Command",</code></div>
<div><code>            "command": "%UE4editor% %uProject% -run=IoStore -CreateGlobalContainer=%GlobalContainer% -CookedDirectory=%CookedDir% -Commands=%Commands% -CookerOrder=%CookerOrder% -TargetPlatform=WindowsNoEditor -stdout -UTF8Output",</code></div>
<div><code>            "button": "Pack uAssets",</code></div>
<div><code>            "components": [</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "file",</code></div>
<div><code>                    "label": "UE4 Editor path",</code></div>
<div><code>                    "extension": "EXE files (*.exe)|*.exe",</code></div>
<div><code>                    "placeholder": "D:\\EGS\\UE_4.27\\Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe",</code></div>
<div><code>                    "id": "UE4editor",</code></div>
<div><code>                    "validator": {</code></div>
<div><code>                                    "exist": true,</code></div>
<div><code>                                    "not_empty": true,</code></div>
<div><code>                                    "wildcard": "*.exe"</code></div>
<div><code>                                }</code></div>
<div><code>                },</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "file",</code></div>
<div><code>                    "label": "Aliens: Dark Descent project path",</code></div>
<div><code>                    "extension": "uProject files (*.uproject)|*.uproject",</code></div>
<div><code>                    "placeholder": "D:\\EGS\\Projects\\ASF_Updated\\ASF.uproject",</code></div>
<div><code>                    "id": "uProject",</code></div>
<div><code>                    "validator": {</code></div>
<div><code>                        "exist": true,</code></div>
<div><code>                        "not_empty": true,</code></div>
<div><code>                        "wildcard": "*.uproject"</code></div>
<div><code>                    }</code></div>
<div><code>                },</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "file",</code></div>
<div><code>                    "label": "Global.Utoc Path",</code></div>
<div><code>                    "extension": "uTOC files (*.utoc)|*.utoc",</code></div>
<div><code>                    "placeholder": "D:\\EGS\\Projects\\ASF_Updated\\Saved\\StagedBuilds\\WindowsNoEditor\\ASF\\Content\\Paks\\global.utoc",</code></div>
<div><code>                    "id": "GlobalContainer",</code></div>
<div><code>                    "validator": {</code></div>
<div><code>                        "exist": true,</code></div>
<div><code>                        "not_empty": true,</code></div>
<div><code>                        "wildcard": "*.utoc"</code></div>
<div><code>                    }</code></div>
<div><code>                },</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "folder",</code></div>
<div><code>                    "label": "Path to uAssets",</code></div>
<div><code>                    "placeholder": "D:\\AliensDarkDescent\\zModCamera",</code></div>
<div><code>                    "add_quotes": false,</code></div>
<div><code>                    "id": "CookedDir"</code></div>
<div><code>                },</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "file",</code></div>
<div><code>                    "label": "Commands text file",</code></div>
<div><code>                    "extension": "Text files (*.txt)|*.txt",</code></div>
<div><code>                    "placeholder": "D:\\EGS\\Projects\\ASF_Updated\\ASF_Upgrades.txt",</code></div>
<div><code>                    "add_quotes": true,</code></div>
<div><code>                    "id": "Commands",</code></div>
<div><code>                    "validator": {</code></div>
<div><code>                        "exist": true,</code></div>
<div><code>                        "not_empty": true,</code></div>
<div><code>                        "wildcard": "*.txt"</code></div>
<div><code>                    }</code></div>
<div><code>                },</code></div>
<div><code>                {</code></div>
<div><code>                    "type": "file",</code></div>
<div><code>                    "label": "Path to Cooker Order file",</code></div>
<div><code>                    "extension": "Log files (*.log)|*.log",</code></div>
<div><code>                    "placeholder": "D:\\EGS\\Projects\\ASF_Updated\\Build\\WindowsNoEditor\\FileOpenOrder\\CookerOpenOrder.log",</code></div>
<div><code>                    "add_quotes": false,</code></div>
<div><code>                    "id": "CookerOrder",</code></div>
<div><code>                    "validator": {</code></div>
<div><code>                        "exist": true,</code></div>
<div><code>                        "not_empty": true,</code></div>
<div><code>                        "wildcard": "*.log"</code></div>
<div><code>                    }</code></div>
<div><code>                }</code></div>
<div><code>            ]</code></div>
<div><code>        }</code></div>
<div><code>    ]</code></div>
<div><code>}</code></div>
</div>
<p><a href="https://github.com/matyalatte/tuw/blob/main/examples" target="_blank" rel="noopener noreferrer">Tuw comes with extensive documentation on how to set up the JSON file</a>. And most crucially, it comes with example code that actually shows how the code should be configured <strong>and </strong>integrated with the other code. A great deal of documentation for other items presupposes that the user has a great deal of applicable knowledge going in... Which then causes problems when the user does <strong>not </strong>have that knowledge.</p>
<p>And modding is perhaps the quintessential example of that type of scenario. In most circumstances, the person who wants to mod has <strong>zero </strong>experience with the specific programs they have to use. They might be familiar with editing code or configuration files, but perhaps not command line interfaces, especially if they're coming from a game where there's an official mod tool kit. </p>
<p>(I speak from experience.)</p>
<h2>The Tuw GUI Crafting Experience</h2>
<p>Making a GUI with Tuw is quite fast. Between copying and pasting code straight from the Github documentation and auto-complete, the main time sink will be the complexity of the command and the GUI. More fields naturally increases the amount of time spent making the GUI, especially if they're of multiple different types and require different types of validation.</p>
<p>Testing is a bit finicky, because the program expects you to use <code>gui_definition.json</code> as the file name. So there's no way to switch between GUIs without coding 2+ GUIs' worth of JSON code. This is a <strong>massive </strong>inconvenience <a href="https://github.com/matyalatte/tuw/tree/main/examples/get_start/json_embed" title="JSON Embedding" target="_blank" rel="noopener noreferrer">if you plan to make a Tuw program with the JSON code embedded in it for distribution</a>.</p>
<p>(The issue is that because Tuw defaults to reading <code>gui_definition.json</code>, which is the file that can be set to allow Tuw to generate a new version of Tuw with a GUI definition embedded in it. So have to have two separate JSONs, and the new EXE will have an annoying popup on run alerting you to the fact that it's ignoring <code>gui_definition.json</code> in favor of the one you specified.)</p>
<p>Once you initialize Tuw, go through the steps required to fill out the various fields, then press the button to execute the command. If there's an error, it'll show up if you have validator or <a href="https://github.com/matyalatte/tuw/tree/main/examples/other_features/error" title="Error Handling" target="_blank" rel="noopener noreferrer">error handling code</a>. In my case, I initially had regular expression <strong>and </strong>wildcard matching for the file extensions, but for some reason, every single file reported as invalid. Removing those lines from the JSON fixed the problem.</p>
<p>Once that was done, I went through the process of filling out the fields and got the following result:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/25/unknown_2024.10.07-16.38-2.png" alt="A successful execution of Unreal Engine 4 UCAS/UTOC packing via Tuw GUI" width="1920" height="1080" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/25/responsive/unknown_2024.10.07-16.38-2-xs.png 384w ,https://korgano.github.io/media/posts/25/responsive/unknown_2024.10.07-16.38-2-sm.png 600w ,https://korgano.github.io/media/posts/25/responsive/unknown_2024.10.07-16.38-2-md.png 768w ,https://korgano.github.io/media/posts/25/responsive/unknown_2024.10.07-16.38-2-lg.png 1200w ,https://korgano.github.io/media/posts/25/responsive/unknown_2024.10.07-16.38-2-xl.png 1600w"></figure>
<p>Tuw successfully completed the file generation part of the task, which meant any issues would be on my end.</p>
<h2>The Cybersecurity Applications</h2>
<p>How can this be leveraged for cybersecurity?</p>
<p>There's a non-zero use case for a GUI when you have a long command that requires multiple file and/or folder paths. But if we're honest, I doubt that it's all that common, and you're better off using a conventional script... unless your organization just blanket disables command line <strong>and </strong>PowerShell. Then this might be your only option.</p>
<p>But what comes to mind is a stupid simple way to execute troubleshooting commands on an endpoint PC for a non-technical and/or non-permissioned user. For example, you could make multiple Tuw based executable files for ping testing when a user calls with a network connection issue. One file would execute <code>ping 8.8.8.8</code>, another would ping a specified endpoint, and so on, and each would only require the user to make a few clicks.</p>
<p>Naturally, you'd need to have someone qualified inspect the source code and verify that it was safe to use, but on the plus side, all those JSONs for your GUIs should be compatible across versions. If there's ever a problem, you can just rebuild the embedded GUI executables by combining a known good version of Tuw with those JSONs.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Cyber Thoughts: More Reasons for Local AI</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/</id>
        <media:content url="https://korgano.github.io/media/posts/24/chatgpt-jank.png" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-19T10:17:01-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/24/chatgpt-jank.png" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." />
                    This week, I was hoping to follow up on my previous cybersecurity project post, only to run into an unforeseen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/24/chatgpt-jank.png" class="type:primaryImage" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." /></p>
                <p>This week, I was hoping to follow up on <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 3.0" target="_blank" rel="noopener noreferrer">my previous cybersecurity project post</a>, only to run into an unforeseen problem.</p>
<p>Since it's best to make lemonade out of lemons, let's talk about what happens when web AI interfaces stop working.</p>
<h2>The Problem</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/24/chatgpt-jank-2.png" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." width="1920" height="952" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-xs.png 384w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-sm.png 600w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-md.png 768w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-lg.png 1200w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-xl.png 1600w"></figure>
<p>Two days ago, my ChatGPT session went from normal to what you see above.</p>
<p>Typing does nothing - I can make a prompt, but there's no data transmission to ChatGPT.</p>
<p>Clearing cache, temporarily disabling PiHole DNS blackhole, and ad/script blockers do nothing. I'll have to do more investigation to see if the connectivity issue is on my end or ChatGPT's, but it does provide another great example of why local AI is a good idea.</p>
<p>(Bing Copilot is still available, so it's not something that affecting all web AI, as far as I can tell.)</p>
<h2>AI Needs High Availability</h2>
<p>In IT/cybersecurity, the Five 9s are the gold standard for availability - 99.999% uptime.</p>
<p>Let's set aside all the data confidentiality and integrity issues that might come with using AI (Large and Small Language Models - LLMs/SLMs). The main benefit of AI at the moment is generating content - informational or artistic - quickly and in accordance with the user's input.</p>
<p>In order to be useful, it needs to be <strong>available</strong>, and an AI hosted on someone else's servers is always going to be vulnerable to service disruption. It could be at their end, your end, or even the ISP in general, but there's plenty of failure points on the chain.</p>
<p>So, how do we get around this?</p>
<h2>Exploit the Training Bubble Pop</h2>
<p><a href="https://www.rand.org/pubs/research_reports/RRA2680-1.html" title="The Root Causes of Failure for Artificial Intelligence Projects and How They Can Succeed" target="_blank" rel="noopener noreferrer">80% of AI projects fail</a>, according to RAND Corporation research.</p>
<p>Most of that comes down to inflated expectations created by Hollywood and grifters, but also a fundamental misunderstanding of how LLMs and SLMs function. You don't <strong>need </strong>to train the AI on your data to get useful outputs from it. You can use Retrieval Augmented Generation (RAG) to expand the AI's knowledge base:</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/T-D1OfcDW1M?pp=ygUecmV0cmlldmFsIGF1Z21lbnRlZCBnZW5lcmF0aW9u" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>So we only need the hardware to do the inferencing (generating responses), which is a lower tier of complexity and performance requirements than training.</p>
<p>Graphics cards and Neural Processing Unit (NPU) equipped chips are providing most of the inferencing hardware on the market, but they're not exactly cost efficient. Decent performance GPUs cost hundreds of dollars, and NPU equipped processors are only in laptops, which also require hundreds of dollars each. What are we to do?</p>
<p>Well, thanks to the billions of dollars spent on AI training hardware, which is also capable of inferencing, and the general trend of AI project failure, the answer is simple. Wait for the AI training bubble to pop, and acquire the used hardware as it's being liquidated to keep the companies afloat.</p>
<h2>Things to Keep in Mind</h2>
<p>So, on top of all the usual caveats about buying used hardware, especially in a corporate environment, there's one specific thing to keep in mind:</p>
<p>AMD's server chips have a fuse in them that trips when they are initialized, locking them to a specific vendor's motherboards.</p>
<p>This raises the cost of some used AI server hardware, as buying a matched processor and motherboard set is going to be safer than trying to get two separate units and hope that AMD didn't put even more specific fuses in there to further restrict hardware choice.</p>
<p>Another thing to consider is what information will be provided to the AI through RAG, where the information is to be hosted, and how implement network segmentation.</p>
<p>For instance, for a local AI server in a home or single-building small business, it may make sense to host all the RAG data you want on that same system. (It may also be the only option, if you're using software that doesn't allow for remote access to data.) However, the more data you have, the more likely it is that a NAS or Storage Area Network (SAN) might be necessary.</p>
<p>What that data is also plays a huge part in figuring out your storage needs. If you're just pulling down text documentation for software you're using and making it accessible to the AI, you could probably get away with way less storage than an organization that's using RAG on multimedia content.</p>
<p>Naturally, you also have to be careful what you make available to the AI, because if prompted the right way, it <strong>will </strong>provide that information, whether you intended for that to happen or not. Even if you apply access controls to the AI or the data, it may be simpler and easier to redact/remove any Personal Identification Information (PII) or Personal Health Information (PHI). The AI can't leak what it doesn't have, and it reduces your compliance headaches.</p>
<p>Network segmentation is also going to be an interesting challenge. Obviously, the AI server should be on its own segment, so that access can be controlled through firewall control lists. But should the storage servers associated with the RAG data also be on the same network segment?</p>
<p>These questions and more are what we cybersecurity practioners need to ponder as organizations adopt AI and integrate it into their operations.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 3.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/</id>
        <media:content url="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-11T10:13:51-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" alt="Fiber optic bundle by JJ Ying on Unsplash" />
                    Last time, I ran into a number of issues in terms of the actual implementation of the transparent filtering bridge,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" class="type:primaryImage" alt="Fiber optic bundle by JJ Ying on Unsplash" /></p>
                <p><a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 2.0: CLI is a UX Failure" target="_blank" rel="noopener noreferrer">Last time</a>, I ran into a number of issues in terms of the actual implementation of the transparent filtering bridge, with the most severe being the inability to actually manage it when connected to my network.</p>
<p>Instead of scuttling the whole time, I decided to sidestep the issue for the moment, and move on to the next part of the process, making firewall rules.</p>
<p>But for this step, I want do something a little more interesting.</p>
<p>So, instead of just documenting how I make a rule for OPNsense, I'm going to make this a three-way competition: me vs ChatGPT vs Bing Copilot!</p>
<h2>Step 1: Which Guide to Use?</h2>
<p>When it comes to doing any kind of configuration by hand, success or failure can often depend on what guidance you have.</p>
<p>There are two obvious guiding documents for this task:</p>
<ul>
<li><a href="https://docs.opnsense.org/manual/firewall.html" target="_blank" rel="noopener noreferrer">OPNsense's Firewall Rule documentation</a></li>
<li><a href="https://www.zenarmor.com/docs/network-security-tutorials/how-to-configure-opnsense-firewall-rules" title="How to Configure OPNsense Firewall Rules?" target="_blank" rel="noopener noreferrer">ZenArmor's guide on configuring OPNsense firewall rules</a></li>
</ul>
<p>Of the two, the ZenArmor guide is <strong>vastly </strong>more useful. Not only does it explain how things work, it breaks down the process of setting up a rule, provides several examples of common rules, <strong>and </strong>has a large number of images so you can check yourself throughout the process.</p>
<h2>Step 2: What to Block?</h2>
<p>Making firewall rules is a lot like threat hunting: you have to make an assumption that a threat is present, so you can actually have a direction for action.</p>
<p>In this case, I don't have to make the assumption. I <strong>know </strong>I have Amazon devices with Alexa voice control in my home.</p>
<p>So, in this case, I want to block outbound traffic to Amazon's Alexa servers.</p>
<h2>Step 3: What IP Address Does Alexa's Server Use?</h2>
<p>Obviously, to stop traffic going to the server, I have to know the IP address that's receiving the data.</p>
<p>Thankfully, the question <code>what are the ip addresses for amazon alexa servers</code> provided me with an easily verifiable answer via <a href="https://www.netify.ai/resources/ips/44.199.80.228" title="44.199.80.228 - IP Info" target="_blank" rel="noopener noreferrer">Netify</a>: <code>44.199.80.228</code>.</p>
<h2>Step 4: Making the Rule</h2>
<p>Following through the ZenArmor guide laid out the process for creating the rule quite well.</p>
<ul>
<li>Action: Block</li>
<li>TCP/IP: IPv4</li>
<li>Protocol: Any</li>
<li>Source: The Amazon devices</li>
<li>Port: Any</li>
<li>Destination: 44.199.80.228</li>
<li>Port: Any</li>
<li>Log: Blocking Amazon device transmission to Amazon Alexa server</li>
</ul>
<p>Interestingly, OPNsense has a feature called Aliases, which allows users to group multiple items together as sources/destinations for a rule.</p>
<p>So for this rule, I'll create an <code>AlexaSource</code> alias that contains 4 IP addresses: <code>192.168.##.#, 192.168.##.#, 192.168.##.#, 192.168.##.#</code></p>
<p>At this point, I think I have a proper rule ready, but let's see what the AI say.</p>
<h2>Step 5: Creating the Prompt</h2>
<p>In order to have a comparable result, we need to have a single prompt that is used by both LLMs. This is what I came up with:</p>
<blockquote>
<p>Make me an OPNsense firewall rule that does the following:</p>
<ul>
<li>Blocks traffic from a group of IP addresses called AlexaDevice going to the IP address(es) for Amazon's Alexa server(s)</li>
<li>Logs traffic with the message "Blocking Amazon device transmission to Amazon Alexa server"</li>
</ul>
</blockquote>
<h2>Step 6: ChatGPT</h2>
<p>Putting in the prompt generated this output:</p>
<blockquote>
<p>To create an OPNsense firewall rule that blocks traffic from a group of IP addresses (labeled "AlexaDevice") from reaching Amazon Alexa servers, while logging traffic with a custom message, follow these steps:<br><br><strong>Step 1: Create the "AlexaDevice" Alias</strong><br>- Go to **Firewall &gt; Aliases**.<br>- Click on the **+** button to create a new alias.<br>- Set **Name** to <code>AlexaDevice</code>.<br>- Set **Type** to <code>Host(s)</code>.<br>- Under **Content**, enter the list of IP addresses that belong to your Alexa devices.<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 2: Create the Amazon Alexa Servers Alias</strong><br>- Go back to **Firewall &gt; Aliases**.<br>- Click the **+** button to create another alias.<br>- Set **Name** to <code>AmazonAlexaServers</code>.<br>- Set **Type** to <code>Host(s)</code> or <code>Network(s)</code> (depending on the format of Amazon Alexa's IPs).<br>- Under **Content**, enter the IP addresses or subnets associated with Amazon Alexa servers. (You'll need to find Amazon Alexa server IPs, which may require researching their specific ranges.)<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 3: Create the Block Rule in the Firewall</strong><br>- Navigate to **Firewall &gt; Rules &gt; LAN** (or the appropriate interface for your Alexa devices).<br>- Click the **+** button to add a new rule.<br>- Set **Action** to **Block**.<br>- Set **Interface** to **LAN** (or appropriate interface).<br>- Set **Protocol** to **Any** (since you may want to block all types of traffic).<br>- In the **Source** section:<br>  - Set **Source** to **Single Host or Alias**.<br>  - In the **Source Address**, choose the <code>AlexaDevice</code> alias from the dropdown.<br>- In the **Destination** section:<br>  - Set **Destination** to **Single Host or Alias**.<br>  - In the **Destination Address**, choose the <code>AmazonAlexaServers</code> alias from the dropdown.<br>- Under the **Log** section:<br>  - Check the **Log packets that are handled by this rule** option.<br>  - Add your custom log message in the **Description** box: <br>    - <code>Blocking Amazon device transmission to Amazon Alexa server</code>.<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 4: Apply Rule Changes</strong><br>- Go to the top right and click **Apply Changes** to activate your new rule.<br><br>This setup blocks traffic from devices in the **AlexaDevice** alias from reaching Amazon Alexa servers, logs those attempts, and tags them with the custom message you specified.</p>
</blockquote>
<p>Interestingly, ChatGPT gives me the full process to make the rule, but that's probably not surprising. Given the training data and refinements through use, the probabilities for responding to this question are almost certainly skewed more towards a step by step response than a simple table, like ZenArmor's examples.</p>
<h2>Step 7: Bing Copilot</h2>
<p>Putting in the prompt generated this output:</p>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Sure! Here's how you can create an OPNsense firewall rule to block traffic from a group of IP addresses called &#96;AlexaDevice&#96; to Amazon's Alexa servers and log the traffic with a specific message:

1. **Create Aliases**:
   - Go to **Firewall &gt; Aliases**.
   - Create an alias named &#96;AlexaDevice&#96; and add the IP addresses of your Alexa devices.
   - Create another alias named &#96;AmazonAlexaServers&#96; and add the IP addresses of Amazon's Alexa servers.

2. **Create the Firewall Rule**:
   - Go to **Firewall &gt; Rules &gt; [Your Interface]** (e.g., LAN).
   - Click on **Add** to create a new rule.
   - Set the following parameters:
     - **Action**: Block
     - **Interface**: [Your Interface] (e.g., LAN)
     - **Protocol**: Any
     - **Source**: Single host or alias, and select &#96;AlexaDevice&#96;
     - **Source Port Range**: Any
     - **Destination**: Single host or alias, and select &#96;AmazonAlexaServers&#96;
     - **Destination Port Range**: Any
     - **Description**: Blocking Amazon device transmission to Amazon Alexa server
     - **Log**: Check the box to enable logging
     - **Log Message**: &quot;Blocking Amazon device transmission to Amazon Alexa server&quot;

3. **Save and Apply**:
   - Click **Save** to save the rule.
   - Click **Apply Changes** to activate the rule.

This setup will block any traffic from the devices in the &#96;AlexaDevice&#96; alias to the &#96;AmazonAlexaServers&#96; alias and log the traffic with the specified message[^1^][^2^].

If you need further assistance, feel free to ask!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<blockquote>
<p>Sure! Here’s how you can create an OPNsense firewall rule to block traffic from a group of IP addresses called <code>AlexaDevice</code> to Amazon’s Alexa servers and log the traffic with a specific message:</p>
<ol>
<li>
<p><strong>Create Aliases</strong>:</p>
<ul>
<li>Go to <strong>Firewall &gt; Aliases</strong>.</li>
<li>Create an alias named <code>AlexaDevice</code> and add the IP addresses of your Alexa devices.</li>
<li>Create another alias named <code>AmazonAlexaServers</code> and add the IP addresses of Amazon’s Alexa servers.</li>
</ul>
</li>
<li>
<p><strong>Create the Firewall Rule</strong>:</p>
<ul>
<li>Go to <strong>Firewall &gt; Rules &gt; [Your Interface]</strong> (e.g., LAN).</li>
<li>Click on <strong>Add</strong> to create a new rule.</li>
<li>Set the following parameters:
<ul>
<li><strong>Action</strong>: Block</li>
<li><strong>Interface</strong>: [Your Interface] (e.g., LAN)</li>
<li><strong>Protocol</strong>: Any</li>
<li><strong>Source</strong>: Single host or alias, and select <code>AlexaDevice</code></li>
<li><strong>Source Port Range</strong>: Any</li>
<li><strong>Destination</strong>: Single host or alias, and select <code>AmazonAlexaServers</code></li>
<li><strong>Destination Port Range</strong>: Any</li>
<li><strong>Description</strong>: Blocking Amazon device transmission to Amazon Alexa server</li>
<li><strong>Log</strong>: Check the box to enable logging</li>
<li><strong>Log Message</strong>: “Blocking Amazon device transmission to Amazon Alexa server”</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Save and Apply</strong>:</p>
<ul>
<li>Click <strong>Save</strong> to save the rule.</li>
<li>Click <strong>Apply Changes</strong> to activate the rule.</li>
</ul>
</li>
</ol>
<p><a href="https://homenetworkguy.com/how-to/firewall-rules-cheat-sheet/" class="tooltip-target" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-59-group" h="ID=SERP,5015.1" target="_blank" rel="noopener">This setup will block any traffic from the devices in the <code>AlexaDevice</code> alias to the <code>AmazonAlexaServers</code> alias and log the traffic with the specified message</a><a href="https://homenetworkguy.com/how-to/firewall-rules-cheat-sheet/" class="ac-anchor sup-target" target="_blank" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-57" aria-label="1: AmazonAlexaServers" h="ID=SERP,5015.1" rel="noopener"><sup class="citation-sup">1</sup></a><a href="https://forum.opnsense.org/index.php?topic=34331.0" class="ac-anchor sup-target" target="_blank" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-59" aria-label="2: AmazonAlexaServers" h="ID=SERP,5015.1" rel="noopener"><sup class="citation-sup">2</sup></a>.</p>
<p>If you need further assistance, feel free to ask!</p>
</blockquote>
</div>
<div class="ac-horizontal-separator" aria-hidden="true"> </div>
</div>
<div class="ad-container">Bing Copilot's response is a lot more comparable to my own writing and is honestly easier to read, although it's presupposing a higher level of knowledge/tech competence from the user.</div>
<h2>Which is Better?</h2>
<p>Without the ability to actually test these, it's hard to say. Here's what I can tell from looking at both responses and comparing to my own:</p>
<ul>
<li>ChatGPT gives more detail on how to actually set the options, and includes setup instructions for the aliases.</li>
<li>Bing Copilot is more easily readable and faster to copy the settings from.</li>
<li>Both of the AI responses don't set the IP version, which means that was an optional setting I didn't need to set.</li>
<li>Neither of the AI responses included an actual IP address for Alexa's servers.</li>
</ul>
<p>Interestingly, neither of the LLM generated replies attempted to provide an actual IP address for Alexa's server(s). That's something to keep in mind for future use: if it's not explicitly pointed out by the prompt, it won't get done.</p>
<h2>What's Next?</h2>
<p>Since OPNsense is still a no go for now, actually testing out this rule is a no-go.</p>
<p>So what I'll do is move onto an even harder step, creating Suricata rules, which I <em>can </em>test.</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 4.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-40/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-40/</id>
        <media:content url="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-06T10:19:00-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" alt="ThriveDX login error screen" />
                    After a brief delay caused by ChatGPT session cookies being corrupted, we're getting back on track with the Transparent Filtering&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" class="type:primaryImage" alt="ThriveDX login error screen" /></p>
                <p><a href="https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/" title="Quick Cyber Thoughts: More Reasons for Local AI" target="_blank" rel="noopener noreferrer">After a brief delay caused by ChatGPT session cookies being corrupted</a>, we're getting back on track with the Transparent Filtering Bridge project.</p>
<p>This week, we're going to try to make Suricata IPS rules with AI, namely ChatGPT (whatever model free users get to use as 9/25/2024) and Bing Copilot. (As as aside, it's kind of annoying that ChatGPT sometimes lets free users have access to higher quality models, but doesn't explicitly notify the user which model is being used.)</p>
<p>Since Suricata caused the OPNsense install to crash (<a href="https://github.com/opnsense/core/pull/7857/commits/6ba73f76afeff585cb6b1eeab49c08ae3026229b" title="OPNsense/Core Pull Request - Reduce pointless logging" target="_blank" rel="noopener noreferrer">possibly because someone set the default stat logging to <strong>8 seconds</strong></a>), we can't test in OPNsense itself. But I still retain ThriveDX access, so let's see if I can get the rules to run on one of their VMs running Suricata. (This is far from certain, given how janky their VMs/internet connections are.)</p>
<h2>The Prompts</h2>
<p>As before, the first step of the test is to come up with two prompts to feed into both AI.</p>
<p>Why two? Well, the first is going to be a simple directory traversal detector, looking for <code>../</code> or  <span class="fontstyle0"><code>%2e%2e%2f</code>:</span></p>
<blockquote>
<p>Make me a Suricata IPS rule that does the following:</p>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Detects incoming connections containing ../ or </span><span class="fontstyle0" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">%2e%2e%2f.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Blocks the connection.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates a log stating "Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;".</span></li>
</ul>
</blockquote>
<p>The second is going to be more complex and based on a <a href="https://documents.trendmicro.com/assets/white_papers/wp-tracking-the-activities-of-teamTNT.pdf" title="Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor Group" target="_blank" rel="noopener noreferrer">TrendMicro report on TeamTNT's credential theft techniques</a>:</p>
<blockquote>
<p>Make me a Suricata IPS rule that does the following:</p>
<ul>
<li>Detects incoming connections containing "userfile=@/etc/passwd" or "userfile=@/etc/hosts".</li>
<li>Blocks the connection.</li>
<li>Generates a log stating "Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;."</li>
</ul>
</blockquote>
<p>(Annoyingly, there are no Indicators of Compromise (IoTs) or code examples for the recently revealed Ryzen vulnerability, which was something I wanted to craft rules for.)</p>
<h2>ChatGPT - Prompt 1</h2>
<p>Here's what ChatGPT generated:</p>
<blockquote>
<h3>Steps:</h3>
<ol>
<li>
<p><strong>Create the rule:</strong></p>
<ul>
<li>Suricata rules generally follow this structure:</li>
<li><code>action protocol src_ip src_port direction dst_ip dst_port (rule_options;)</code></li>
<li>For your case, you'll use <strong><code>alert</code></strong> action (to generate a log) combined with <strong><code>drop</code></strong> action (to block the connection).</li>
<li>We'll detect <strong><code>../</code></strong> and <strong><code>%2e%2e%2f</code></strong> in the URI.</li>
</ul>
</li>
<li>
<p><strong>Rule Components:</strong></p>
<ul>
<li><strong>alert</strong> and <strong>drop</strong>: Both will be used to detect and block.</li>
<li><strong>http_uri</strong>: To inspect the HTTP request URI.</li>
<li><strong>content</strong>: To look for specific strings (<code>../</code> or <code>%2e%2e%2f</code>).</li>
<li><strong>msg</strong>: To specify a custom log message.</li>
<li><strong>sid</strong>: Rule identifier (must be unique).</li>
<li><strong>flow</strong>: Specifies the direction (from the client to the server).</li>
<li><strong>metadata</strong>: Includes information about the rule type (IPS) and severity.</li>
<li><strong>logto</strong>: To specify log output.</li>
</ul>
</li>
<li>
<p><strong>Example Suricata Rule</strong>:</p>
<ol>
<li><code>alert http any any -&gt; any any (msg:"Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;"; content:"../"; http_uri; nocase; sid:1000001; rev:1; logto:"traversal.log";)</code></li>
<li><code>alert http any any -&gt; any any (msg:"Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;"; content:"%2e%2e%2f"; http_uri; nocase; sid:1000002; rev:1; logto:"traversal.log";)</code></li>
<li><code></code><code>drop http any any -&gt; any any (msg:"Blocked directory traversal attempt"; content:"../"; http_uri; nocase; sid:1000003; rev:1;)</code></li>
<li><code></code><code>drop http any any -&gt; any any (msg:"Blocked directory traversal attempt"; content:"%2e%2e%2f"; http_uri; nocase; sid:1000004; rev:1;)</code></li>
</ol>
</li>
</ol>
</blockquote>
<h2>Bing Copilot - Prompt 1</h2>
<p>Here's Bing Copilot's output:</p>
<blockquote>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Sure! Here's a Suricata IPS rule that meets your requirements:

&#96;&#96;&#96;yaml
alert http any any -&gt; any any (msg:&quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;../&quot;; nocase; http_uri; sid:1000001; rev:1;)
alert http any any -&gt; any any (msg:&quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;%2e%2e%2f&quot;; nocase; http_uri; sid:1000002; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking directory traversal attempt&quot;; content:&quot;../&quot;; nocase; http_uri; sid:1000003; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking directory traversal attempt&quot;; content:&quot;%2e%2e%2f&quot;; nocase; http_uri; sid:1000004; rev:1;)
&#96;&#96;&#96;

This rule does the following:
1. **Detects incoming connections** containing &#96;../&#96; or &#96;%2e%2e%2f&#96;.
2. **Blocks the connection** if such patterns are detected.
3. **Generates a log** with the message &quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;.

Feel free to adjust the &#96;sid&#96; (Signature ID) and &#96;rev&#96; (Revision) numbers as needed. Let me know if you need any further customization!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<p>Sure! Here’s a Suricata IPS rule that meets your requirements:</p>
<pre><code class="language-yaml"><span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Detected</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">to</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"../";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000001;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Detected</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">to</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"%2e%2e%2f";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000002;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt";</span> <span class="hljs-string">content:"../";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000003;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt";</span> <span class="hljs-string">content:"%2e%2e%2f";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000004;</span> <span class="hljs-string">rev:1;)</span>
</code></pre>
<p>This rule does the following:</p>
<ol>
<li><strong>Detects incoming connections</strong> containing <code>../</code> or <code>%2e%2e%2f</code>.</li>
<li><strong>Blocks the connection</strong> if such patterns are detected.</li>
<li><strong>Generates a log</strong> with the message “Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;”.</li>
</ol>
<p>Feel free to adjust the <code>sid</code> (Signature ID) and <code>rev</code> (Revision) numbers as needed. Let me know if you need any further customization!</p>
</div>
</div>
</div>
</blockquote>
<h2>ChatGPT - Prompt 2</h2>
<p>Now we move onto the second prompt:</p>
<blockquote>
<h3>Steps:</h3>
<ol>
<li>
<p><strong>Understand the context</strong>:</p>
<ul>
<li>We need to detect <strong>specific strings</strong> that might indicate a file inclusion attack.</li>
<li>The rule will look for these strings in the <strong>HTTP request body or URL parameters</strong>.</li>
<li>Suricata will generate a log and block the connection.</li>
</ul>
</li>
<li>
<p><strong>Rule Structure</strong>:</p>
<ul>
<li>Use <strong><code>alert</code></strong> (to generate logs) and <strong><code>drop</code></strong> (to block the connection).</li>
<li>Detect the strings <strong><code>userfile=@/etc/passwd</code></strong> and <strong><code>userfile=@/etc/hosts</code></strong>.</li>
<li>Use the <strong><code>content</code></strong> option for string matching, <strong><code>http_client_body</code></strong> for detecting the attack within the HTTP request, and <strong><code>nocase</code></strong> to make it case-insensitive.</li>
</ul>
</li>
<li>
<p><strong>Example Suricata Rules</strong>:</p>
</li>
<li><code>alert http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/passwd"; http_client_body; nocase; sid:2000001; rev:1;)</code></li>
<li><code>alert http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/hosts"; http_client_body; nocase; sid:2000002; rev:1;)</code></li>
<li><code>drop http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/passwd"; http_client_body; nocase; sid:2000003; rev:1;)</code></li>
<li><code>drop http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/hosts"; http_client_body; nocase; sid:2000004; rev:1;)</code></li>
</ol>
</blockquote>
<h2>Bing Copilot - Prompt 2</h2>
<p>Now we move to Bing Copilot:</p>
<blockquote>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Here's a Suricata IPS rule that meets your requirements:

&#96;&#96;&#96;yaml
alert http any any -&gt; any any (msg:&quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;userfile=@/etc/passwd&quot;; nocase; http_uri; sid:1000005; rev:1;)
alert http any any -&gt; any any (msg:&quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;userfile=@/etc/hosts&quot;; nocase; http_uri; sid:1000006; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking potential SSH credential theft attack&quot;; content:&quot;userfile=@/etc/passwd&quot;; nocase; http_uri; sid:1000007; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking potential SSH credential theft attack&quot;; content:&quot;userfile=@/etc/hosts&quot;; nocase; http_uri; sid:1000008; rev:1;)
&#96;&#96;&#96;

This rule does the following:
1. **Detects incoming connections** containing &quot;userfile=@/etc/passwd&quot; or &quot;userfile=@/etc/hosts&quot;.
2. **Blocks the connection** if such patterns are detected.
3. **Generates a log** with the message &quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;.

Feel free to adjust the &#96;sid&#96; (Signature ID) and &#96;rev&#96; (Revision) numbers as needed. Let me know if you need any further customization!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<p>Here’s a Suricata IPS rule that meets your requirements:</p>
<pre><code class="language-yaml"><span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocked</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">on</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"userfile=@/etc/passwd";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000005;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocked</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">on</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"userfile=@/etc/hosts";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000006;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack";</span> <span class="hljs-string">content:"userfile=@/etc/passwd";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000007;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack";</span> <span class="hljs-string">content:"userfile=@/etc/hosts";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000008;</span> <span class="hljs-string">rev:1;)</span>
</code></pre>
<p>This rule does the following:</p>
<ol>
<li><strong>Detects incoming connections</strong> containing “userfile=@/etc/passwd” or “userfile=@/etc/hosts”.</li>
<li><strong>Blocks the connection</strong> if such patterns are detected.</li>
<li><strong>Generates a log</strong> with the message “Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;”.</li>
</ol>
<p>Feel free to adjust the <code>sid</code> (Signature ID) and <code>rev</code> (Revision) numbers as needed. Let me know if you need any further customization!</p>
</div>
</div>
</div>
</blockquote>
<h2>Comparing and Contrasting:</h2>
<p>There's some interesting tidbits that came out of this:</p>
<ul>
<li>ChatGPT took the longest time between entering the first prompt and generating a response.</li>
<li>ChatGPT's responses provide more information about how Suricata rules operate and how to craft them on your own, making it a better resource for beginner/occassional/intermediate users.</li>
<li>None of the ChatGPT responses provided the full set of protocols supported by Suricata, which means referencing the documentation or creating a prompt specifically about that is required to obtain that information.</li>
<li>Bing Copilot's responses are much more to the point, making them better for experienced users/people under time pressure.</li>
<li>I suspect that using two different prompts in the same session causes some form of response contamination due to improper context cleanup. Both AI seem to default to HTTP being the protocol of choice, which makes sense for the first prompt, but is flat out wrong for the second prompt.*</li>
<li>There is a lingering question about the available data on Suricata for training/Retrieval Augmented Generation. If most publicly accessible data is for HTTP Suricata rules, that might bias the results towards generating HTTP rules.</li>
</ul>
<p>*To be fair, I did not provide either AI with any information regarding the protocol to use for the second prompt. That was intentional, as part of the testing process.</p>
<h2>The Unexpected Roadblock</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06.png" alt="ThriveDX login error screen." width="1920" height="912" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-xs.png 384w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-sm.png 600w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-md.png 768w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-lg.png 1200w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-xl.png 1600w"></figure>
<p>To my lack of surprise, ThriveDX let me down when I needed it, right when a hurricane passed by my part of Florida.</p>
<p>However, OPNsense released a new version with a wide range of updates, so perhaps I can make some progress by redoing the install from scratch...</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 2.0: CLI is a UX Failure</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/</id>
        <media:content url="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" medium="image" />
            <category term="UX/UI"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-08-30T12:00:27-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." />
                    I never intended for there to be a four week gap between the entries in this project, but there's good reason&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" class="type:primaryImage" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." /></p>
                <p>I never intended for there to be a four week gap between the entries in this project, but<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> there's good reason for it.</span></p>
<p>First, I passed my CompTIA Security+ exam about a week and a half after the first entry.</p>
<p>Second, I spent a <strong>lot </strong>of time banging my head against OPNSense/FreeBSD's Command Line Interface, which caused a lot of problems.</p>
<p>Let's get into those.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1i6ihgpmq2k">Problem 1: Ventoy</a></li>
<li><a href="#mcetoc_1i6i0fcoua">Problem 2: Drivers</a></li>
<li><a href="#mcetoc_1i6ihgpmq2l">Problem 3: FreeBSD/OPNsense CLI</a></li>
<li> </li>
<li><a href="#mcetoc_1i711djhs41">Problem 4: Did Anyone Try This on Dual Port Devices?</a></li>
<li><a href="#mcetoc_1i711djhs42">What's Next?</a></li>
</ul>
</div>
<h2 id="mcetoc_1i6ihgpmq2k">Problem 1: Ventoy</h2>
<p>The problem of installing operating systems has long plagued anyone who works with technology.</p>
<p>In the past, you would have to burn a disk image in some format onto a literal disk (a CD-ROM/DVD-ROM/etc...) or a USB drive, typically filling all or most of the storage on that disk. This was fine, because you could just buy a cheap, sub-$10 4-8 gigabyte flash drive.</p>
<p>These days, when the $0-10 flash drive market is dominated by 16+ GB flash drives, burning <strong>one </strong>image to a drive is a ludicrous waste of space, even if Windows ISOs balloon up to 6GB if you include all sorts of plugins and frameworks for productivity tasks.</p>
<p><a href="https://www.ventoy.net/" target="_blank" rel="noopener noreferrer">Ventoy is software</a> that allows your USB drive to host multiple ISOs and gives you a GUI to select which one is booted/installed.</p>
<p>Installing OPNSense requires downloading an image... which is confusingly labelled <code>amd64</code>, even though it's apparently compatible with just about anything. This is just the <strong>first </strong>of <strong>many </strong>usability issues, because most people are more familiar with 64 bit operating systems being labelled <code>x64</code>.</p>
<p>It turns out that Ventoy doesn't like the <code>.img</code> format, so I was looking at a potential massive progression blocker. Luckily, someone reported the latest version of the OPNSense ISO was compatible with the latest version of Ventoy, so I tried to update my USB drive.</p>
<p>It turned out that trying to update via the actual EXE file was impossible, so I had to install an ISO on my Ventoy USB to update my Ventoy USB.</p>
<p>...</p>
<p>Setting that aside, I then had to reboot a computer, disable secure boot on said computer, boot into Ventoy to boot the updater ISO, then reboot the PC to reenable secure boot. Which is an absurd amount of steps to accomplish a simple task, but sadly was the most straight forward part of this whole process.</p>
<h2 id="mcetoc_1i6i0fcoua">Problem 2: Drivers</h2>
<p>For the less tech savvy amongst the audience, drivers are software that take the commands a device receives from the user and translates them into instructions for the hardware. Then they translate the output of the hardware generates into forms other parts of the system and/or the user receive.</p>
<p>Basically, if you don't have drivers for your hardware, or they break for some reason (*cough* Windows 11 rolling back GPU drivers *cough*), things aren't going to end well.</p>
<h2 id="mcetoc_1i6ihgpmq2l"><strong>Problem 3: FreeBSD/OPNsense CLI</strong></h2>
<p>The bane of modern technology is the ancient, antiquated user experience of the command line interface.</p>
<p>Is it incredibly fast and powerful if you know what you're doing? Yes. But if you want a summary of its flaws in the use case of "I need to install drivers to enable internet connectivity", here you go:</p>
<h2 id="mcetoc_1i6ihgpmq2m" style="margin-top: 2.28571rem; font-family: var(--font-base); font-weight: var(--font-weight-bold); letter-spacing: var(--letter-spacing); font-size: 1.60181em;"><figure class="post__image"><img loading="lazy"  style="font-size: inherit; letter-spacing: var(--letter-spacing); color: var(--text-primary-color); font-family: var(--editor-font-family); font-weight: var(--font-weight-normal); outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;" src="https://korgano.github.io/media/posts/20/cli-ux-sucks.png" alt="LinkedIn post by the author explaining usability failures in OPNSense command line shell interface." width="865" height="1005" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-xs.png 384w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-sm.png 600w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-md.png 768w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-lg.png 1200w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-xl.png 1600w"></figure></h2>
<p>It gets even worse from there.</p>
<p>So, after multiple tries and having to reload the Bing Copilot multiple times on my phone, because accessing it via browser causes it to auto-reset if you don't focus on the tab for a certain amount of time, I got it done.</p>
<p>I managed to update the drivers, and I was confronted by this:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb05.jpg" alt="Post-installation instructions from the Intel ethernet driver, telling user what lines to add to various configuration files." width="735" height="889" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-xl.jpg 1600w"></figure>
<p>After all the issues I'd run into up until this point, it should surprise no one that I took this picture. But what I didn't realize was that following these instructions wasn't the best idea. As it turns out, OPNsense doesn't recommend directly editing <code>/etc/loader.conf</code>.</p>
<p>In fact, it gives you a message when you access said file that boils down to "If you want to make changes here, go make a <code>/etc/loader.conf.local</code> file and make those changes there." I missed this initially, due to mental fatigue from everything I'd been through to that point. It took my hard work being wiped by rebooting the miniPC to make me realize there was an issue there.</p>
<p>Once I figured out my issues there, I ran into an issue that I hadn't expected while trying to setup the bridge: the ethernet port numbers were reversed.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." width="1280" height="684" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-xl.jpg 1600w"></figure>
<p>How did I discover this, you might ask?</p>
<p>Well, I was trying to connect to the webGUI via ethernet connection from what I <strong>thought </strong>was <code>re1</code> to a laptop, and nothing I did was working. Initially, I believed it to be the fault of a particularly old, janky looking ethernet cable, but swapping it out for a shorter, but better looking cable didn't solve the problem. I checked the port status for <code>re1</code> via <code>ifconfig</code>, but the status was down, which was confusing, because I could see the activity light on the port flashing like crazy.</p>
<p>After way too much time getting nowhere, I decided to check <code>re0</code>... and saw the status was <strong>up</strong>.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb04.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to re1 ethernet port on the left and arrow pointing to re0 ethernet port on the right." width="1280" height="684" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-xl.jpg 1600w"></figure>
<p>This is apparently a non-infrequent occurrence, and highlights yet another weakness of command line interfaces. A basic GUI that captured and presented network activity would've alerted me to this issue far sooner.</p>
<p>Once I was past this hurdle, I could log into the webGUI and begin configuring the transparent filtering bridge.</p>
<h2 id="mcetoc_1i711djhs41">Problem 4: Did Anyone Try This on Dual Port Devices?</h2>
<p>Following the instructions to initialize the transparent filtering bridge was simple and straightforward, and having set a management IP address on the bridge, I connected it to my router and modem. I got my internet... for a few seconds before the Suricata IPS crashed.</p>
<p>It took me a while to figure out what was going on, but since I had access to the webGUI via ethernet, I could look at the crash dumps and find key phrases. The specific fatal error that came up led me to an OPNSense forum thread that gave me the lead that Suricata might be the culprit.</p>
<p>With that out of the way, I hooked things up back up, and got the transparent filtering bridge back up. Just with a new problem - I couldn't access the webGUI. I had access to the console, because I had the miniPC plugged into a monitor and connected to a wireless mouse and keyboard. But without webGUI access, I couldn't update the OPNSense software - which is a major problem for security, even setting aside the fact that several patches were released between when I downloaded the ISO and when I installed it on the miniPC.</p>
<p>In fact, this seems to be a fairly common issue with OPNSense and transparent filtering bridges:</p>
<ul>
<li><a href="https://forum.opnsense.org/index.php?topic=42645.0" rel="nofollow">https://forum.opnsense.org/index.php?topic=42645.0</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1c8oo2p/comment/l2ve6yl/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1c8oo2p/comment/l2ve6yl/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1f608es/transparent_filtering_bridge_issues/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1f608es/transparent_filtering_bridge_issues/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1c9ic3g/access_transparent_bridge_configuration_from_lan/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1c9ic3g/access_transparent_bridge_configuration_from_lan/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1ckqyjj/reaching_gui_after_placing_opnsense_between/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1ckqyjj/reaching_gui_after_placing_opnsense_between/</a></li>
<li><a href="https://forum.opnsense.org/index.php?topic=40032.0" rel="nofollow">https://forum.opnsense.org/index.php?topic=40032.0</a></li>
</ul>
<p>It turns out that I wasn't the only one who saw the Dave's Garage video that kicked this project off and wanted to setup their own transparent filtering bridge, only to run into the same type of problem.</p>
<p>Unfortunately, this is an impassable roadblock for me, at least at the moment. Attempting to use the miniPC's wireless connection as the management interface is a no-go, for two important reasons:</p>
<ol>
<li>I couldn't connect it to my home network at all, which is why I had to install ethernet drivers off a USB.</li>
<li>For some reason, the command <code>ifconfig [WiFi interface] down</code> completely removed the ability to use the device.</li>
</ol>
<p>That's right, I have a wireless networking device that I <strong>cannot </strong>use because shutting it down apparently wiped the association to the drivers it was using.</p>
<p>FreeBSD/OPNSense is wonderful like that.</p>
<p>Theoretically, adding a third ethernet port via USB <strong>might </strong>solve the problem. The widespread nature of the problem and other people's noted failures with that solution make me hesitate. On one hand, I'm not particularly thrilled to spend more money on this project to solve a problem that is not my fault. On the other, it's at least a general purpose device I can use in other situations if it fails to solve the problem.</p>
<h2 id="mcetoc_1i711djhs42">What's Next?</h2>
<p>Well, having submitted a bug report that will (hopefully) lead to this problem being solved, I'm pivoting focus.</p>
<p>Not to a new project, but to the inevitable next step: making firewall and IPS rules.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 1.0 </title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-10/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-10/</id>
        <media:content url="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-08-05T13:02:47-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." />
                    For the past month and a week, preparation for the CompTIA Security+ exam has taken up a lot of time&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" class="type:primaryImage" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." /></p>
                <p>For the past month and a week, preparation for the CompTIA Security+ exam has taken up a lot of time and mental capacity. Starting a new cybersecurity related project didn't seem appealing unless it was simple, straightforward, and tapped into existing skills.</p>
<p>However, I had such a project in my back pocket, something I'd seen months earlier, but couldn't do at the time: setting up a transparent filtering bridge.</p>
<h2>What's a Transparent Filtering Bridge?</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/dTUvlFfThPw" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>A transparent filtering bridge is a computing device that takes in packets, inspects them, determines if they're safe or not, and then passes the safe ones through.</p>
<p>The transparent part refers to the fact that the network doesn't know that the device is there, requiring no alterations to the network configuration. This is a great benefit, because if something goes wrong, you can simply remove the device from the network entirely and restore the direct modem/router connection (or whatever your previous arrangement was).</p>
<h2>The Network Layout</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/NetworkFilterBridge.drawio.svg" alt="Network diagram with a firewall in between a modem and a network segment featuring a router with multiple devices connected by WiFi, plus a Raspberry PI DNS black hole and a laptop connected by ethernet." width="607" height="471"></figure>
<p>Since I'm implementing this in a mesh network, I'll be connecting to only one of the three routers, which happens to be the one that the Pi-Hole is connected to. And for the same reason - this connects directly to the modem, making it the logical place to handle filtering while maintaining good performance.</p>
<h2>The MiniPC</h2>
<p>Picking the host system for this was interesting. The MiniPC space has exploded in the last few years, thanks to Intel and AMD flooding the market with a wide variety of low power processors that can outperform Raspberry Pis and utilize common desktop/laptop components (SSDs and RAM).</p>
<p>There were a few key requirements for the hardware:</p>
<ol>
<li>At least two (2) RJ45 ethernet ports.</li>
<li>More than 1 Gig ethernet speed.</li>
<li>At least 4 cores/4 threads for the CPU.</li>
<li>Decent/upgradeable RAM - minimum 8GB.</li>
<li>Cost: $200 <strong>maximum</strong>.</li>
</ol>
<p>Of the five requirements, the cost and RAM quantity were the most flexible, for two reasons. First, if the MiniPC design supported upgradable RAM, a low initial quantity could later be replaced as needed. Second, $200 was a soft cap - if there was a particularly good deal in terms of hardware for the price, paying more would make sense.</p>
<p>Also, part of the reason I didn't immediately jump on this project was because Florida has two sales tax holidays for computer hardware - one at the end of July/beginning of August, and one at the beginning of January. By waiting, I would cut 6.5% off of the total price of the hardware.</p>
<p>Everything else was a hard requirement. MiniPCs are <strong>far </strong>less upgradable than normal PCs, due to their compact nature. More of the components are hard soldered to the motherboard, so whatever you buy has to not only <strong>not </strong>bottleneck your network performance, but potentially last 5+ years (or at least until you can get an equally good deal).</p>
<p>So, what did I wind up picking?</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01.jpg" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." width="1920" height="962" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-xl.jpg 1600w"></figure>
<p>In a stroke of great timing, Newegg had a deal on this MiniPC, which was recommended in the Dave's Garage video I posted earlier. It met every single one of my requirements:</p>
<ol>
<li>Two (2) RJ45 ethernet jacks.</li>
<li>2.5 Gig ethernet speed.</li>
<li>4 cores/4 threads on the CPU.</li>
<li><strong>16 </strong>GBs of RAM.</li>
<li>Less than $200.</li>
</ol>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/cyber-proj-tfb02.jpg" alt="BOSGAME MiniPC CPU specs: 4 cores, 4 threads, 3.4GHz max frequency, 6 watt total power draw." width="1272" height="833" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-xl.jpg 1600w"></figure>
<p>Coincidentally, the N100's specs are very similar to the first gaming CPU I ever used to build a PC with - the legendary i5-3570K. The main differences are in node, power draw, and of course, size of the actual chip.</p>
<p>Also, importantly, this is <strong>not </strong>a Raptor Lake chip, so I don't have to worry about the CPU degradation issues that are plaguing those CPUs.</p>
<p>Based on these specs, there are only a few scenarios that I can see where this device needs to be replaced within five years:</p>
<ul>
<li>General failure.</li>
<li>Affordable 2+ GB fiber ethernet comes to my area.</li>
<li>Home routers start shipping with 5 gig ethernet ports as standard.</li>
</ul>
<p>In every other scenario, the routers and internet connection to my home are going to be performance bottlenecks, especially since I ordered a Cat 8 ethernet cable to directly connect this MiniPC to my modem.</p>
<h2>Hands On</h2>
<p>Having received the PC (luckily, before Florida was hit by a hurricane), I can speak to the physical aspects of the device.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075033412.jpg" alt="Size comparison of the BOSGAME MiniPC to a notebook given away at a cybersecurity event." width="1975" height="845" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-xl.jpg 1600w"></figure>
<p>Comparing the size of the box with the common size of gift notebooks from cybersecurity events gives you a ballpark idea of how small the total package is.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075050397.jpg" alt="Bottom of the box details." width="2015" height="1344" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-xl.jpg 1600w"></figure>
<p>The bottom of the box has the manufacturing details, hardware specifications, and on the barcode label, which operating system is installed on the system.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075509820.jpg" alt="The accessories for the BOSGAME MiniPC - the power adapter, a mounting bracket, and an HDMI cable." width="2000" height="1500" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-xl.jpg 1600w"></figure>
<p>The only accessories are the power adapter, a mounting bracket with screws for mounting the MiniPC to the back of a monitor, and an HDMI cable.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075502150.jpg" alt="Bottom of the BOSGAME MiniPC, with instructions on how to enter BIOS or boot options." width="1568" height="1398" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-xl.jpg 1600w"></figure>
<p>One nice quality of life feature is the fact that instructions on how to enter BIOS or the boot options are printed directly onto the bottom of the case. There's also an extra barcode label that confirms what system configuration you have.</p>
<p>The build quality is generally solid, with the minor exception of the front input/output. The plastic of the top cover has some flex there, possibly due to the geometry and requirement for it to be removable for SSD/RAM upgrades. The only other surprise was the presence of a "press this with a paper clip" sized button for resetting the BIOS on the front panel. Quite useful if something goes horribly wrong.</p>
<p>The only attribute of the design I'm somewhat uncertain about is the cooling. Not just whether the cooler is sufficient for peak thermal load if there's a particularly stressful task, but about the thermal interface material (TIM). The TIM is a heat conductive material that allows heat to flow from the chip to the cooler, and if it's a bog standard thermal paste, repeated heating/cooling cycles can lead it to pump out of the gap between the two.</p>
<p>Graphite thermal pads and phase change material are good solutions to this issue, but that would require a full tear down, which would require some extra research that's outside the scope of this project.</p>
<p>With the primary hardware in hand, the only thing left is the CAT 8 ethernet cable, and then the project really get going.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - Statistic Analysis</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/</id>
        <media:content url="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-06-26T13:28:59-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." />
                    It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" class="type:primaryImage" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." /></p>
                <p>It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted packets wasn't providing many real insights, it's time to pivot statistics, courtesy of Wireshark!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1i1b4mninv">Conversations</a></li>
<li><a href="#mcetoc_1i1bau7n34h">Insights</a></li>
<li><a href="#mcetoc_1i1bfsvr76g">Preliminary Takeaways</a></li>
</ul>
</div>
<h2 id="mcetoc_1i1b4mninv">Conversations</h2>
<p>Under the Statistics options in Wireshark, Conversations is the fourth option, but possibly the most useful in terms of network flow analysis. The tool generates a table of the source/destination IPs, the total number of packets exchanged between them, the total bytes exchanged in the conversation, how many packets and bytes were exchanged in a specific direction, the relative start time of the conversation, the duration, and what the connection speed was in a specific direction.</p>
<p>You can export this table to a spreadsheet via copying as a CSV, which I did.</p>
<p>Why? Because if you remember earlier in this project, I generated a list of domains and the IPs associated with them. By copying the conversation data into the spreadsheet, I could then add the domains to those conversations, providing even greater context to my analysis.</p>
<p>This allowed me to see any outliers in the data, which weren't apparent when focusing on specific packet captures.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/18/EGS-capture-conversations.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." width="1919" height="792" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xs.png 384w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-sm.png 600w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-md.png 768w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-lg.png 1200w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xl.png 1600w"></figure>
<h2 id="mcetoc_1i1bau7n34h">Insights</h2>
<p>Here are some interesting highlights from the data:</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 128.8px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 108.787px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.7125px;" width="83">Bits/s B → A</td>
<td style="width: 284.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 128.8px;" width="106">23.40.57.31</td>
<td style="width: 97.7375px;" width="59">9087</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 97.7375px;" width="101">1307</td>
<td style="width: 78.725px;" width="83">333 kB</td>
<td style="width: 97.7375px;" width="98">7780</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 108.787px;" width="83">302.7385</td>
<td style="width: 108.787px;" width="83">399.1212</td>
<td style="width: 77.7125px;" width="83">6680 bits/s</td>
<td style="width: 77.7125px;" width="83">221 kbps</td>
<td style="width: 284.875px;" width="428">e9616.d.akamaiedge.net/static-assets-prod.epicgames.com</td>
</tr>
</tbody>
</table>
<p>For example, we have this connection, which is initially to the domain <code>e9616.d.akamaiedge.net</code>, then executes a client hello that results in a connection to <code>static-assets-prod.epicgames.com</code>. This then results in 11 megabytes of data getting transferred to the EGS Host system. Based on the name of the domain, there's a high probability that this was just a number of images shown in the EGS client, likely thumbnails and banner images.</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 158.825px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 118.787px;" width="83">Rel Start</td>
<td style="width: 101.738px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 312.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 158.825px;" width="106">23.205.165.152</td>
<td style="width: 97.7375px;" width="59">38879</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 97.7375px;" width="101">3108</td>
<td style="width: 78.725px;" width="83">173 kB</td>
<td style="width: 97.7375px;" width="98">35771</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 118.787px;" width="83">306.18383</td>
<td style="width: 101.738px;" width="83">3.983</td>
<td style="width: 77.7125px;" width="83">348 kbps</td>
<td style="width: 77.725px;" width="83">108 Mbps</td>
<td style="width: 312.875px;" width="428">a1859.w27.akamai.net/epicgames-download1.akamaized.net</td>
</tr>
</tbody>
</table>
<p>Next, we have another connection to an Akamai domain that then hands off to an Epic Games server. It is much less clear what this could be, given the encrypted nature of the contents. The small file size, compared to another EGS download, and the fact that I couldn't download anything through the Unreal Engine store leads me to believe that this might just be an EGS client update.</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 95.725px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">146.75.126.33</td>
<td style="width: 97.7375px;" width="59">598444</td>
<td style="width: 78.725px;" width="83">684 MB</td>
<td style="width: 97.7375px;" width="101">149461</td>
<td style="width: 78.725px;" width="83">9 MB</td>
<td style="width: 97.7375px;" width="98">448983</td>
<td style="width: 78.725px;" width="83">675 MB</td>
<td style="width: 128.8px;" width="83">404.441049</td>
<td style="width: 108.787px;" width="83">273.8069</td>
<td style="width: 77.7125px;" width="83">250 kbps</td>
<td style="width: 77.725px;" width="83">19 Mbps</td>
<td style="width: 95.725px;"> </td>
</tr>
</tbody>
</table>
<p>This is an encrypted connection to <code>fastly-download.epicgames.com</code>, which is hosted on an AmazonS3 server. The 9 megabyte upload is highly suspicious, but the 675 megabyte download is <strong>also </strong>suspicious. However, if this was the initial EGS install/update, this might make some amount of sense.</p>
<p>(It does raise the question of why do you need over half a gigabyte of data for what's probably a browser. Even factoring in potential game dependencies like DirectX, C++, and .Net frameworks, it's a bit much.)</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 103.787px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 103.787px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 418.925px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">104.18.50.190</td>
<td style="width: 103.787px;" width="59">2606571</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 97.7375px;" width="101">779871</td>
<td style="width: 78.725px;" width="83">51 MB</td>
<td style="width: 103.787px;" width="98">1826700</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 128.8px;" width="83">620.386146</td>
<td style="width: 108.787px;" width="83">216.3353</td>
<td style="width: 77.7125px;" width="83">1903 kbps</td>
<td style="width: 77.725px;" width="83">102 Mbps</td>
<td style="width: 418.925px;" width="428">cloudflare.epicgamescdn.com.cdn.cloudflare.net</td>
</tr>
</tbody>
</table>
<p>The most suspicious thing about this connection is not that it's moving several gigabytes of data - this is the main connection where Unreal Engine 4.26 was downloaded.</p>
<p>It's the fact that 51 megabytes were sent from <strong>my PC </strong>to the download server that's concerning. There's no logical reason why so much data would need to move from the client to the server.</p>
<p>However, I do have a possible theory.</p>
<p>Remember how there was a 54MB download from <code>epicgames-download1.akamaized.net</code>? That's close enough in size to the mysterious upload to be suspicious.</p>
<p>There's a possibility that the initial 54MB download was some kind of encapsulated authorization token, which was then decapsulated after download and reuploaded to authorize the download from the Unreal Engine store. Why you would do this is a mystery, because there's likely any number of more efficient methods to accomplish this same goal.</p>
<p>There's also a possibility that there was simply a <strong>million </strong>54 byte ACK messages sent by my computer during the process. Unlike most of the other connections, this connection was only HTTP. Which makes sense - if you're going to be pushing tons of files, including many that are already compressed, adding encryption on top is not ideal.</p>
<p>(It does mean that I have nice list of filenames, hashes, and other data for various UE 4.26 components.)</p>
<h2 id="mcetoc_1i1bfsvr76g">Preliminary Takeaways</h2>
<p>With so many of the captured packets being encrypted and lacking a good TLS inspection system to use for another round of packet capture, it's time to put this project to bed.</p>
<p>So, what are my main takeaways?</p>
<ul>
<li>AnyDesk is a good remote desktop solution within the confines of a home network.</li>
<li>VirtualBox's lack of GPU pass through limits its utility as a tool for safely testing certain complex software that requires certain hardware features.</li>
<li>Sandboxie-Plus could be a good method of testing potentially compromised/suspicious software for home labbers, but too many features require a paid license for it to be a great solution.</li>
<li>Epic Games Store/Unreal Engine 4.26 may not behave properly when run in a basic Sandboxie configuration, making testing more difficult.</li>
<li>EGS and Unreal Engine only run a handful of limited processes, so there doesn't appear to be any spyware in them, beyond telemetry that can be disabled via settings menus.</li>
<li>Epic utilizes TLS for many of its internet connections to various servers, which is exemplary for security, but makes analysis of the actual traffic difficult without more advanced tools.</li>
<li>Wireshark's lack of a built-in tool to quickly dump domains and their associated IPs is quite unfortunate, and hurts efforts by end users to help add to community generated domain block lists.</li>
<li>In an investigation where you have a packet capture and no specific starting direction, the Conversations statistics generated by Wireshark can help identify IPs with traffic of interest.</li>
<li>Once you have a list of domains and their associated IPs, run a Wireshark command prompt command to dump all the IPs captured in the packet, then run some kind of script to obtain all relevant IPs and associate them with the domains.</li>
<li>EGS likes using Akamai domains as proxies/hosting for various servers, which does provide a bit of security via obscurity, but also leaves EGS potentially vulnerable to becoming a malware vector if the server is compromised.</li>
<li>EGS winds up uploading a large amount of data while downloading files over long periods of time.</li>
<li>54 byte ACK packets can build up over the duration of the connection and lead up to multi-megabyte totals.</li>
<li>Wireshark's Conversations statistics tool doesn't provide trend data, just overall totals and averages, which can be a bit misleading at first glance.</li>
</ul>
<p>Now that this project's wrapped up, I'll be spending time on shorter cybersecurity topics while I prepare for the CompTIA Security+ exam. So keep an eye out for a wild range of topics in the near future!</p>
            ]]>
        </content>
    </entry>
</feed>
