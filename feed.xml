<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>XS Tech Thoughts</title>
    <link href="https://korgano.github.io/feed.xml" rel="self" />
    <link href="https://korgano.github.io" />
    <updated>2025-08-06T11:38:40-04:00</updated>
    <author>
        <name>Xavier Santana</name>
    </author>
    <id>https://korgano.github.io</id>

    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 10.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-100/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-100/</id>
        <media:content url="https://korgano.github.io/media/posts/45/cyber-proj-tfb29-2.png" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2025-08-04T13:10:36-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/45/cyber-proj-tfb29-2.png" alt="OPNSense log entries involving 195.3.223.82 on August 2, 2025." />
                    After getting the Transparent Filtering Bridge mostly functional in OPNSense 25.1.8 and 25.1.12, I had the pleasure of dealing with&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/45/cyber-proj-tfb29-2.png" class="type:primaryImage" alt="OPNSense log entries involving 195.3.223.82 on August 2, 2025." /></p>
                <p>After getting the Transparent Filtering Bridge mostly functional in OPNSense 25.1.8 and 25.1.12, I had the pleasure of dealing with a major version update to 25.7.</p>
<p>Major software version changes always bring new challenges, but they also bring opportunities for learning... and pivoting in new directions.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1j1t8j4805h">The WiFi Update</a></li>
<li><a href="#mcetoc_1j1t8j4805i">Reworking the Alias List</a></li>
<li><a href="#mcetoc_1j1t8j4805j">Improving the Rules List</a></li>
<li><a href="#mcetoc_1j200dds7dp">Suricata Detections</a>
<ul>
<li><a href="#mcetoc_1j200dds7dq">Description</a></li>
</ul>
</li>
<li><a href="#mcetoc_1j200dds7dr">Next Steps</a></li>
</ul>
</div>
<h2 id="mcetoc_1j1t8j4805h">The WiFi Update</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb23.jpg" alt="OPNSense shell showing loss of WiFi connectivity." width="1988" height="1175" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb23-xs.jpg 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb23-sm.jpg 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb23-md.jpg 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb23-lg.jpg 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb23-xl.jpg 1600w"></figure>
<p>WiFi connectivity issues have been a staple of this project, so it was no real surprise that the update completely undid my custom configuration. Annoyingly, OPNSense had retained network connectivity after the update and for about an hour later. Then I had zero network connectivity to the miniPC after that point, forcing me to use the OPNSense shell to correct this.</p>
<p>However, running my <code>setup_wpa</code> script resulted in a <strong>new</strong> error:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb24.jpg" alt="Result of running initial wpa_supplicant setup script on OPNSense 25.7." width="2000" height="1314" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb24-xs.jpg 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb24-sm.jpg 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb24-md.jpg 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb24-lg.jpg 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb24-xl.jpg 1600w"></figure>
<p>Inputting the error into ChatGPT to revise the initial revision of the script produced the following result:</p>
<pre class="language-markdown line-numbers"><code>#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan0"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
#

. /etc/rc.subr          # import rc_* functions
. /etc/network.subr     # import network helper functions

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

# load overrides from rc.conf, set defaults
load_rc_config $name

: ${wpa_supplicant_enable:="YES"}           # YES to start at boot
: ${wpa_supplicant_iface:="iwlwifi0_wlan0"} # logical WLAN interface
: ${wpa_supplicant_driver:="bsd"}          # driver backend
: ${wpa_supplicant_conf:="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"}

# path to the wpa_supplicant binary
command="/usr/sbin/wpa_supplicant"

# pidfile lives under /var/run/&lt;name&gt;.&lt;iface&gt;.pid
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"
logfile="/var/log/wpa_supplicant.log"

# arguments to wpa_supplicant, add debug flags (-dd) for verbose logging
command_args="-dd -B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile} \
    2&gt;&amp;1 | tee -a ${logfile}"

# override default actions
start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

log() {
    echo "$(date '+%F %T') [${name}] $*"
}

#
# start: load driver, create interface, bring it up, then start daemon
#
wpa_supplicant_start()
{
    log "Starting wpa_supplicant service"
    
    # 1) Load the iwlwifi kernel module if not already present
    if ! kldstat -n if_iwlwifi &gt; /dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi \
            || err 1 "Unable to load if_iwlwifi kernel module"
    fi

    # 2) Create the wlan interface if missing
    log "Ensuring interface ${wpa_supplicant_iface} exists"
    if ! ifconfig ${wpa_supplicant_iface} &gt; /dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface}"
    fi

    # 3) Bring the wireless interface up
    log "Bringing up ${wpa_supplicant_iface}"
    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface}"

    # 4) Handle stale ctrl_iface socket
    ctrl_dir="/var/run/wpa_supplicant"
    sock="${ctrl_dir}/${wpa_supplicant_iface}"
    if [ -e "${sock}" ]; then
        log "Found existing ctrl_iface socket ${sock}"
        if [ -f "${pidfile}" ] &amp;&amp; kill -0 "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1; then
            log "wpa_supplicant already running PID: $(cat ${pidfile})"
            return 0
        else
            log "Removing stale socket ${sock}"
            rm -f "${sock}" || err 1 "Failed to remove stale socket"
        fi
    fi

    # 5) Start wpa_supplicant
    log "Launching wpa_supplicant"
    eval ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start"

    # 6) Wait for pidfile
    log "Waiting for PID file ${pidfile}"
    for _ in $(seq 1 10); do
        [ -f "${pidfile}" ] &amp;&amp; break
        sleep 0.2
    done
    [ -f "${pidfile}" ] || err 1 "PID file not created"
    log "wpa_supplicant started PID: $(cat ${pidfile})"
}

#
# status: check the pidfile to see if wpa_supplicant is running
#
wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

#
# stop: terminate the daemon and clean up the pidfile
#
wpa_supplicant_stop()
{
    log "Stopping wpa_supplicant service"
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant PID: $(cat ${pidfile})"
        rm -f "${pidfile}"
        log "Removed PID file"
    else
        err 1 "PID file not found, is wpa_supplicant running?"
    fi
}

run_rc_command "$1"</code></pre>
<p>The revised code added a new block to handle the interface's socket and a new dedicated log file, useful for troubleshooting. The result?</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb25.jpg" alt="Revised wpa_supplicant script reenabling the WiFi connection on the miniPC." width="4000" height="3000" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb25-xs.jpg 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb25-sm.jpg 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb25-md.jpg 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb25-lg.jpg 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb25-xl.jpg 1600w"></figure>
<p>In a massive surprise, this revised script <strong>seems </strong>to have solved the recurring, persistent loss of connection over time. The original version of the script got around three hours of connection time before issues would appear. Now the webGUI is accessible at just about anytime within the four hour window before the WiFi interface is rebooted, which is pretty close to the five 9s standard of accessibility (99.999% uptime).</p>
<p>It's not entirely clear why this is the case. Presumably, there's some sort of code interaction going on between the revised <code>iwlwifi</code> driver and other parts of the FreeBSD OS that wasn't there in the OPNSense 25.1 OSes. This broke compatibility with the initial version of the script, but also possibly surfaced an issue that may have been present on those versions.</p>
<h2 id="mcetoc_1j1t8j4805i">Reworking the Alias List</h2>
<p>Since the examination of data from the week and a half stretch revealed that the existing alias lists weren't very useful, I decided to look up more effective lists.</p>
<p>Doing a bit of light research on r/OPNSense for more blocklists led me to <a href="https://www.reddit.com/r/opnsense/comments/1j7a8bv/spamhaus_pbl_list_or_alternatives/" title="Spamhaus PBL list or alternatives ?" target="_blank" rel="noopener noreferrer">this post</a>, which in turn led to a <a href="https://github.com/firehol/blocklist-ipsets#list-of-ipsets-included" title="firehol / blocklist-ipsets" target="_blank" rel="noopener noreferrer">Github repository full of IP blocklists</a>. A number of these were not accessible as files for OPNSense to download, so that narrowed down the total number a fair bit.</p>
<p>Of the various lists available for OPNSense to download, most came with 1 day/7 day/30 day variants. With the various monitoring periods comes a highly variable amount of IPs in each blocklist. Unsurprisingly, the longer periods have a longer list, but are less "fresh", even with update cadences that are in the 10s of minutes.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb26.png" alt="Updated Alias selection for better malicious IP blocking." width="1600" height="809" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb26-xs.png 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb26-sm.png 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb26-md.png 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb26-lg.png 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb26-xl.png 1600w"></figure>
<p>These new alias lists push the total number of blocked IPs to 15% of the supported total. Based on my observations, the typical RAM use of the miniPC is at around 10-11%, so there's plenty of room for expansion, although it would probably be best to max out at 50% RAM utilization. That would provide a decent amount of head room for a sudden utilization spike, while also allowing for an absurd amount of IPs being blocked.</p>
<h2 id="mcetoc_1j1t8j4805j">Improving the Rules List</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb27.png" alt="Updated OPNSense rule list for blocking incoming connections." width="1590" height="792" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb27-xs.png 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb27-sm.png 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb27-md.png 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb27-lg.png 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb27-xl.png 1600w"></figure>
<p>Improving the Rules List was a natural next step. The <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-92/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.2" target="_blank" rel="noopener noreferrer">log data analysis</a> from before the OPNSense 25.7 was complicated a bit by the fact that the vast majority of blocking was done by a default rule I couldn't identify. Simply examining one noted spike in traffic was an exercise in trying to find a needle of interest in a haystack of benign (if unnecessary) traffic.</p>
<p>With the new Alias lists, I set up a number of new rules to block incoming and outgoing traffic. With 29 manually defined rules, plus the 13 auto generated rules, this should provide me with enough granularity to block potential threats before they hit the default rules.</p>
<p>Unfortunately, with the variable size of each Alias list, there's a possibility that one or two lists will dominate the reports, especially with the unoptimized order of this rule list.</p>
<h2 id="mcetoc_1j200dds7dp">Suricata Detections</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb28.png" alt="Suricata detection of TFTP GET request for passwd files." width="1920" height="918" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb28-xs.png 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb28-sm.png 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb28-md.png 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb28-lg.png 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb28-xl.png 1600w"></figure>
<p>Out of curiosity, I checked the Suricata alerts. This time, I found an interesting one, a TFTP attempt to grab <code>passwd</code> files.</p>
<p><a href="https://www.fortiguard.com/encyclopedia/ips/13066" title="Fortiguard Labs | Intrusion Prevention | TFTP.GET.Passwd" target="_blank" rel="noopener noreferrer">Fortiguard Labs has a good explanation of this attack</a>:</p>
<blockquote>
<p id="mcetoc_1j200dds7dq"><strong>Description</strong></p>
<p>It indicates an attempt to access the password file on a host running the Trivial File Transfer Protocol (TFTP) service.</p>
<p>There is a long-known security hole in TFTP that allows any unauthenticated user to read any readable files and to write any writable files on a remote system. Attackers can take advantage of this to get sensitive password information.</p>
</blockquote>
<p>It's somewhat annoying that the ISP doesn't block TFTP on sheer principle, since it's an insecure protocol that most non-commercial customers will never use.</p>
<p>However, since Suricata dropped the traffic, no harm was done.</p>
<p><a href="https://www.virustotal.com/gui/ip-address/195.3.223.82" title="VirusTotal detections for 195.3.223.82." target="_blank" rel="noopener noreferrer">VirusTotal</a> does have detections associated with this IP (195.3.223.82):</p>
<blockquote>
<p><strong>Automatically downvoted:</strong> This IP raised <strong>1</strong> <em>Successful administrator privilege gain</em> alerts on our side.</p>
</blockquote>
<p>This was reported 48 hours prior to my accessing of the VirusTotal page.</p>
<p>The most interesting thing about this detection is that it happened at the beginning of the month. The <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-90/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.0" target="_blank" rel="noopener noreferrer">NTP DOS scan my network encountered</a> was at the end of June/beginning of July. It may be a coincidence, but it could also be one of a few things:</p>
<ul>
<li>Preference to scan for harvestable credentials at the start of some month.</li>
<li>A more long term credential harvesting scan that is just cycling through to my IP range at the start of August.</li>
<li>Some sort of detection on the attacker's end triggering an attempt to harvest credentials.</li>
</ul>
<p>Unfortunately, due to an OPNSense bug, I couldn't download the logs with that IP address, but I could take a screencap of the time window of the detection:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/45/cyber-proj-tfb29.png" alt="OPNSense log entries involving 195.3.223.82 on August 2, 2025." width="1586" height="776" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb29-xs.png 384w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb29-sm.png 600w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb29-md.png 768w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb29-lg.png 1200w ,https://korgano.github.io/media/posts/45/responsive/cyber-proj-tfb29-xl.png 1600w"></figure>
<p>Interestingly, the TFTP credential harvesting attempt seemed to be part of a broader sweep/scan for any vulnerabilities. A majority of the entries were focused on DNS, suggesting a possible DNS poisoning/manipulation attempt.</p>
<p>Unfortunately, it's not possible to associate the Suricata alert with a specific policy, so it's hard to pinpoint why this one specific blocked connection was flagged.</p>
<h2 id="mcetoc_1j200dds7dr">Next Steps</h2>
<p>The next steps are pretty simple. Collect more data, make sure everything keeps running smoothly.</p>
<p>Normally, I do a bit more than that, but I have a tech project coming up that dovetails neatly into this one...</p>
<p>I'll be setting up a new AI focused miniPC and doing comparative tests of local AI versus ChatGPT regarding log analysis.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.2</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-92/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-92/</id>
        <media:content url="https://korgano.github.io/media/posts/44/cyber-proj-tfb22-2.png" medium="image" />
            <category term="Tech Projects"/>
            <category term="Tech"/>
            <category term="AI"/>

        <updated>2025-07-22T10:13:23-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/44/cyber-proj-tfb22-2.png" alt="Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex loaded in LM Studio." />
                    In article 9.0, we got a log dump of ~1.5 weeks worth of blocked connections through the Transparent Filtering Bridge.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/44/cyber-proj-tfb22-2.png" class="type:primaryImage" alt="Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex loaded in LM Studio." /></p>
                <p>In <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-90/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.0" target="_blank" rel="noopener noreferrer">article 9.0</a>, we got a log dump of ~1.5 weeks worth of blocked connections through the Transparent Filtering Bridge. Today, we're going to analyze that log with the help of ChatGPT, but first, we're going to do some more tests of Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex from <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-91/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.2" target="_blank" rel="noopener noreferrer">article 9.1</a>.</p>
<p> </p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1j0p7pbij23f">Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex for PowerShell</a></li>
<li><a href="#mcetoc_1j0rt0igd30">Data Analysis Prompting</a></li>
<li><a href="#mcetoc_1j0rt0igd31">Examining the Findings</a></li>
</ul>
</div>
<h2 id="mcetoc_1j0p7pbij23f">Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex for PowerShell</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/44/cyber-proj-tfb22.png" alt="Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex loaded in LM Studio." width="1920" height="1033" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb22-xs.png 384w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb22-sm.png 600w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb22-md.png 768w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb22-lg.png 1200w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb22-xl.png 1600w"></figure>
<p>In our previous test of this model, it proved absolutely incapable of generating code anywhere near ChatGPT or Copilot's level. At best, when tasked with updating a script, it doesn't do a great job of figuring how to improve the code.</p>
<p>But how does it do when it's just given an objective?</p>
<p>Well, I gave the model these prompts from article 9.0.</p>
<p>Prompt 1:</p>
<blockquote>
<p>Write me a powershell script that does the following:<br>-reads content of file `filter.log`<br>-reads lines of the following format `2025-06-25T11:06:30-04:00 Informational filterlog 68,,,ff197ebab7ec0da7fe008f0f6ffee42b,bridge0,match,block,out,4,0x0,,127,21852,0,DF,6,tcp,52,Home IP,1.1.1.1,21124,443,0,S,2052234833,,64240,,mss;nop;wscale;nop;nop;sackOK`<br>-counts unique and duplicate IPv4 addresses<br>-identifies unique IPv4 addresses<br>-outputs unique IPv4 address count, duplicate IPv4 address count, and all unique IPv4 addresses to new file `filter-cleaned.log`</p>
</blockquote>
<p>Prompt 2:</p>
<blockquote>
<p>Write me a powershell script that does the following:<br>-reads content of file `filter.log`<br>-reads lines of the following format `2025-06-25T11:06:30-04:00 Informational filterlog 68,,,ff197ebab7ec0da7fe008f0f6ffee42b,bridge0,match,block,out,4,0x0,,127,21852,0,DF,6,tcp,52,Home IP,1.1.1.1,21124,443,0,S,2052234833,,64240,,mss;nop;wscale;nop;nop;sackOK`<br>-counts the number of `in` and `out` entries<br>-generates a count of how many times unique IPv4 addresses appear in the log<br>-Generates a list of how many unique IPv4 addresses are associated with `in` or `out` entries, or both -outputs all data to new file `filter-statistics.log`</p>
</blockquote>
<p>So here's what it produced for prompt 1:</p>
<pre class="language-ini line-numbers"><code># Read the input file
$InputFile = "filter.log"
$Lines = Get-TextFile($InputFile)

# Initialize data structures for unique IP addresses and frequency counts
uniqueIPs = @()
duplicateIPs = @()

# Process each line to extract relevant information
foreach ($Line in $Lines)
{
    # Split the line into fields using commas
    $Fields = $Line.Split(",")

    if ($Field.Count -eq 1) {
        continue
    }

    # Extract the "mss" field and convert it to a string
    $IPs = $Fields[2]

    # Convert the IP address to a string for filtering
    $IP = "$($IPs.ToString())"

    # Add the unique IP address and frequency count
    if ($uniqueIPs.ContainsKey($IP))
        $duplicateIPs.Add((New-Entry -Key=$IP, Count=1)
    else
        $uniqueIPs[$IP] = 0

    # Add the duplicate counts to a separate list
    if (DuplicateIPs.ContainsKey($IP)) {
        DuplicateIPs[$IP] += 1
    } else
        DuplicateIPs[$IP] = 1
}

# Write results to new file
$NewFile = "filter-cleaned-qwen.log"
Output-Text("Unique IP Addresses Count:", UniqueIPs.Count)
Output-Text("Duplicate IP Count: ", DuplicateIPs.Keys.Count)
Output-Text("Total Unique IPs: ", UniqueIPs.Keys.Count, " | Duplicates: ", DuplicateIPs.Keys.Count)
Output-Text("Unique IPs: ", UniqueIPs.Keys, " with duplicates: ", DuplicateIPs.Keys, "\n")

# Write the results to the new file
foreach ($key in UniqueIPs.Keys)
{
    Output-Text("$key (Unique): Count: $DuplicateIPs[$key] | Total: $UniqueIPs[$key]\n")
}</code></pre>
<p>Just looking at the code, one <strong>massive </strong>red flag is the fact that it isn't trying to pattern match the IPv4 structure. Instead, it seems to be trying to extract the content from the CSV part of the log entry, and I'm not sure it even picked the right portion.</p>
<p>Tossing it into DiffChecker with the code I generated from ChatGPT revealed something astounding - <strong>18 lines </strong>worth of extra code in this script. Most of it seems related to sorting and writing values, but it shows a great deal of inefficiency in the code.</p>
<p>I had no great expectations when I tried running the code, but it errored out and produced no output, so I can conclusively say that a sub-1B parameter model is likely to be absolute garbage when it comes to coding.</p>
<h2 id="mcetoc_1j0rt0igd30">Data Analysis Prompting</h2>
<p>As I have pointed out in <a href="https://korgano.github.io/quick-cyber-thoughts-ai-coding-security/" title="Quick Cyber Thoughts: AI Coding Security" target="_blank" rel="noopener noreferrer">previous articles</a>, anything related to AI is only as good as the system and user prompts. LLMs are very much Garbage In, Garbage Out machines, with the possibility of rapid iteration to get you from garbage to usable content.</p>
<p>To design this prompt, I will use the MOSCOW method, where I explicitly call out Must Have, Should Have, Could Have, and Won't Have features of this prompt:</p>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 24.9715%;">Must Have</td>
<td style="width: 24.9715%;">Should Have</td>
<td style="width: 24.9715%;">Could Have</td>
<td style="width: 24.9715%;">Won't Have</td>
</tr>
<tr>
<td style="width: 24.9715%;">
<ul>
<li>Plain English explanations of the findings.</li>
<li>Command explicitly barring conclusions with no supporting facts in the data.</li>
<li>An easy to read/parse data format.</li>
</ul>
</td>
<td style="width: 24.9715%;">
<ul>
<li>Some number of validation steps for all conclusions.</li>
<li>IP addresses, ports, protocols, times, and quantity data.</li>
<li>Highlighting patterns in the data.</li>
<li>Be written in Markdown.</li>
</ul>
</td>
<td style="width: 24.9715%;">
<ul>
<li>Recommendations on IPs to examine further.</li>
</ul>
</td>
<td style="width: 24.9715%;">
<ul>
<li>Conjecture.</li>
<li>LLM flattery.</li>
<li>Analysis based on outside data.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p>Here's the prompt I created:</p>
<pre class="language-markdown line-numbers"><code>Analyze the uploaded pfsense style log. Follow these directives in your analysis:

- Run all analysis operations 3 times to validate findings.
- Do NOT produce results that have not been validated.
- Do NOT produce results based on data from outside the log.
- Do NOT produce results that are not based on data in the log.
- Ensure all results are written in plain English.
- Associate IP addresses and Ports in the following format: [IP Address]:[Port]
- Explain any and all recommendations for IPs to examine further.

Highlight patterns in the data, including times and frequency of connections.</code></pre>
<p>Here's <a href="https://chatgpt.com/share/6880e805-e130-800f-a8ce-736696ef8a7b" title="ChatGPT Analysis of Transparent Filtering Bridge Blocking Log" target="_blank" rel="noopener noreferrer">the conversation with ChatGPT</a>, which shows some fascinating behavior as it iterates its way into coming up with a Python script to do the data analysis.</p>
<p>To validate that the data is <strong>not </strong>hallucinated, I opened the log file in VS Code and searched for the dates and IP addresses. I found that the quantities of log entries were correct, and that the IP addresses associated with the ports <strong>did </strong>exist... But the script mistakenly associated the port number in the column immediately after the destination IP with that IP.</p>
<p>It is somewhat curious that it decided that 5 was an appropriate number of entries for each list, but this is something that could be expanded on in a revision of the prompt.</p>
<h2 id="mcetoc_1j0rt0igd31">Examining the Findings</h2>
<p>The findings were as follows:</p>
<blockquote>
<ul>
<li data-start="245" data-end="533">
<p data-start="247" data-end="310">The five busiest minutes (timestamp at minute precision) are:</p>
<ul data-start="313" data-end="533">
<li data-start="313" data-end="347">
<p data-start="315" data-end="347">2025‑07‑15 09:04 — 232 entries</p>
</li>
<li data-start="350" data-end="384">
<p data-start="352" data-end="384">2025‑06‑17 09:59 — 189 entries</p>
</li>
<li data-start="387" data-end="421">
<p data-start="389" data-end="421">2025‑07‑03 19:09 — 132 entries</p>
</li>
<li data-start="424" data-end="458">
<p data-start="426" data-end="458">2025‑06‑17 09:58 — 125 entries</p>
</li>
<li data-start="461" data-end="533">
<p data-start="463" data-end="533">2025‑06‑28 16:40 — 122 entries <button class="ms-1 flex h-[22px] items-center rounded-xl px-2 relative bottom-[-2px] bg-[#f4f4f4] text-token-text-secondary! hover:bg-token-bg-secondary dark:bg-token-main-surface-secondary dark:hover:bg-token-bg-secondary"><svg width="20" height="20" viewbox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg" alt="File" class="h-[16px] w-[16px] object-contain"><path fill-rule="evenodd" clip-rule="evenodd" d="M11.2598 2.25191C11.8396 2.25191 12.2381 2.24808 12.6201 2.33981L12.8594 2.40719C13.0957 2.48399 13.3228 2.5886 13.5352 2.71871L13.6582 2.79879C13.9416 2.99641 14.1998 3.25938 14.5586 3.61813L15.5488 4.60836L15.833 4.89449C16.0955 5.16136 16.2943 5.38072 16.4482 5.6318L16.5703 5.84957C16.6829 6.07074 16.7691 6.30495 16.8271 6.54684L16.8574 6.69137C16.918 7.0314 16.915 7.39998 16.915 7.90719V13.0839C16.915 13.7728 16.9157 14.3301 16.8789 14.7802C16.8461 15.1808 16.781 15.5417 16.6367 15.8779L16.5703 16.0205C16.3049 16.5413 15.9008 16.9772 15.4053 17.2812L15.1865 17.4033C14.8099 17.5951 14.4041 17.6745 13.9463 17.7119C13.4961 17.7487 12.9391 17.749 12.25 17.749H7.75C7.06092 17.749 6.50395 17.7487 6.05371 17.7119C5.65317 17.6791 5.29227 17.6148 4.95606 17.4707L4.81348 17.4033C4.29235 17.1378 3.85586 16.7341 3.55176 16.2382L3.42969 16.0205C3.23787 15.6439 3.15854 15.2379 3.12109 14.7802C3.08432 14.3301 3.08496 13.7728 3.08496 13.0839V6.91695C3.08496 6.228 3.08433 5.67086 3.12109 5.22066C3.1585 4.76296 3.23797 4.35698 3.42969 3.98043C3.73311 3.38494 4.218 2.90008 4.81348 2.59664C5.19009 2.40484 5.59593 2.32546 6.05371 2.28805C6.50395 2.25126 7.06091 2.25191 7.75 2.25191H11.2598ZM7.75 3.58199C7.03896 3.58199 6.54563 3.58288 6.16211 3.61422C5.78642 3.64492 5.575 3.70168 5.41699 3.78219C5.0718 3.95811 4.79114 4.23874 4.61524 4.58395C4.53479 4.74193 4.47795 4.95354 4.44727 5.32906C4.41595 5.71254 4.41504 6.20609 4.41504 6.91695V13.0839C4.41504 13.7947 4.41594 14.2884 4.44727 14.6718C4.47798 15.0472 4.53477 15.259 4.61524 15.417L4.68555 15.5429C4.86186 15.8304 5.11487 16.0648 5.41699 16.2187L5.54688 16.2744C5.69065 16.3258 5.88016 16.3636 6.16211 16.3867C6.54563 16.418 7.03898 16.4189 7.75 16.4189H12.25C12.961 16.4189 13.4544 16.418 13.8379 16.3867C14.2135 16.356 14.425 16.2992 14.583 16.2187L14.709 16.1474C14.9963 15.9712 15.2308 15.7189 15.3848 15.417L15.4414 15.2861C15.4927 15.1425 15.5297 14.953 15.5527 14.6718C15.5841 14.2884 15.585 13.7947 15.585 13.0839V8.55758L13.3506 8.30953C12.2572 8.18804 11.3976 7.31827 11.2881 6.22359L11.0234 3.58199H7.75ZM12.6113 6.09176C12.6584 6.56193 13.0275 6.93498 13.4971 6.98727L15.5762 7.21871C15.5727 7.13752 15.5686 7.07109 15.5615 7.01266L15.5342 6.85738C15.5005 6.7171 15.4501 6.58135 15.3848 6.45309L15.3145 6.32711C15.2625 6.24233 15.1995 6.16135 15.0928 6.04488L14.6084 5.54879L13.6182 4.55856C13.2769 4.21733 13.1049 4.04904 12.9688 3.94234L12.8398 3.8525C12.7167 3.77705 12.5853 3.71637 12.4482 3.67184L12.3672 3.6484L12.6113 6.09176Z"></path></svg></button></p>
</li>
</ul>
</li>
<li data-start="534" data-end="863">
<p data-start="536" data-end="611">The top five most frequently seen IP:Port pairs (across all entries) are:</p>
<ul data-start="614" data-end="863">
<li data-start="614" data-end="654">
<p data-start="616" data-end="654"><a href="https://www.virustotal.com/gui/ip-address/13.107.253.41" title="VirusTotal result for 13.107.253.41" target="_blank" rel="noopener noreferrer">13.107.253.41</a>:55731 — 19 occurrences</p>
</li>
<li data-start="657" data-end="697">
<p data-start="659" data-end="697"><a href="https://www.virustotal.com/gui/ip-address/34.107.243.93" title="VirusTotal result for 34.107.243.93" target="_blank" rel="noopener noreferrer">34.107.243.93</a>:60753 — 18 occurrences</p>
</li>
<li data-start="700" data-end="740">
<p data-start="702" data-end="740"><a href="https://www.virustotal.com/gui/ip-address/54.84.219.196" title="VirusTotal result for 54.84.219.196" target="_blank" rel="noopener noreferrer">54.84.219.196</a>:52647 — 18 occurrences</p>
</li>
<li data-start="743" data-end="783">
<p data-start="745" data-end="783"><a href="https://www.virustotal.com/gui/ip-address/3.218.230.195" title="VirusTotal result for 3.218.230.195" target="_blank" rel="noopener noreferrer">3.218.230.195</a>:57497 — 18 occurrences</p>
</li>
<li data-start="786" data-end="863">
<p data-start="788" data-end="863"><a href="https://www.virustotal.com/gui/ip-address/44.215.87.86" title="VirusTotal result for 44.215.87.86" target="_blank" rel="noopener noreferrer">44.215.87.86</a>:59136 — 18 occurrences</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>Of the five IP addresses it highlighted, 4 were considered to be benign by both VirusTotal vendor analysis and the community. <code>34.107.243.93</code> was considered benign by vendors, but members of the community flagged it as potentially malicious. It might also be associated with Mozilla Firefox and the <code>push.services.mozilla.com</code> domain.</p>
<p>Unfortunately, there's not much to glean from the rule that's blocking all these IPs:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/44/cyber-proj-tfb16.png" alt="OPNSense rule list containing Rule 2." width="1920" height="921" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb16-xs.png 384w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb16-sm.png 600w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb16-md.png 768w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb16-lg.png 1200w ,https://korgano.github.io/media/posts/44/responsive/cyber-proj-tfb16-xl.png 1600w"></figure>
<p>This is one of OPNsense's automatically generated rules rules, but there is no way for me to figure out which one it is, because I can't open the actual rules at the bridge interface GUI. I would have to dig around for log entries and <strong>maybe </strong>find enough information there to decipher which rule is being applied.</p>
<p>Unfortunately, it seems the same rule applied to the 2025‑07‑15 09:04 time window.</p>
<p>Checking the IP addresses, I started at the top - so chronologically last in that time window, with <a href="https://www.virustotal.com/gui/ip-address/67.195.176.151" title="VirusTotal result for 67.195.176.151." target="_blank" rel="noopener noreferrer">67.195.176.151</a>. Coming in at 63 of 232 entries, this is all traffic on port 993, secure IMAP, so it's related to e-mail. It is not particularly clear why I got so much mail traffic on that day, even looking at my e-mail inboxes.</p>
<p>Next up is <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/3.229.151.51/detection" title="VirusTotal details on 3.229.151.51." target="_blank" rel="noopener noreferrer">3.229.151.51</a>, which is an HTTPS connection to an Amazon IP address, which could be just about anything.</span></p>
<p><a href="https://www.virustotal.com/gui/ip-address/3.223.181.245/community" title="VirusTotal page on 3.223.181.245." target="_blank" rel="noopener noreferrer">3.223.181.245</a> is another Amazon IP address, but this might be an IP that does scans of people's systems.</p>
<p>Coming in at 46 entries, <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/38.34.185.21" title="VirusTotal result for 38.34.185.21." target="_blank" rel="noopener noreferrer">38.34.185.21</a> is somewhat interesting, since it is associated with a VPN, a Japanese IP range, and has at least one Suspicious analysis on VirusTotal. This could just be a VPN connection to get around a region lock though.</span></p>
<p><a href="https://www.virustotal.com/gui/ip-address/34.249.225.129" title="VirusTotal result for 34.249.225.129." target="_blank" rel="noopener noreferrer">34.249.225.129</a> is yet another Amazon IP, but this one is not only from Ireland, but has a MalwareURL analysis saying it is Malware. The last analysis was done 3 days ago, but with no indication of which analysis was done, it is hard to tell if this was a compromised IP in the past or is currently compromised.</p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/24.49.122.85" title="VirusTotal result for 24.49.122.85." target="_blank" rel="noopener noreferrer">24.49.122.85</a> is a mildly interesting, because it's an incredibly non-descript IP address. Even looking at the WHOIS information revealed very little. Google's own search AI Mode purports that it is a <strong>Google </strong>IP address:</span></p>
<blockquote>
<p>The IP address "24.49.122.85" belongs to the public IP address range. It is associated with Google LLC, located in Mountain View, California. More specifically, it is identified as a search engine spider or a component within Google's infrastructure.</p>
<p>-Google AI Mode:12:43 PM, 7/23/2025</p>
</blockquote>
<p>With 16 entries, <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/172.183.7.193" title="VirusTotal result for 172.183.7.193." target="_blank" rel="noopener noreferrer">172.183.7.193</a> is a Microsoft server of some sort. Bizarrely, despite this being the kind of thing that would logically be expected to be blocked by a tracking rule, it was caught by rule 2. Examining the <a href="https://www.whois.com/whois/172.183.7.193" title="WHOIS report on 172.183.7.193." target="_blank" rel="noopener noreferrer">WHOIS information on this IP</a> reveals that it is for "Microsoft Routing, Peering, and DNS".</span></p>
<p>Next up are a pair of solo Akamai IP addresses, <a href="https://www.virustotal.com/gui/ip-address/184.84.138.181" title="VirusTotal result for 184.84.138.181." target="_blank" rel="noopener noreferrer">184.84.138.181</a> and <a href="https://www.virustotal.com/gui/ip-address/184.84.136.40" title="VirusTotal result for 184.84.136.40." target="_blank" rel="noopener noreferrer">184.84.136.40</a>. WHOIS look up revealed nothing of real value, and neither address has any real analysis on VirusTotal, which is slightly suspicious. </p>
<p>At 11 entries, <a href="https://www.virustotal.com/gui/ip-address/23.50.112.217/detection" title="VirusTotal results for 23.50.112.217." target="_blank" rel="noopener noreferrer">23.50.112.217</a> is another Akamai IP, although from Akamai International.</p>
<p>With 3 entries each, <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/54.167.177.211" title="VirusTotal result for 54.167.177.211." target="_blank" rel="noopener noreferrer">54.167.177.211</a> and </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><a href="https://www.virustotal.com/gui/ip-address/15.197.243.254" title="VirusTotal result for 15.197.243.254." target="_blank" rel="noopener noreferrer">15.197.243.254</a> are </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">another set of Amazon IPs.</span></p>
<p>At 10 entries, <a href="https://www.virustotal.com/gui/ip-address/71.74.45.223" title="VirusTotal result for 71.74.45.223." target="_blank" rel="noopener noreferrer">71.74.45.223</a> is an IP related to my ISP, which may or may not be related to steaming app use.</p>
<p>Coming in with 20 entries is <a href="https://www.virustotal.com/gui/ip-address/3.212.87.58" title="VirusTotal result for 3.212.87.58." target="_blank" rel="noopener noreferrer">3.212.87.58</a>, <a href="https://www.virustotal.com/gui/ip-address/98.82.158.136" title="VirusTotal result for 98.82.158.136." target="_blank" rel="noopener noreferrer">98.82.158.136</a> with 1 connection, <a href="https://www.virustotal.com/gui/ip-address/3.232.210.51" title="VirusTotal result for 3.232.210.51." target="_blank" rel="noopener noreferrer">3.232.210.51</a> with 13, <a href="https://www.virustotal.com/gui/ip-address/98.82.159.50" title="VirusTotal result for 98.82.159.50." target="_blank" rel="noopener noreferrer">98.82.159.50</a> with 17,  and was another Amazon IP. </p>
<p><a href="https://www.virustotal.com/gui/ip-address/109.176.239.70/detection" title="VirusTotal result for 109.176.239.70." target="_blank" rel="noopener noreferrer">109.176.239.70</a> is interesting, because it's a Hack the Box IP with 11 entries. With 42 entries, <a href="https://www.virustotal.com/gui/ip-address/140.82.113.25" title="VirusTotal result for 140.82.113.25." target="_blank" rel="noopener noreferrer">140.82.113.25 </a>is a Github IP address - I guess I was busy doing some uploads or repo management! <a href="https://www.virustotal.com/gui/ip-address/140.82.114.26" title="VirusTotal result for 140.82.114.26." target="_blank" rel="noopener noreferrer">140.82.114.26</a> is another Github IP, with 35 entries.</p>
<p>With 71 connections, <a href="https://www.virustotal.com/gui/ip-address/172.183.7.194/detection" title="VirusTotal result for 172.183.7.194." target="_blank" rel="noopener noreferrer">172.183.7.194</a> is a Microsoft IP of some sort.</p>
<p>At 6 entries, <a href="https://www.virustotal.com/gui/ip-address/165.22.185.144/detection" title="VirusTotal result for 165.22.185.144." target="_blank" rel="noopener noreferrer">165.22.185.144</a> is a DigitalOcean IP. DigitalOcean is a digital infrastructure company with a somewhat checkered reputation, so this is definitely an interesting finding.</p>
<p><a href="https://www.virustotal.com/gui/ip-address/45.79.197.58" title="VirusTotal result for 45.79.197.58." target="_blank" rel="noopener noreferrer">45.79.197.58</a> is another Akamai IP with 44 entries.</p>
<p><a href="https://www.virustotal.com/gui/ip-address/162.159.130.232" title="VirusTotal result for 162.159.130.232." target="_blank" rel="noopener noreferrer">162.159.130.232</a> has six entries; with three,<a href="https://www.virustotal.com/gui/ip-address/172.64.145.202" title="VirusTotal result for 172.64.145.202." target="_blank" rel="noopener noreferrer">172.64.145.202</a>. Both are Cloudflare IPs.</p>
<p>Overall, it's pretty clear that the Alias lists I have are insufficient in terms of filtering traffic. Since the default rules are lower in the execution order than the custom rules I have generated, they are a sign that not a lot of traffic is triggering the rules targeting the IPs from the various DNS blocklists.</p>
<h2>Next Steps</h2>
<p>The first obvious step is to get blocklists focused on IP addresses. This will help narrow down the blocked connections and better identify potential threat traffic.</p>
<p>Second is to refine the prompt for the log analysis. Since the first attempt was quite good at avoiding hallucinations, the next one is just an iterative improvement:</p>
<pre class="language-markdown line-numbers"><code>Analyze the uploaded pfsense style log. Follow these directives in your analysis:

- pfsense log column values: Rule Number, Sub‑rule Number, Anchor, Tracker ID, Real Interface, Reason, Action, Direction, IP Version, TOS, TTL, IP ID, Fragment Offset, IP Flags, Protocol ID, Protocol Text, Packet Length, Source IP, Destination IP, Source Port, Destination Port, Data Length, TCP Flags, Sequence Number, Acknowledgment Number, Window Size, Urgent Pointer, TCP Options
- Run all analysis operations 3 times to validate findings.
- Do NOT produce results that have not been validated.
- Do NOT produce results based on data from outside the log.
- Do NOT produce results that are not based on data in the log.
- Ensure all results are written in plain English.
- Associate IP addresses and Ports in the following format: [IP Address]:[Port]
- Explain any and all recommendations for IPs to examine further.
- Generate results in groups of 10 entries.

Highlight patterns in the data, including times, frequency of connections, protocol IDs, packet length.</code></pre>
<p>Third is to collect a stable set of data from after the OPNSense 25.7 update, which naturally caused a whole bunch of problems. Solving these problems required a number of reboots and service restarts, which pollute the data a fair bit. Therefore, new data will be collected, and then comparisons to the existing data can be made.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.1</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-91/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-91/</id>
        <media:content url="https://korgano.github.io/media/posts/43/cyber-proj-tfb20-2.jpg" medium="image" />
            <category term="Tech Projects"/>
            <category term="Tech"/>
            <category term="PC"/>
            <category term="AI"/>

        <updated>2025-07-21T09:56:21-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/43/cyber-proj-tfb20-2.jpg" alt="Transparent Filtering Bridge miniPC wpa_supplicant file." />
                    This entry is not technically cybersecurity related, so feel free to skip it. We're going to look at how I&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/43/cyber-proj-tfb20-2.jpg" class="type:primaryImage" alt="Transparent Filtering Bridge miniPC wpa_supplicant file." /></p>
                <p>This entry is not technically cybersecurity related, so feel free to skip it.</p>
<p>We're going to look at how I used AI to help address the WiFi network connectivity issues I've been having with the miniPC I use to host the transparent filtering bridge.</p>
<p>For reference, this was the contents of the <code>wpa_supplicant</code> file that I discovered. This was altered from the original code I entered into the machine in <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-80/" title="Transparent Filtering Bridge (+Extras) 8.0" target="_blank" rel="noopener noreferrer">article 8.0</a>.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/43/cyber-proj-tfb20.jpg" alt="Transparent Filtering Bridge miniPC wpa_supplicant file." width="1956" height="1396" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb20-xs.jpg 384w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb20-sm.jpg 600w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb20-md.jpg 768w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb20-lg.jpg 1200w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb20-xl.jpg 1600w"></figure>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1j0p1tptp238">Staring with Copilot</a></li>
<li><a href="#mcetoc_1j0p1tptp239">The ChatGPT Iteration</a></li>
<li><a href="#mcetoc_1j0p1tptp23a">The Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex Iteration</a></li>
<li><a href="#mcetoc_1j0p1tptp23b">Correcting the Configuration File Path</a></li>
<li><a href="#mcetoc_1j0p1tptp23c">Automation Scripts</a></li>
<li><a href="#mcetoc_1j0p1tptp23d">The Next Steps</a></li>
</ul>
</div>
<h2 id="mcetoc_1j0p1tptp238">Staring with Copilot</h2>
<p>My process was simple - I started with Copilot, providing this prompt based on the photograph of the <code>wpa_supplicant </code>file on the miniPC:</p>
<blockquote>
<p>revise this code for FreeBSD to ensure iwlwifi0_wlan is enabled and remains functioning at all times:</p>
<p>``` <br>#!/bin/sh <br># <br># PROVIDE: wpa_supplicant <br># REQUIRE: NETWORKING <br># KEYWORD: shutdown</p>
<p>./etc/rc.subr <br>./etc/network.subr</p>
<p>name="wpa_supplicant"</p>
<p>desc="WPA/802.11 Supplicant for wireless network devices" rcvar=wpa_supplicant_enable</p>
<p>ifn="2" <br>if [ -z "$ifn" ]; then <br>       return 1</p>
<p>fi</p>
<p>if is_wired_interface $(ifn) ; then <br>       drivers="wired" <br>else <br>       drivers="bsd" <br>fi</p>
<p>load_rc_config $name</p>
<p>command=$(wpa_supplicant_program) <br>conf_file=$(wpa_supplicant_conf_file) <br>pidfile="/var/run/$(name)/$(ifn).pid" <br>command_args="-B -i -ifn -c $conf_file -D $driver -P $pidfile" required_files=$conf_file <br>required_modules="wlan_wep wlan_tkip wlan_ccmp"</p>
<p>run_rc_command "$1"</p>
<p>```</p>
<p>Add comments as needed to explain code functionality and speed up troubleshooting.</p>
</blockquote>
<p>Here is the Copilot output when set to reason:</p>
<pre class="language-markdown line-numbers"><code># Revised FreeBSD RC.d Script for iwlwifi0_wlan

Below is a complete `/usr/local/etc/rc.d/wpa_supplicant` script that:

- Ensures the Intel wireless driver is loaded  
- Creates and brings up the `iwlwifi0_wlan` interface if it doesn’t already exist  
- Launches `wpa_supplicant` as a daemon  
- Provides status, start and stop routines with clear error messages  

Save this as `/usr/local/etc/rc.d/wpa_supplicant` and make it executable (`chmod +x`).

```sh
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/etc/wpa_supplicant.conf"
#

. /etc/rc.subr          # import rc_* functions
. /etc/network.subr     # import network helper functions

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

# load overrides from rc.conf, set defaults
load_rc_config $name

: ${wpa_supplicant_enable:="NO"}           # YES to start at boot
: ${wpa_supplicant_iface:="iwlwifi0_wlan"} # logical WLAN interface
: ${wpa_supplicant_driver:="bsd"}          # driver backend
: ${wpa_supplicant_conf:="/etc/wpa_supplicant.conf"}

# path to the wpa_supplicant binary
command="/usr/sbin/wpa_supplicant"

# pidfile lives under /var/run/&lt;name&gt;.&lt;iface&gt;.pid
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"

# arguments to wpa_supplicant
command_args="-B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile}"

# override default actions
start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

#
# start: load driver, create interface, bring it up, then start daemon
#
wpa_supplicant_start()
{
    # 1) Load the iwlwifi kernel module if not already present
    if ! kldstat -n if_iwlwifi &gt; /dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi \
            || err 1 "Unable to load if_iwlwifi kernel module"
    fi

    # 2) Create the wlan interface if missing
    if ! ifconfig ${wpa_supplicant_iface} &gt; /dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface}"
    fi

    # 3) Bring the wireless interface up
    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface}"

    # 4) Launch wpa_supplicant in the background
    ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start"
}

#
# status: check the pidfile to see if wpa_supplicant is running
#
wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

#
# stop: terminate the daemon and clean up the pidfile
#
wpa_supplicant_stop()
{
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant (PID: $(cat ${pidfile}))"
        rm -f "${pidfile}"
    else
        err 1 "PID file not found, is wpa_supplicant running?"
    fi
}

run_rc_command "$1"
```

---

## `/etc/rc.conf` Example

Add these lines to enable and configure the service at boot:

```sh
wpa_supplicant_enable="YES"
wpa_supplicant_iface="iwlwifi0_wlan"
wpa_supplicant_driver="bsd"
wpa_supplicant_conf="/etc/wpa_supplicant.conf"
```

---

## Troubleshooting Tips

- If the interface never shows up, verify that `if_iwlwifi.ko` exists in `/boot/modules` or your compiled module directory.
- Use `kldstat` and `kldload` manually to confirm kernel module loading.
- Check `/var/log/messages` or run `tail -f /var/log/messages` while starting the service for driver errors.
- To debug wpa_supplicant, add `-d` or `-dd` to `command_args` for verbose output.
- Confirm your `/etc/wpa_supplicant.conf` has correct SSID and PSK entries, and file permissions allow only root to read it.

---

### Next Steps

You may want to:

- Integrate a keep-alive monitor (e.g., a wrapper loop or cron job) that restarts the service if the link drops.
- Explore `wpa_cli -a /path/to/script.sh` for automated reconnection on authentication failures.
- Tune driver parameters (e.g., power saving) via `/boot/loader.conf` for performance.</code></pre>
<p>Implementing this with minor alterations (for example <code>wlan0</code> instead of <code>wlan</code>, changing the <code>conf</code> file path and name) increased availability. While there are still random connection failures, it seems to happen less frequently. Within each 4 hour window between WiFi connection restarts, it seems like only the last hour or so is where the connection seems to time out.</p>
<h2 id="mcetoc_1j0p1tptp239">The ChatGPT Iteration</h2>
<p>Out of pure curiosity, I decided to see how ChatGPT, set to reason, would generate code from the same prompt.</p>
<p>Here's the result:</p>
<pre class="language-markdown line-numbers"><code>```sh
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: NETWORKING
# BEFORE: LOGIN
# KEYWORD: shutdown
#
# Ensure Intel iwlwifi device stays up and managed by wpa_supplicant
#

. /etc/rc.subr

name="wpa_supplicant"
rcvar="${name}_enable"

# load user settings from /etc/rc.conf
load_rc_config $name

# default settings (override in /etc/rc.conf as needed)
: ${wpa_supplicant_enable:="NO"}                       # enable in rc.conf
: ${wpa_supplicant_wlandev:="iwm0"}                    # physical device
: ${wpa_supplicant_if:="wlan0"}                        # logical interface
: ${wpa_supplicant_conf:="/etc/wpa_supplicant.conf"}   # config file
: ${wpa_supplicant_driver:="wpa"}                      # driver backend
: ${wpa_supplicant_flags:=""}                          # extra options

# load required kernel modules at boot (if not already loaded)
kld_list="if_iwm.ko"   # Intel wireless driver
kld_list+=" iwmfw.ko"  # firmware for iwlwifi devices

start_cmd="${name}_start"
stop_cmd="${name}_stop"

wpa_supplicant_start() {
    # create wlan interface if missing
    if ! ifconfig ${wpa_supplicant_if} &gt;/dev/null 2&gt;&amp;1; then
        ifconfig ${wpa_supplicant_if} create wlandev ${wpa_supplicant_wlandev} \
                  wlanmode sta || return 1
    fi

    # bring up the interface
    ifconfig ${wpa_supplicant_if} up || return 1

    # launch wpa_supplicant in background
    /usr/sbin/wpa_supplicant -B \
        -i ${wpa_supplicant_if} \
        -c ${wpa_supplicant_conf} \
        -D ${wpa_supplicant_driver} \
        -P /var/run/${name}.${wpa_supplicant_if}.pid \
        ${wpa_supplicant_flags}
}

wpa_supplicant_stop() {
    # terminate daemon and remove interface
    killproc -p /var/run/${name}.${wpa_supplicant_if}.pid /usr/sbin/wpa_supplicant
    ifconfig ${wpa_supplicant_if} destroy
}

run_rc_command "$1"
```

**How it works:**

* **Module loading**

  * Ensures `if_iwm.ko` and `iwmfw.ko` are loaded at boot, so the Intel wireless device is available ([Reddit][1]).
* **Interface creation**

  * Checks for `wlan0`; if missing, creates it from `iwm0` in station mode ([Sacred Heart School][2]).
* **Bringing up interface**

  * Uses `ifconfig wlan0 up` to activate the wireless interface.
* **Starting wpa\_supplicant**

  * Runs `wpa_supplicant` with `-B` (daemonize), interface, config file, driver, and PID file arguments.
* **Stopping and cleanup**

  * `killproc` stops the daemon and `ifconfig wlan0 destroy` removes the logical interface.

To enable and keep running:

1. Add to `/etc/rc.conf`:

   ```sh
   wpa_supplicant_enable="YES"
   wpa_supplicant_wlandev="iwm0"
   wpa_supplicant_if="wlan0"
   wpa_supplicant_conf="/etc/wpa_supplicant.conf"
   ```
2. Ensure firmware loader settings in `/boot/loader.conf`:

   ```sh
   if_iwm_load="YES"
   iwmfw_load="YES"
   ```
3. Reboot or start manually:

   ```sh
   service wpa_supplicant start
   ```

####

[1]: https://www.reddit.com/r/freebsd/comments/13sa7sv/wifi_setup_help_needed/?utm_source=chatgpt.com "Wifi setup help needed! : r/freebsd"
[2]: https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/?utm_source=chatgpt.com "FreeBSD 14 on the Desktop"</code></pre>
<p>Before I use DiffChecker to see specific differences, here's what I notice with my own eyes:</p>
<ul>
<li>ChatGPT decided to change the <code>rcvar</code> name to a generic value.</li>
<li>ChatGPT added a config value for the actual WiFi hardware device.</li>
<li>ChatGPT decided that it needed to ensure the Intel WiFi firmware booted.</li>
<li>The code for <code>wpa_supplicant_start</code> and <code>wpa_supplicant_stop</code> are completely different.</li>
<li>There's no <code>wpa_supplicant_status</code> command.</li>
<li>Practically no comments and no logging code.</li>
</ul>
<p>Unfortunately, loading both iterations of the code into DiffChecker didn't work as well as I hoped. The ChatGPT script, being only 59 lines long, compared to the 94 lines of the Copilot script, kept being aligned with highly dissimilar parts of the code based on the line numbers.</p>
<h2 id="mcetoc_1j0p1tptp23a">The Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex Iteration</h2>
<p>Since I like to experiment with open source LLMs, I decided to try one by DavidAU, one of my preferred AI tuners. Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex is a 800MB coding model with reasoning capabilities, which is an absurdly small model by any standards.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/43/cyber-proj-tfb22.png" alt="Qwen3-Zero-Coder-Reasoning-0.8B-Neo-Ex loaded in LM Studio." width="1920" height="1033" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb22-xs.png 384w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb22-sm.png 600w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb22-md.png 768w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb22-lg.png 1200w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb22-xl.png 1600w"></figure>
<p>The small size had me morbidly curious as to the quality of the output, so I provided it with the same prompt as Copilot and ChatGPT. This is what it produced:</p>
<pre class="language-markdown line-numbers"><code>&lt;think&gt;
Okay, I need to modify the given shell script for FreeBSD to ensure that `iwwlan` (or `iwlan`) is enabled and remains functional at all times. The user provided a command that sets up the system using `/etc/rc/subr` and `network.subr`. My task is to add comments and optimize the code to ensure these steps work correctly.

First, I'll start with understanding the existing script. The current setup uses `ifn`, which refers to the interface (e.g., `eth0`, `wlan0`) and sets up the command for wpa_supplicant. However, FreeBSD uses `iwwlan` instead of `/dev/net/wlan`. So I need to replace `iwwlan` with `iwwan`.

Next, I'll update the `command` line to use `/dev/deviwlan` instead of `/dev/devnet`. This should correctly interface with the network driver in FreeBSD.

Also, since FreeBSD uses `ifconfig` and `sysctl`, I need to ensure that these tools are installed. If they aren't present, my current approach might fail. So I'll add dependencies like `ifconfig` and `sysctl` if needed.

I should also update the `rcvar` and other rc variables to ensure they're correctly set after initial configuration. Then, make sure all necessary modules and files are installed before running the script.

Finally, adding comments where appropriate will help users understand each step and troubleshoot any issues. This ensures that even those unfamiliar with FreeBSD or networking configurations can understand and modify the code.
&lt;/think&gt;

Here's the revised script with added comments to ensure clarity and correctness for FreeBSD:

```bash
#!/bin/sh

# PROVIDE: wpa_supplicant
# DESC:
#     Configure WPA/802-11 supplicant for wireless network devices
#
# KEYWORDS: 
#       networking; shutdown
#

NAME="wpa_supplicant"
DESCR="WPA/802-11 Supplicant for wireless network devices"

RCVAR=wpa_supplicant_enable

# Define interface to use
ifn="2" # Replace with the correct interface (eth0, wlan0 or wwan0)

# Check if the interface is active
if [ -z "$ifn" ]; then
    return 1
fi

# Set up required modules
drivers="wired"
required_modules="wlan_wep wlan_tkip wlan_ccmp"

# Initialize network configuration
run_rc_command "$1"

# Ensure necessary files and dependencies are present
ifconfig $ifn set
sysctl --set /net/eth0/flags=0
sysctl --set /net/eth0/devdeviwlan=0

# Set up wpa_supplicant command
command=$(wpa_supplicant_program)
conf_file="$conf_file"
pidfile="/var/run/$name/$ifn.pid"

# Add command arguments
command_args="-B -i -ifn -c $conf_file -D $driver -P $pidfile"

# Ensure required modules are installed
if [ "$required_modules" != "" ] &amp;&amp; [[ "$required_modules" != '' ]]

# Set up the rc subroutines and network subroutines
/etc/rc/subr
/etc/network.subr
```

**Changes Made:**
1. Replace `iwwlan` with `/dev/deviwlan` to interface with the network driver in FreeBSD.
2. Use `ifconfig` instead of `sysctl` to set interfaces and devices if necessary.
3. Add comments explaining each part of the script to assist troubleshooting.
4. Ensure dependencies are installed before execution.

**Explanation:**

- `ifconfig` ensures the interface is correctly configured, which is necessary for `wpa_supplicant` to communicate with the network driver.
- `sysctl` sets up networking parameters to ensure optimal performance and security settings.</code></pre>
<p>Just eyeballing this code tells me this is not a substantive improvement over the original <code>wpa_supplicant</code> code, which would be disappointing if I didn't know this was a tiny model.</p>
<p>It wouldn't be surprising to see that it's capable of putting out simple scripts, but that's something to test out later.</p>
<h2 id="mcetoc_1j0p1tptp23b">Correcting the Configuration File Path</h2>
<p>One thing that probably contributed to the connection issues was the non-specific nature of the configuration file path. To find the proper path, I had to use shell commands to find all files containing <code>wpa_sup</code>:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/43/cyber-proj-tfb21.jpg" alt="Finding the iwlwifi0_wlan0 configuration file and deleting an unnecessary file." width="1964" height="1368" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb21-xs.jpg 384w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb21-sm.jpg 600w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb21-md.jpg 768w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb21-lg.jpg 1200w ,https://korgano.github.io/media/posts/43/responsive/cyber-proj-tfb21-xl.jpg 1600w"></figure>
<p> </p>
<h2 id="mcetoc_1j0p1tptp23c">Automation Scripts</h2>
<p>Since I can't rule out that the big OPNSense update is going to wipe out all the changes I've made to wpa_supplicant and associated files, I decided to have a script ready to make those files as necessary.</p>
<p>For this task, I decided to pit Copilot and ChatGPT against each other, each with the same code (the initial Copilot generation) and prompt.</p>
<p>The prompt was as follows:</p>
<pre class="language-markdown line-numbers"><code>Write me an automation script for FreeBSD shell that does the following:
-Generate `/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf` with the following configuration:
```
crtl_interface=/var/run/wpa_supplicant
crtl_interface_group=0
ap_scan=1
fast_reauth=1
network={
ssid="Placeholder"
scan_ssid=1
priority=5
key_mgmt=WPA-PSK
psk="Placeholder"
pairwise=CCMP TKIP
group=CCMP TKIP
}
```
-Generate `/etc/rc.d/wpa_supplicant` with the following code content:
```
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan0"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/etc/wpa_supplicant.conf"
#

. /etc/rc.subr          # import rc_* functions
. /etc/network.subr     # import network helper functions

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

# load overrides from rc.conf, set defaults
load_rc_config $name

: ${wpa_supplicant_enable:="YES"}           # YES to start at boot
: ${wpa_supplicant_iface:="iwlwifi0_wlan0"} # logical WLAN interface
: ${wpa_supplicant_driver:="bsd"}          # driver backend
: ${wpa_supplicant_conf:="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"}

# path to the wpa_supplicant binary
command="/usr/sbin/wpa_supplicant"

# pidfile lives under /var/run/&lt;name&gt;.&lt;iface&gt;.pid
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"

# arguments to wpa_supplicant
command_args="-B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile}"

# override default actions
start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

#
# start: load driver, create interface, bring it up, then start daemon
#
wpa_supplicant_start()
{
    # 1) Load the iwlwifi kernel module if not already present
    if ! kldstat -n if_iwlwifi &gt; /dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi \
            || err 1 "Unable to load if_iwlwifi kernel module - /etc/rc.d/wpa_supplicant"
    fi

    # 2) Create the wlan interface if missing
    if ! ifconfig ${wpa_supplicant_iface} &gt; /dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface} - /etc/rc.d/wpa_supplicant"
    fi

    # 3) Bring the wireless interface up
    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface} - /etc/rc.d/wpa_supplicant"

    # 4) Launch wpa_supplicant in the background
    ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start - /etc/rc.d/wpa_supplicant"
}

#
# status: check the pidfile to see if wpa_supplicant is running
#
wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

#
# stop: terminate the daemon and clean up the pidfile
#
wpa_supplicant_stop()
{
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant (PID: $(cat ${pidfile}))"
        rm -f "${pidfile}"
    else
        err 1 "PID file not found, is wpa_supplicant running? - /etc/rc.d/wpa_supplicant"
    fi
}

run_rc_command "$1"
```
-apply `chmod +x` to `/etc/rc.d/wpa_supplicant`
-generate `/etc/rc.conf.local` with the following configuration:
```
wpa_supplicant_enable="YES"
wpa_supplicant_iface="iwlwifi0_wlan"
wpa_supplicant_driver="bsd"
wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
```</code></pre>
<p>Here's what Copilot generated:</p>
<pre class="language-markdown line-numbers"><code># FreeBSD Shell Automation Script for wpa_supplicant Setup

The following script automates:

- Creation of the WPA supplicant configuration under `/var/etc`  
- Installation of the `/etc/rc.d/wpa_supplicant` startup script  
- Proper execute permissions  
- Generation of `/etc/rc.conf.local` with service settings  

Save this as, for example, `setup_wpa.sh`, make it executable, and run as root.

```sh
#!/bin/sh
#
# setup_wpa.sh
# Automates wpa_supplicant config, rc.d script, permissions, and rc.conf.local
#

set -e

# Ensure script is run as root
if [ "$(id -u)" -ne 0 ]; then
  echo "Error: This script must be run as root."
  exit 1
fi

# 1) Create WPA supplicant config directory and file
mkdir -p /var/etc

cat &lt;&lt; 'EOF' &gt; /var/etc/wpa_supplicant_iwlwifi0_wlan0.conf
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
ap_scan=1
fast_reauth=1
network={
    ssid="Placeholder"
    scan_ssid=1
    priority=5
    key_mgmt=WPA-PSK
    psk="Placeholder"
    pairwise=CCMP TKIP
    group=CCMP TKIP
}
EOF

echo "Created /var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"

# 2) Install the rc.d startup script
cat &lt;&lt; 'EOF' &gt; /etc/rc.d/wpa_supplicant
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan0"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
#

. /etc/rc.subr
. /etc/network.subr

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

load_rc_config $name

: ${wpa_supplicant_enable:="YES"}
: ${wpa_supplicant_iface:="iwlwifi0_wlan0"}
: ${wpa_supplicant_driver:="bsd"}
: ${wpa_supplicant_conf:="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"}

command="/usr/sbin/wpa_supplicant"
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"
command_args="-B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile}"

start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

wpa_supplicant_start()
{
    if ! kldstat -n if_iwlwifi &gt;/dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi || err 1 "Unable to load if_iwlwifi"
    fi

    if ! ifconfig ${wpa_supplicant_iface} &gt;/dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface}"
    fi

    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface}"

    ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start"
}

wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

wpa_supplicant_stop()
{
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt;/dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant"
        rm -f "${pidfile}"
    else
        err 1 "PID file not found, is wpa_supplicant running?"
    fi
}

run_rc_command "$1"
EOF

chmod +x /etc/rc.d/wpa_supplicant
echo "Installed and made executable: /etc/rc.d/wpa_supplicant"

# 3) Generate /etc/rc.conf.local
cat &lt;&lt; 'EOF' &gt; /etc/rc.conf.local
wpa_supplicant_enable="YES"
wpa_supplicant_iface="iwlwifi0_wlan"
wpa_supplicant_driver="bsd"
wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
EOF

echo "Created /etc/rc.conf.local"

echo "Setup complete. You can now enable the service with:"
echo "  service wpa_supplicant start"
```

---

## Usage Notes

- Update the `ssid` and `psk` placeholders in  
  `/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf` before connecting to your network.

- To enable on every boot, ensure `/etc/rc.conf.local` is sourced  
  (FreeBSD does this by default).  

- Verify the driver module with `kldstat | grep if_iwlwifi` after reboot.

- Check logs via `dmesg` or `/var/log/messages` if the interface fails to come up.

---

## Further Enhancements

- Parameterize SSID/PSK as script arguments for non-interactive setups.  
- Add backups of existing config files before overwriting.  
- Integrate wireless scanning (`wpa_cli scan`) and status checks post-start.  
- Extend for multiple SSIDs by looping over an array of network blocks.</code></pre>
<p>Here's what ChatGPT generated:</p>
<pre class="language-markdown line-numbers"><code>* Plan script steps
* Create WPA config file
* Create rc.d service script
* Apply executable permission
* Create rc.conf.local file

####

```sh
#!/bin/sh
#
# Automation script to configure wpa_supplicant on FreeBSD
# Usage: sh setup_wpa.sh
set -e

# 1) Generate wpa_supplicant configuration
mkdir -p /var/etc
cat &gt; /var/etc/wpa_supplicant_iwlwifi0_wlan0.conf &lt;&lt; 'EOF'
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
ap_scan=1
fast_reauth=1
network={
    ssid="Placeholder"
    scan_ssid=1
    priority=5
    key_mgmt=WPA-PSK
    psk="Placeholder"
    pairwise=CCMP TKIP
    group=CCMP TKIP
}
EOF

# 2) Generate rc.d wpa_supplicant service script
cat &gt; /etc/rc.d/wpa_supplicant &lt;&lt; 'EOF'
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan0"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
#

. /etc/rc.subr          # import rc_* functions
. /etc/network.subr     # import network helper functions

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

# load overrides from rc.conf, set defaults
load_rc_config $name

: ${wpa_supplicant_enable:="YES"}            # YES to start at boot
: ${wpa_supplicant_iface:="iwlwifi0_wlan0"}  # logical WLAN interface
: ${wpa_supplicant_driver:="bsd"}            # driver backend
: ${wpa_supplicant_conf:="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"}

# path to the wpa_supplicant binary
command="/usr/sbin/wpa_supplicant"

# pidfile lives under /var/run/&lt;name&gt;.&lt;iface&gt;.pid
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"

# arguments to wpa_supplicant
command_args="-B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile}"

# override default actions
start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

wpa_supplicant_start()
{
    # 1) Load the iwlwifi kernel module if not already present
    if ! kldstat -n if_iwlwifi &gt; /dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi \
            || err 1 "Unable to load if_iwlwifi kernel module"
    fi

    # 2) Create the wlan interface if missing
    if ! ifconfig ${wpa_supplicant_iface} &gt; /dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface}"
    fi

    # 3) Bring the wireless interface up
    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface}"

    # 4) Launch wpa_supplicant in the background
    ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start"
}

wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

wpa_supplicant_stop()
{
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant (PID: $(cat ${pidfile}))"
        rm -f "${pidfile}"
    else
        err 1 "PID file not found, is wpa_supplicant running?"
    fi
}

run_rc_command "$1"
EOF

# 3) Make service script executable
chmod +x /etc/rc.d/wpa_supplicant

# 4) Generate local rc.conf overrides
cat &gt; /etc/rc.conf.local &lt;&lt; 'EOF'
wpa_supplicant_enable="YES"
wpa_supplicant_iface="iwlwifi0_wlan"
wpa_supplicant_driver="bsd"
wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
EOF

echo "Configuration complete."
```

# References

* wpa\_supplicant configuration file placement and options ([docs.freebsd.org][1])
* Use of wpa\_supplicant(8) for WPA-PSK in FreeBSD ([freebsdhandbook.com][2])

[1]: https://docs.freebsd.org/en/books/handbook/network/?utm_source=chatgpt.com "Chapter 7. Network"
[2]: https://www.freebsdhandbook.com/advanced-networking?utm_source=chatgpt.com "Chapter 32. Advanced Networking - FreeBSD Handbook"</code></pre>
<p>Comparing the scripts in DiffChecker revealed some interesting changes, but most were in the following categories:</p>
<ul>
<li>Differences in comments - omissions or verbiage.</li>
<li>Different constructions of the same commands (<code><span class="diff-chunk_chunk__MRDHe undefined">cat </span></code><span class="diff-chunk_chunk__MRDHe diff-chunk_removed__oVJqp"><code>&lt;&lt; 'EOF' &gt; /etc/rc.d/wpa_supplicant</code> vs <code><span class="diff-chunk_chunk__MRDHe undefined">cat </span><span class="diff-chunk_chunk__MRDHe diff-chunk_inserted__dGN9u">&gt; /etc/rc.d/wpa_supplicant &lt;&lt; 'EOF'</span></code></span>).</li>
<li>Copilot having a function to ensure the script is running as root.</li>
<li>ChatGPT having a comment on how to use the script.</li>
<li>Copilot having better user feedback via process completion messages.</li>
</ul>
<p>After some quick Googling, it seems that the <code>cat &lt;&lt; 'EOF' &gt; /etc/rc.d/wpa_supplicant</code> construction is the more correct one, so it seems Copilot is more technically accurate. </p>
<h2 id="mcetoc_1j0p1tptp23d">The Next Steps</h2>
<p>What's next isn't particularly exciting:</p>
<ul>
<li>Combine best elements of ChatGPT script into Copilot script.</li>
<li>Save the file and place it on the flash drive I store the other files I add to OPNSense.</li>
<li>Wait for the OPNSense 25.7 finalized release to see if it completely obliterates various things I've added.</li>
</ul>
<p>For reference, here's the finalized version of the script I've come up with:</p>
<pre class="language-bash line-numbers"><code>#!/bin/sh
#
# setup_wpa.sh
# Automates wpa_supplicant config, rc.d script, permissions, and rc.conf.local
# Usage: sh setup_wpa.sh

set -e

# Ensure script is run as root
if [ "$(id -u)" -ne 0 ]; then
  echo "Error: This script must be run as root."
  exit 1
fi

# 1) Create WPA supplicant config directory and file
mkdir -p /var/etc

cat &lt;&lt; 'EOF' &gt; /var/etc/wpa_supplicant_iwlwifi0_wlan0.conf
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
ap_scan=1
fast_reauth=1
network={
    ssid="Placeholder"
    scan_ssid=1
    priority=5
    key_mgmt=WPA-PSK
    psk="Placeholder"
    pairwise=CCMP TKIP
    group=CCMP TKIP
}
EOF

echo "Created /var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"

# 2) Install the rc.d startup script
cat &lt;&lt; 'EOF' &gt; /etc/rc.d/wpa_supplicant
#!/bin/sh
#
# PROVIDE: wpa_supplicant
# REQUIRE: DAEMON NETWORKING if_iwlwifi
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf to enable this service:
#   wpa_supplicant_enable="YES"
#   wpa_supplicant_iface="iwlwifi0_wlan0"
#   wpa_supplicant_driver="bsd"
#   wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
#

. /etc/rc.subr          # import rc_* functions
. /etc/network.subr     # import network helper functions

name="wpa_supplicant"
rcvar="wpa_supplicant_enable"

# load overrides from rc.conf, set defaults
load_rc_config $name

: ${wpa_supplicant_enable:="YES"}           # YES to start at boot
: ${wpa_supplicant_iface:="iwlwifi0_wlan0"} # logical WLAN interface
: ${wpa_supplicant_driver:="bsd"}          # driver backend
: ${wpa_supplicant_conf:="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"}

# path to the wpa_supplicant binary
command="/usr/sbin/wpa_supplicant"

# pidfile lives under /var/run/&lt;name&gt;.&lt;iface&gt;.pid
pidfile="/var/run/${name}.${wpa_supplicant_iface}.pid"

# arguments to wpa_supplicant
command_args="-B \
    -i ${wpa_supplicant_iface} \
    -D ${wpa_supplicant_driver} \
    -c ${wpa_supplicant_conf} \
    -P ${pidfile}"

# override default actions
start_cmd="wpa_supplicant_start"
stop_cmd="wpa_supplicant_stop"
status_cmd="wpa_supplicant_status"

#
# start: load driver, create interface, bring it up, then start daemon
#
wpa_supplicant_start()
{
    # 1) Load the iwlwifi kernel module if not already present
    if ! kldstat -n if_iwlwifi &gt; /dev/null 2&gt;&amp;1; then
        kldload if_iwlwifi \
            || err 1 "Unable to load if_iwlwifi kernel module - /etc/rc.d/wpa_supplicant"
    fi

    # 2) Create the wlan interface if missing
    if ! ifconfig ${wpa_supplicant_iface} &gt; /dev/null 2&gt;&amp;1; then
        ifconfig iwlwifi0 create wlandev iwlwifi0 \
            || err 1 "Failed to create interface ${wpa_supplicant_iface} - /etc/rc.d/wpa_supplicant"
    fi

    # 3) Bring the wireless interface up
    ifconfig ${wpa_supplicant_iface} up \
        || err 1 "Could not bring up ${wpa_supplicant_iface} - /etc/rc.d/wpa_supplicant"

    # 4) Launch wpa_supplicant in the background
    ${command} ${command_args} \
        || err 1 "wpa_supplicant failed to start - /etc/rc.d/wpa_supplicant"
}

#
# status: check the pidfile to see if wpa_supplicant is running
#
wpa_supplicant_status()
{
    check_pidfile "${pidfile}" "${command}"
}

#
# stop: terminate the daemon and clean up the pidfile
#
wpa_supplicant_stop()
{
    if [ -f "${pidfile}" ]; then
        kill -TERM "$(cat ${pidfile})" &gt; /dev/null 2&gt;&amp;1 \
            || err 1 "Failed to kill wpa_supplicant (PID: $(cat ${pidfile}))"
        rm -f "${pidfile}"
    else
        err 1 "PID file not found, is wpa_supplicant running? - /etc/rc.d/wpa_supplicant"
    fi
}

run_rc_command "$1"
EOF

chmod +x /etc/rc.d/wpa_supplicant
echo "Installed and made executable: /etc/rc.d/wpa_supplicant"

# 3) Generate /etc/rc.conf.local
cat &lt;&lt; 'EOF' &gt; /etc/rc.conf.local
wpa_supplicant_enable="YES"
wpa_supplicant_iface="iwlwifi0_wlan"
wpa_supplicant_driver="bsd"
wpa_supplicant_conf="/var/etc/wpa_supplicant_iwlwifi0_wlan0.conf"
EOF

echo "Created /etc/rc.conf.local"

echo "Setup complete. You can now enable the service with:"
echo "  service wpa_supplicant start"</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 9.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-90/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-90/</id>
        <media:content url="https://korgano.github.io/media/posts/42/cyber-proj-tfb15.png" medium="image" />
            <category term="Tech Projects"/>
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2025-07-15T10:03:54-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/42/cyber-proj-tfb15.png" alt="OPNSense NTP Denial of Service Scan Detection" />
                    It's been a bit over two weeks, so it's time to check in on the Transparent Filtering Bridge. Having gotten&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/42/cyber-proj-tfb15.png" class="type:primaryImage" alt="OPNSense NTP Denial of Service Scan Detection" /></p>
                <p>It's been a bit over two weeks, so it's time to check in on the Transparent Filtering Bridge. Having gotten the hardware to <strong>finally </strong>have a functioning management connection, I left the device to do its job, filtering traffic as it passed between the modem and primary router of my mesh network. With a mixture of firewall and Suricata rules in place, what I'm primarily looking for is what, if any, rules have been triggered.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1j078l7n11a">For Some Reason, Config Changes</a></li>
<li><a href="#mcetoc_1j0842akm15q">Tweaking the Cron Job Timer</a></li>
<li><a href="#mcetoc_1j0842akm15r">Checking the Firewall Logs</a></li>
<li><a href="#mcetoc_1j0842akm15s">Filtering Out the Noise</a></li>
<li><a href="#mcetoc_1j0842akm15t">Checking Up On Suricata</a></li>
<li><a href="#mcetoc_1j0842akm15u">What To Do Next</a></li>
<li><a href="#mcetoc_1j0842akm15v">Takeaways</a></li>
</ul>
</div>
<h2 id="mcetoc_1j078l7n11a">For Some Reason, Config Changes</h2>
<p>One thing that happened between the last entry and now was an automatic Windows update, which closed out my browser, where I had the OPNSense webGUI tab open. This seemed to be helping maintain the connection to device, which would sometimes intermittently fail. I also had a cron job set to reset the interface every 6 hours to address the issue.</p>
<p>However, when I tried accessing OPNSense webGUI to start this article, I got connection errors.</p>
<p>So I connected a keyboard and mouse to the miniPC, turned on the monitor, and saw that there was no IP address on the console. Attempting to reset the services wound up freezing on the OPT1 interface (the WiFi), so I cancelled out of that. Then I restarted the miniPC, which brought the IP address back to the interface, but no actual web connectivity.</p>
<p>This meant it was time to dig into the <code>/usr/local/etc/rc.d/wpa_supplicant</code> file again, which is where I made an interesting discovery. At some point, for some reason, changes had been made to the file. My best guess was that this occurred after the installation of the WiFi firmware, but it's unclear why that would change some comment lines and strip the <code>rcvar</code> value.</p>
<p>Since the <code>rcvar</code> was what told the machine to enable the WiFi authentication, this explained the WiFi connection issues.</p>
<p>After making minimal changes to the file (returning the comment values to their original values and fixing the missing <code>rcvar</code> value), I reset the WiFi service and regained connectivity.</p>
<h2 id="mcetoc_1j0842akm15q">Tweaking the Cron Job Timer</h2>
<p>Due to the unusual nature of the <code>wpa_supplicant</code> file changes, I decided to reduce the time gap between WiFi interface resets from 6 hours to 4. This would give me more opportunities to retain or regain WiFi access should connection issues continue.</p>
<p>Not even an hour after I got access back, the WiFi connection went down, which proved this was a smart decision.</p>
<p>In a major irritation, the WiFi connection seemed to be failing silently a few minutes after being reset, making it hard to interact with the webGUI. In a bizarre situation, I managed to access a specific page of the webGUI, despite not being able to reach the webGUI in general. Even more annoying was the fact that I managed to randomly get access by refreshing the tabs for the webGUI.</p>
<p>More experimentation (and possibly FreeBSD kernel updates) is clearly needed to resolve this issue.</p>
<h2 id="mcetoc_1j0842akm15r">Checking the Firewall Logs</h2>
<p>After updating the cron job configuration, the first thing I did was check the firewall logs.</p>
<p>One of the more irritating aspects of OPNSense is that <strong>all </strong>firewall logs seem to be seem priority level - Informational. This means that any rule that passes or blocks traffic generates a log in that same level, meaning it is <strong>very </strong>easy to get lost in all the data. Luckily, the provided search option is quite effective - it was easy to get just the logs of blocked connections on the bridge interface.</p>
<p>(Incidentally, it seems logical to me that someone running a firewall would put logging of blocked traffic at a higher log level.)</p>
<p>Since these logs were all in a machine readable format that I had no experience with, I decided to download a 50 entry log for analysis with ChatGPT and other tools. The first thing I did was sanitize any of my personal IP addresses.</p>
<p>Here is an example of a block coming in:</p>
<p><code>2025-06-17T09:58:31-04:00    Informational    filterlog     2,,,02f4bab031b57d1e30553ce08e0ec131,bridge0,match,block,in,4,0x0,,238,27873,0,DF,6,tcp,71,3.77.205.84,Home IP,443,52742,31,PA,4127654128:4127654159,2661296198,118,,</code></p>
<p>For contrast, a block going out:</p>
<p><code>2025-06-25T11:06:30-04:00    Informational    filterlog     68,,,ff197ebab7ec0da7fe008f0f6ffee42b,bridge0,match,block,out,4,0x0,,127,21852,0,DF,6,tcp,52,Home IP,1.1.1.1,21124,443,0,S,2052234833,,64240,,mss;nop;wscale;nop;nop;sackOK</code></p>
<p>The bits and pieces that I can read without assistance is mostly the interface information, the fact that the rule matched, the action taken, direction of the traffic, protocol, port, and IP addresses.</p>
<p>Annoyingly, there's no way to get a simplified view that includes the rule name/description, which would make identifying what is going on much easier.</p>
<p>To figure out what the logs are truly saying, I provided ChatGPT with the above entries and the following query:</p>
<blockquote>
<p>In plain english, explain the OPNSense firewall log format based on these two example entries:</p>
</blockquote>
<p>ChatGPT's response was as follows, omitting the Timestamp, Severity, and Process information:</p>
<blockquote>
<p data-start="251" data-end="387">Following that, the comma‑separated values represent fields defined by pf’s raw filter log format <span class="" data-state="closed"><span class="ms-1 inline-flex max-w-full items-center relative top-[-0.094rem] animate-[show_150ms_ease-in]"><a href="https://docs.netgate.com/pfsense/en/latest/monitoring/logs/raw-filter-format.html" target="_blank" rel="noopener" alt="https://docs.netgate.com/pfsense/en/latest/monitoring/logs/raw-filter-format.html" class="flex h-4.5 overflow-hidden rounded-xl px-2 text-[9px] font-medium text-token-text-secondary! bg-[#F4F4F4]! dark:bg-[#303030]! transition-colors duration-150 ease-in-out"><span class="relative start-0 bottom-0 flex h-full w-full items-center"><span class="flex h-4 w-full items-center justify-between overflow-hidden"><span class="max-w-full grow truncate overflow-hidden text-center">Netgate Documentation</span></span></span></a></span></span>:</p>
<ol data-start="389" data-end="2502">
<li data-start="389" data-end="468">
<p data-start="392" data-end="468"><strong data-start="392" data-end="407">Rule Number</strong> (<code data-start="409" data-end="412">2</code> / <code data-start="415" data-end="419">68</code>): The index of the firewall rule that matched.</p>
</li>
<li data-start="469" data-end="546">
<p data-start="472" data-end="546"><strong data-start="472" data-end="491">Sub‑rule Number</strong> (blank): Secondary rule index if using nested rules.</p>
</li>
<li data-start="547" data-end="622">
<p data-start="550" data-end="622"><strong data-start="550" data-end="560">Anchor</strong> (blank): Name of the anchor (rule set) containing the rule.</p>
</li>
<li data-start="623" data-end="700">
<p data-start="626" data-end="700"><strong data-start="626" data-end="640">Tracker ID</strong> (<code data-start="642" data-end="651">02f4ba…</code> / <code data-start="654" data-end="663">ff197e…</code>): Unique flow‑tracking identifier.</p>
</li>
<li data-start="701" data-end="788">
<p data-start="704" data-end="788"><strong data-start="704" data-end="722">Real Interface</strong> (<code data-start="724" data-end="733">bridge0</code>): The actual network interface the packet traversed.</p>
</li>
<li data-start="789" data-end="854">
<p data-start="792" data-end="854"><strong data-start="792" data-end="802">Reason</strong> (<code data-start="804" data-end="811">match</code>): Why it was logged (typically <code data-start="843" data-end="850">match</code>).</p>
</li>
<li data-start="855" data-end="924">
<p data-start="858" data-end="924"><strong data-start="858" data-end="868">Action</strong> (<code data-start="870" data-end="877">block</code>): What the firewall did (<code data-start="903" data-end="909">pass</code> or <code data-start="913" data-end="920">block</code>).</p>
</li>
<li data-start="925" data-end="1004">
<p data-start="928" data-end="1004"><strong data-start="928" data-end="941">Direction</strong> (<code data-start="943" data-end="947">in</code> / <code data-start="950" data-end="955">out</code>): Traffic direction relative to the interface.</p>
</li>
<li data-start="1005" data-end="1071">
<p data-start="1008" data-end="1071"><strong data-start="1008" data-end="1022">IP Version</strong> (<code data-start="1024" data-end="1027">4</code>): Internet Protocol version (<code data-start="1057" data-end="1060">4</code> or <code data-start="1064" data-end="1067">6</code>).</p>
</li>
<li data-start="1072" data-end="1135">
<p data-start="1076" data-end="1135"><strong data-start="1076" data-end="1083">TOS</strong> (<code data-start="1085" data-end="1090">0x0</code>): Type‑of‑Service byte from the IP header.</p>
</li>
<li data-start="1136" data-end="1197">
<p data-start="1140" data-end="1197"><strong data-start="1140" data-end="1147">ECN</strong> (blank): Explicit Congestion Notification bits.</p>
</li>
<li data-start="1198" data-end="1269">
<p data-start="1202" data-end="1269"><strong data-start="1202" data-end="1209">TTL</strong> (<code data-start="1211" data-end="1216">238</code> / <code data-start="1219" data-end="1224">127</code>): Time‑to‑Live (IPv4) or Hop Limit (IPv6).</p>
</li>
<li data-start="1270" data-end="1336">
<p data-start="1274" data-end="1336"><strong data-start="1274" data-end="1283">IP ID</strong> (<code data-start="1285" data-end="1292">27873</code> / <code data-start="1295" data-end="1302">21852</code>): Packet identification number.</p>
</li>
<li data-start="1337" data-end="1404">
<p data-start="1341" data-end="1404"><strong data-start="1341" data-end="1360">Fragment Offset</strong> (<code data-start="1362" data-end="1365">0</code>): Position within fragmented packet.</p>
</li>
<li data-start="1405" data-end="1479">
<p data-start="1409" data-end="1479"><strong data-start="1409" data-end="1421">IP Flags</strong> (<code data-start="1423" data-end="1427">DF</code>): IP fragmentation flags (<code data-start="1454" data-end="1458">DF</code>, <code data-start="1460" data-end="1464">MF</code>, or <code data-start="1469" data-end="1475">none</code>).</p>
</li>
<li data-start="1480" data-end="1563">
<p data-start="1484" data-end="1563"><strong data-start="1484" data-end="1499">Protocol ID</strong> (<code data-start="1501" data-end="1504">6</code>): Numeric protocol identifier (e.g., <code data-start="1542" data-end="1545">6</code>=TCP, <code data-start="1551" data-end="1555">17</code>=UDP).</p>
</li>
<li data-start="1564" data-end="1626">
<p data-start="1568" data-end="1626"><strong data-start="1568" data-end="1585">Protocol Text</strong> (<code data-start="1587" data-end="1592">tcp</code>): Human‑readable protocol name.</p>
</li>
<li data-start="1627" data-end="1694">
<p data-start="1631" data-end="1694"><strong data-start="1631" data-end="1648">Packet Length</strong> (<code data-start="1650" data-end="1654">71</code> / <code data-start="1657" data-end="1661">52</code>): Total size of the IP packet.</p>
</li>
<li data-start="1695" data-end="1767">
<p data-start="1699" data-end="1767"><strong data-start="1699" data-end="1712">Source IP</strong> (<code data-start="1714" data-end="1727">3.77.205.84</code> / <code data-start="1730" data-end="1739">Home IP</code>): Originating IP address.</p>
</li>
<li data-start="1768" data-end="1836">
<p data-start="1772" data-end="1836"><strong data-start="1772" data-end="1790">Destination IP</strong> (<code data-start="1792" data-end="1801">Home IP</code> / <code data-start="1804" data-end="1813">1.1.1.1</code>): Target IP address.</p>
</li>
<li data-start="1837" data-end="1909">
<p data-start="1841" data-end="1909"><strong data-start="1841" data-end="1856">Source Port</strong> (<code data-start="1858" data-end="1863">443</code> / <code data-start="1866" data-end="1873">21124</code>): Originating port (for TCP/UDP).</p>
</li>
<li data-start="1910" data-end="1982">
<p data-start="1914" data-end="1982"><strong data-start="1914" data-end="1934">Destination Port</strong> (<code data-start="1936" data-end="1943">52742</code> / <code data-start="1946" data-end="1951">443</code>): Target port (for TCP/UDP).</p>
</li>
<li data-start="1983" data-end="2052">
<p data-start="1987" data-end="2052"><strong data-start="1987" data-end="2002">Data Length</strong> (<code data-start="2004" data-end="2008">31</code> / <code data-start="2011" data-end="2014">0</code>): Payload size (excluding headers).</p>
</li>
<li data-start="2053" data-end="2128">
<p data-start="2057" data-end="2128"><strong data-start="2057" data-end="2070">TCP Flags</strong> (<code data-start="2072" data-end="2076">PA</code> / <code data-start="2079" data-end="2082">S</code>): TCP control flags (e.g., <code data-start="2110" data-end="2113">S</code>, <code data-start="2115" data-end="2119">PA</code>, <code data-start="2121" data-end="2124" data-is-only-node="">F</code>).</p>
</li>
<li data-start="2129" data-end="2199">
<p data-start="2133" data-end="2199"><strong data-start="2133" data-end="2152">Sequence Number</strong> (<code data-start="2154" data-end="2166">4127654128</code> / <code data-start="2169" data-end="2181">2052234833</code>): TCP sequence.</p>
</li>
<li data-start="2200" data-end="2275">
<p data-start="2204" data-end="2275"><strong data-start="2204" data-end="2229">Acknowledgment Number</strong> (<code data-start="2231" data-end="2243">4127654159</code> / blank): TCP acknowledgment.</p>
</li>
<li data-start="2276" data-end="2343">
<p data-start="2280" data-end="2343"><strong data-start="2280" data-end="2295">Window Size</strong> (<code data-start="2297" data-end="2309">2661296198</code> / <code data-start="2312" data-end="2319">64240</code>): TCP receive window.</p>
</li>
<li data-start="2344" data-end="2413">
<p data-start="2348" data-end="2413"><strong data-start="2348" data-end="2366">Urgent Pointer</strong> (<code data-start="2368" data-end="2373">118</code> / blank): Urgent data pointer if set.</p>
</li>
<li data-start="2414" data-end="2502">
<p data-start="2418" data-end="2502"><strong data-start="2418" data-end="2433">TCP Options</strong> (blank / <code data-start="2443" data-end="2474">mss;nop;wscale;nop;nop;sackOK</code>): Negotiated TCP options.</p>
</li>
</ol>
<p data-start="2504" data-end="2621">These fields allow you to reconstruct packet details, rule decisions, and flow context directly from the log entries.</p>
</blockquote>
<p data-start="2504" data-end="2621">In another showcase of poor UXUI decisions, <a href="https://github.com/opnsense/core/issues/6590#issuecomment-1572679573" title="How to find firewall rule numbers in OPNSense" target="_blank" rel="noopener noreferrer">the way to correlate rules and the rule numbers in webGUI is to access an obscure page</a>, one most users will never think to look at. This is somewhat forgivable due to the numbers themselves being non-permanent assignments, based on the last time the system was rebooted/reloaded. But it is suboptimal UX.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb16-2.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb16-2-thumbnail.png" alt="OPNSense Rules part 1" width="768" height="368"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb17.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb17-thumbnail.png" alt="OPNSense Rules part 2" width="768" height="368"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb18.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb18-thumbnail.png" alt="OPNSense Rules part 3" width="768" height="368"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb19.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb19-thumbnail.png" alt="OPNSense Rules part 4" width="768" height="368"></a></figure>
</div></div>
<p data-start="2504" data-end="2621">Unfortunately, rule 2 was fairly incomprehensible, likely due to being a default rule: <code>@2 block drop in log inet all label "02f4bab031b57d1e30553ce08e0ec131"</code></p>
<p data-start="2504" data-end="2621">Rule 68, on the other hand, was <strong>much </strong>more understandable: <code>@68 block drop out log quick on bridge0 inet from any to &lt;Ads_Tracking:843&gt; label "ff197ebab7ec0da7fe008f0f6ffee42b"</code></p>
<p data-start="2504" data-end="2621">So that outbound connection was a (perceived) attempt to connect to an ad/tracking server, successfully showing that my Aliases and rules do work.</p>
<h2 id="mcetoc_1j0842akm15s" data-start="2504" data-end="2621">Filtering Out the Noise</h2>
<p data-start="2504" data-end="2621">Since I wanted to do some amount of inspection of these suspicious IPs, I then needed a way to filter my log for unique IPs. In addition, I would get data on the quantity of those uniques, as well as how many were duplicated.</p>
<p data-start="2504" data-end="2621">To do this, I would use Microsoft Copilot to generate a PowerShell script to filter the data for me. The prompt was as follows:</p>
<blockquote>
<p data-start="2504" data-end="2621">Write me a powershell script that does the following:<br>-reads content of file `filter.log`<br>-reads lines of the following format `2025-06-25T11:06:30-04:00 Informational filterlog 68,,,ff197ebab7ec0da7fe008f0f6ffee42b,bridge0,match,block,out,4,0x0,,127,21852,0,DF,6,tcp,52,Home IP,1.1.1.1,21124,443,0,S,2052234833,,64240,,mss;nop;wscale;nop;nop;sackOK` <br>-counts unique and duplicate IPv4 addresses <br>-identifies unique IPv4 addresses <br>-outputs unique IPv4 address count, duplicate IPv4 address count, and all unique IPv4 addresses to new file `filter-cleaned.log`</p>
</blockquote>
<p data-start="2504" data-end="2621">This was the following output:</p>
<pre class="language-markdown line-numbers"><code># PowerShell Script to Extract and Count IPv4 Addresses

```powershell
# Define input and output files
$inputFile  = 'filter.log'
$outputFile = 'filter-cleaned.log'

# IPv4 regex (0–255 range)
$ipv4Pattern = '\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\b'

# Read all lines, extract every IPv4 match
$allIps = Get-Content $inputFile |
    ForEach-Object {
        [regex]::Matches($_, $ipv4Pattern) |
        ForEach-Object { $_.Value }
    }

# Compute counts
$uniqueIps      = $allIps | Sort-Object | Get-Unique
$uniqueCount    = $uniqueIps.Count
$duplicateCount = $allIps.Count - $uniqueCount

# Prepare header lines
$header = @(
    "Unique IPv4 address count: $uniqueCount"
    "Duplicate IPv4 address count: $duplicateCount"
    ""
    "Unique IPv4 addresses:"
)

# Write header and unique IPs to the output file
$header | Set-Content  $outputFile
$uniqueIps | Add-Content $outputFile
```

---

## How This Works

- The script reads every line from `filter.log` and applies a strict IPv4 regex to find address patterns.  
- All matches are collected into `$allIps`, preserving duplicates.  
- Unique addresses are extracted via `Sort-Object | Get-Unique`.  
- Duplicate count is derived by subtracting the number of unique addresses from total matches.  
- Results (counts + list of unique IPs) are written to `filter-cleaned.log`.

---

## Further Enhancements You Might Consider

- If you need the list of IPs that appear more than once, group `$allIps` with `Group-Object` and filter where `.Count -gt 1`.  
- For very large logs, use `Select-String -Pattern $ipv4Pattern -AllMatches` to stream matches rather than loading the entire file at once.  
- Extend the script to handle IPv6 by adding a second regex and interleaving results.  
- Export the results in CSV or JSON for integration with monitoring tools or dashboards.  </code></pre>
<p>I ran the script and got this confusing result:</p>
<p><code>Unique IPv4 address count: 877</code><br><code>Duplicate IPv4 address count: 11597</code></p>
<p>Believing myself to have only gotten a sample size of 50, I began randomly searching the original log file for random IP on the unique list, only to keep finding them. The mystery was answered when I opened the log file in VS Code, revealing that I had dumped the <strong>entire </strong>list of log entries matching the <code>blocked bridge</code> query. I was, in fact, analyzing the full two or so weeks worth of log entries, not just the 50 entries on display in the webGUI.</p>
<p>To gain more higher level insights, I returned to Copilot and asked it for a new script:</p>
<blockquote>
<p>Write me a powershell script that does the following: <br>-reads content of file `filter.log` <br>-reads lines of the following format `2025-06-25T11:06:30-04:00 Informational filterlog 68,,,ff197ebab7ec0da7fe008f0f6ffee42b,bridge0,match,block,out,4,0x0,,127,21852,0,DF,6,tcp,52,Home IP,1.1.1.1,21124,443,0,S,2052234833,,64240,,mss;nop;wscale;nop;nop;sackOK` <br>-counts the number of `in` and `out` entries <br>-generates a count of how many times unique IPv4 addresses appear in the log <br>-Generates a list of how many unique IPv4 addresses are associated with `in` or `out` entries, or both -outputs all data to new file `filter-statistics.log`</p>
</blockquote>
<p>Here's what Copilot gave me:</p>
<pre class="language-markdown line-numbers"><code>```powershell
# PowerShell Script: filter-statistics.ps1
# Reads filter.log, parses “in”/“out” entries and IPv4s, produces filter-statistics.log

# Set input/output paths
$inputFile   = 'filter.log'
$outputFile  = 'filter-statistics.log'

# Initialize counters &amp; storage
$inCount     = 0
$outCount    = 0
$ipStats     = @{}

# Strict IPv4 regex
$ipv4Pattern = '\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\b'

# Process each line
Get-Content $inputFile | ForEach-Object {
    $line = $_.Trim()
    if ([string]::IsNullOrWhiteSpace($line)) { return }

    # Split on commas
    $fields = $line -split ','

    # Skip malformed or too-short lines
    if ($fields.Count -lt 20) { return }

    # Extract direction and IP
    $direction = $fields[7].ToLower()
    $ip        = $fields[19].Trim()

    # Validate IPv4 format
    if (-not [regex]::IsMatch($ip, $ipv4Pattern)) { return }

    # Tally global in/out counts
    switch ($direction) {
        'in'  { $inCount++ }
        'out' { $outCount++ }
    }

    # Initialize per-IP record if needed
    if (-not $ipStats.ContainsKey($ip)) {
        $ipStats[$ip] = [PSCustomObject]@{
            Total = 0
            In    = 0
            Out   = 0
        }
    }

    # Update per-IP stats
    $ipStats[$ip].Total++
    if ($direction -eq 'in')  { $ipStats[$ip].In++ }
    if ($direction -eq 'out') { $ipStats[$ip].Out++ }
}

# Compute summary numbers
$uniqueIpCount  = $ipStats.Keys.Count
$onlyInCount    = ($ipStats.GetEnumerator() |
                    Where-Object { $_.Value.In  -gt 0 -and $_.Value.Out -eq 0 }).Count
$onlyOutCount   = ($ipStats.GetEnumerator() |
                    Where-Object { $_.Value.Out -gt 0 -and $_.Value.In  -eq 0 }).Count
$bothCount      = ($ipStats.GetEnumerator() |
                    Where-Object { $_.Value.In  -gt 0 -and $_.Value.Out -gt 0 }).Count

# Build output lines
$output = @()
$output += "Total IN entries: $inCount"
$output += "Total OUT entries: $outCount"
$output += "Unique IPv4 addresses: $uniqueIpCount"
$output += "Unique IPv4 addresses only IN: $onlyInCount"
$output += "Unique IPv4 addresses only OUT: $onlyOutCount"
$output += "Unique IPv4 addresses both IN and OUT: $bothCount"
$output += ''
$output += "IPv4 address frequencies (desc):"

# Append per-IP frequencies
$ipStats.GetEnumerator() |
  Sort-Object { $_.Value.Total } -Descending |
  ForEach-Object { $output += ("{0}: {1}" -f $_.Key, $_.Value.Total) }

# Write everything to the output file
$output | Set-Content $outputFile
```

Save this as `filter-statistics.ps1` in the same folder as your `filter.log` file.  
Run it in PowerShell—after completion, `filter-statistics.log` will contain:

- Total counts of “in” and “out” entries  
- Number of unique IPv4 addresses  
- How many unique addresses appear only in, only out, or in both directions  
- A breakdown of each IPv4 address and how many times it occurs</code></pre>
<p>The results were mindboggling:</p>
<p><code>Total IN entries: 10301</code><br><code>Total OUT entries: 108</code><br><code>Unique IPv4 addresses: 643</code><br><code>Unique IPv4 addresses only IN: 641</code><br><code>Unique IPv4 addresses only OUT: 2</code><br><code>Unique IPv4 addresses both IN and OUT: 0</code><br><br><code>IPv4 address frequencies (desc):</code><br><code>216.21.13.15: 840</code><br><code>216.21.13.14: 840</code><br><code>34.107.243.93: 314</code><br><code>52.18.33.33: 242</code><br><code>54.246.231.114: 213</code><br><code>23.197.209.185: 194</code><br><code>23.197.210.93: 167</code><br><code>15.197.177.151: 109</code><br><code>3.33.169.122: 109</code><br><code>67.195.176.151: 108</code><br><code>1.1.1.1: 106</code></p>
<p>First of all, the 840 entries <strong>each </strong>from <code>216.21.13.15</code> and <code>216.21.13.14</code> were quite alarming. The VirusTotal pages for each IP (<a href="https://www.virustotal.com/gui/ip-address/216.21.13.15/detection" title="216.21.13.15 (216.21.12.0/23) Detection Details" target="_blank" rel="noopener noreferrer">216.21.13.15</a>, <a href="https://www.virustotal.com/gui/ip-address/216.21.13.14" title="216.21.13.14 (216.21.12.0/23) Detection Details" target="_blank" rel="noopener noreferrer">216.21.13.14</a>) made it pretty clear that they were associated with malware. I immediately examined the logs, and saw these connections were blocked on the way in. In fact, the only outbound connections that were blocked were to <code>1.1.1.1</code> and a local network address.</p>
<p>It's unclear if there's actual malicious traffic coming from Cloudflare (<code>1.1.1.1</code>), or just malware sometimes routing through Cloudflare. Something similar might be happening with <code>34.107.243.93</code>, which is <a href="https://www.virustotal.com/gui/ip-address/34.107.243.93/community" title="Community Commentary on 34.107.243.93 (34.104.0.0/13)" target="_blank" rel="noopener noreferrer">an IP address that seems to be associated with Firefox</a>, but might be used for any number of malicious activities.</p>
<p>The other addresses are just Amazon or Akami cloud IPs, which means they could be used by anyone for anything at any moment.</p>
<p>Something that's a bit concerning about these two scripts is the fact that the numbers don't line up, despite them taking in the same log, which was not edited between runs. Despite using the same LLM and same conversation, there was randomness in how it interpreted the results to generate a calculation that was slightly different.</p>
<h2 id="mcetoc_1j0842akm15t">Checking Up On Suricata</h2>
<p>After obtaining the log data for the standard firewall, I then proceeded to check the Suricata logs. I didn't expect much from this, because as an IPS, it would really only activate if there was an active threat.</p>
<p>As it turned out, I was right and wrong. I was correct to assume little would be revealed, but I was wrong in that I <strong>did </strong>have two detections.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb14-2.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb14-2-thumbnail.png" alt="OPNSense NTP Denial of Service Scan Detection 1" width="768" height="368"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb15-2.png" data-size="1920x921"><img loading="lazy" src="https://korgano.github.io/media/posts/42/gallery/cyber-proj-tfb15-2-thumbnail.png" alt="OPNSense NTP Denial of Service Scan Detection 2" width="768" height="368"></a></figure>
</div></div>
<p>Curiously, they were both Network Time Protocol DOS scans, which were annoying allowed by Suricata.</p>
<p><a href="https://www.virustotal.com/gui/ip-address/122.228.23.224/community" title="122.228.23.224 (122.228.0.0/19) Community Assessment" target="_blank" rel="noopener noreferrer">Doing a VirusTotal check revealed that this was an actor from the People's Republic of China</a>, which has done this type of thing for at least a year. Interestingly, one member of the VirusTotal community posted about escalating numbers of scans over a period of months, while I had basically two in a two week span.</p>
<p>What this really proved was the value of a multi-layered detection setup. The blocking firewall rules clearly did not include this IP address, but if I hadn't had Suricata, I wouldn't have known this even happened. It would be a total false negative, and if for some reason I got hit with a DDoS attack, I would have no warning or idea what was happening.</p>
<h2 id="mcetoc_1j0842akm15u">What To Do Next</h2>
<p>Normally, there would be a clear path forward, but there's a few factors that complicate things:</p>
<ul>
<li>The inconsistent connectivity makes it hard to update and iterate things in a timely manner.</li>
<li>Figuring out how to revise the <code>wpa_supplicant</code> file to fix the connectivity issues could take a great deal of time.</li>
<li>There's a major OPNSense version update scheduled for the end of the month, which may require me to do a <strong>lot </strong>of reconfiguration if I can't simply do an in-place update.</li>
</ul>
<p>These all provide incentives to <strong>not </strong>engage in another round of data collection and analysis with the Transparent Filtering Bridge.</p>
<p>However, due to the fact that I <strong>do </strong>have the log for the period between these latest two posts, I can experiment with various methods for cleaning and analyzing the data while addressing the other issues.</p>
<h2 id="mcetoc_1j0842akm15v">Takeaways</h2>
<ul>
<li>There are FreeBSD/OPNSense processes that can alter the key files and behaviors required for me to maintain a wireless management connection.</li>
<li>Testing firewall blocking rules aimed at malicious/tracking traffic is more effective over a longer period of time (24+ hours).</li>
<li>In a Small Office/Home Office environment, Suricata IPS detections may be low/nonexistent, even over a prolonged period of time, depending on your configuration.</li>
<li>The pfSense firewall log format is quite complex and hard to analyze for humans, but is incredibly information dense and ideal for machine analysis.</li>
<li>At minimum, in a little over a week and a half, I blocked hundreds of malicious or tracking connection attempts coming into my network, and only two going out.</li>
<li>In the same time span, I received two NTP scans that might be precursors to DOS attacks from actors in the PRC.</li>
<li>The NTP scans were not detected by the standard firewall, proving that multi-layer defenses are key to maintaining good cyber hygiene.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 8.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-80/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-80/</id>
        <media:content url="https://korgano.github.io/media/posts/41/cyber-proj-tfb11-2.png" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2025-06-17T11:13:14-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/41/cyber-proj-tfb11-2.png" alt="OPNSense traffic reporting graphs showing incoming and outgoing traffic on the bridge and WiFi connections." />
                    Sometimes, things take far longer than they should. This project was not intended to take roughly a year to implement.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/41/cyber-proj-tfb11-2.png" class="type:primaryImage" alt="OPNSense traffic reporting graphs showing incoming and outgoing traffic on the bridge and WiFi connections." /></p>
                <p>Sometimes, things take far longer than they should.</p>
<p>This project was not intended to take roughly a year to implement. But <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-70/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 7.0" target="_blank" rel="noopener noreferrer">massive issues with the Intel WiFi driver</a> that shipped in the FreeBSD OS that OPNSense is based on created an impassible progression blocker. Since my plan was to place a transparent filtering bridge between the modem and router of my network by using a miniPC's ethernet ports, I needed to have a management interface via WiFi.</p>
<p>And if the WiFi wasn't reliable, then I could not access the miniPC at a moment's notice for monitoring or configuration adjustment. Even worse, I would have to take down the entire internet connection and bridge configuration, since I would have disconnect the miniPC from the router, connect it to a PC, set a static IP on the ethernet port, and use that as a management interface... then reconfigure that port for use in the bridge.</p>
<p>This was clearly a non-viable solution, but luckily, things changed in my favor.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1itvd7nh328">What Changed?</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tf">Initial Results</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tg">The 25.1.8 Problem</a></li>
<li><a href="#mcetoc_1iv5fa9lq1th">The State Problem</a></li>
<li><a href="#mcetoc_1iv5fa9lq1ti">Uploading Aliases</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tj">Configuring the Transparent Filtering Bridge</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tk">Implementing Suricata IPS</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tl">Validating the Bridge</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tm">Figuring Out Connectivity Issues</a></li>
<li><a href="#mcetoc_1iv5fa9lq1tn">The Next Steps</a></li>
</ul>
</div>
<h2 id="mcetoc_1itvd7nh328">What Changed?</h2>
<p>Two main things:</p>
<ol>
<li><a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=274382" title="Bug 274382 - iwlwifi Invalid TXQ id (FIXED)" target="_blank" rel="noopener noreferrer">A number of updates to the driver in question (<code>iwlwifi</code>)</a>, with the latest being in mid-May 2025.</li>
<li><a href="https://forum.opnsense.org/index.php?topic=47575.0" title="OPNsense 25.1.8 released" target="_blank" rel="noopener noreferrer">OPNSense 25.1.8 integrating a number of FreeBSD commits (which included the <code>iwlwifi</code>) commits.</a></li>
</ol>
<p>With the high probability that the new driver updates would solve the problems and were integrated into OPNSense, I rolled the dice and installed a fresh copy of OPNSense onto the miniPC.</p>
<h2 id="mcetoc_1iv5fa9lq1tf">Initial Results</h2>
<p>Thanks to my prior experience with OPNSense installation, the process went smoothly, although in a somewhat time consuming manner due to the speed of the USB drive installation media.</p>
<p>Having documented the process of installing the Realtek ethernet driver required to enable the miniPC's ethernet ports, I referred to my own past writing to complete that task.</p>
<p>The install media only provided OPNSense 25.1, which had enough of the driver updates to mitigate the usual errors that interfered with WiFi connectivity. However, despite utilizing the console and webGUI, I could not get the miniPC to connect to WiFi network.</p>
<p>So I chose to brute force the connection via the shell, querying Bing Copilot:</p>
<blockquote>
<p>Below are two common methods to have your <code>wpa_supplicant</code> rules execute automatically on boot in OPNsense (which, being FreeBSD‑based, uses the traditional rc system). You can either create a custom rc.d startup script or add the command to your <code>/etc/rc.local</code> file.</p>
<hr>
<p><strong>Method 1: Creating a Custom rc.d Script</strong><br><br>1. Create the Script File<br><br>Open your favorite editor and create a file (for example, <code>/usr/local/etc/rc.d/wpa_supplicant</code>) with the following content. Adjust the interface (here shown as <code>wlan0</code>), driver (if needed), and path to your configuration file:<br><br>   <code>#!/bin/sh</code><br><code>   #</code><br><code>   # PROVIDE: wpa_supplicant</code><br><code>   # REQUIRE: NETWORKING</code><br><code>   # KEYWORD: shutdown</code><br><br><code>   . /etc/rc.subr</code><br><br><code>   name="wpa_supplicant"</code><br><code>   rcvar=wpa_supplicant_enable</code><br><code>   command="/usr/sbin/wpa_supplicant"</code><br><code>   command_args="-B -i wlan0 -c /etc/wpa_supplicant.conf"</code><br><br><code>   load_rc_config $name</code><br><code>   : ${wpa_supplicant_enable:=NO}</code><br><br><code>   run_rc_command "$1"</code><br><br>2. Make the Script Executable</p>
<p>Run the following command to ensure your new script can be executed:<br><br><code>   chmod +x /usr/local/etc/rc.d/wpa_supplicant</code><br><br><br>3. Enable the Service<br><br>Add the following line to <code>/etc/rc.conf.local</code> to tell the system to start your script on boot:<br><br><code>   wpa_supplicant_enable="YES"</code><br><br>4. Test Your Setup<br><br>   Manually start it with:<br><br><code>   /usr/local/etc/rc.d/wpa_supplicant start</code><br><br>   Verify that the process is running (using <code>ps</code> or checking your logs) before performing a reboot.</p>
</blockquote>
<p>With this script, wireless connectivity was achieved once the firewall was disabled. I then initiated an update to get the latest patch.</p>
<h2 id="mcetoc_1iv5fa9lq1tg">The 25.1.8 Problem</h2>
<p>However, once I updated to 25.1.8, I noticed a major issue - there was no IP address associated with the WiFi interface. Rebooting revealed errors related to the firmware for the WiFi card:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb08a.jpg" alt="FreeBSD boot up sequence showing that Intel WiFi iwlwifi firmware was not present." width="3569" height="2734" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08a-xs.jpg 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08a-sm.jpg 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08a-md.jpg 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08a-lg.jpg 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08a-xl.jpg 1600w"></figure>
<p>Looking at the 25.1.8 release notes indicated that this was an intentional omission:</p>
<blockquote>
<p>o src: iwlwififw: remove Intel iwlwifi firmware from src.git</p>
</blockquote>
<p>My initial plan to solve this issue was to simply find a copy of the file from a reputable source, download it, and copy it to the <code>/boot/firmware</code> directory. Unfortunately, anything I downloaded off the internet produced the following error:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb08b.jpg" alt="Downloaded firmware file for Intel WiFi iwlwifi produces &quot;File too small&quot; error on boot." width="3000" height="3064" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08b-xs.jpg 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08b-sm.jpg 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08b-md.jpg 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08b-lg.jpg 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08b-xl.jpg 1600w"></figure>
<p>This forced me to setup Windows Subsystem for Linux (WSL), then clone the repository containing the Intel WiFi firmware, and compile it. The resulting file was 1.45MB, and <strong>that </strong>allowed the WiFi card to boot. (<a href="https://github.com/korgano/iwlwifi-firmware/" title="Compiled versions of Intel WiFi iwlwifi firmware for use in OPNSense/FreeBSD/Linux systems " target="_blank" rel="noopener noreferrer">I have a new Github repo for hosting these files.</a>)</p>
<p>Having regained the WiFi connection, I then had to troubleshoot the connection issue.</p>
<h2 id="mcetoc_1iv5fa9lq1th">The State Problem</h2>
<p>Looking over the final iwlwifi bug report entries pointed me in a new direction for the issues with WiFi connection and the firewall:</p>
<blockquote>
<p>A commit in branch releng/14.3 references this bug:<br><br>URL: https://cgit.FreeBSD.org/src/commit/?id=36174c38f9e3433e7fdb8b2f2923499dff67b2e7<br><br>commit 36174c38f9e3433e7fdb8b2f2923499dff67b2e7<br>Author:     Bjoern A. Zeeb &lt;bz@FreeBSD.org&gt;<br>AuthorDate: 2025-05-12 15:12:39 +0000<br>Commit:     Bjoern A. Zeeb &lt;bz@FreeBSD.org&gt;<br>CommitDate: 2025-05-15 19:13:58 +0000<br><br>    LinuxKPI: 802.11: make sure AUTH frames are not being sent if BSS changed<br><br>    iwlwifi keeps logging 'Invalid TXQ id' even after previous changes to<br>    catch the BSS changed.  The reason for this is that we do not error in<br>    the SCAN -&gt; AUTH path as otherwise we would not have the state machine<br>    get us back to SCAN to clear up firmware state before auth/assoc to the<br>    new BSS.<br><br>    If we are not in synch as net80211 just swapped the iv_bss from under us,<br>    disable the TX queue for the (old) lsta to prevent the AUTH frame sent<br>    from sta_newstate() reaching the driver.  After all we are not trying to<br>    authenticate to that node (sta) anymore.<br><br>    Sponsored by:   The FreeBSD Foundation<br>    PR:             274382<br>    Approved by:    re (cperciva)<br><br>    (cherry picked from commit 16d987fe781780100a31df30b9edd79ebb54f957)<br>    (cherry picked from commit e0692e7bb6e8abcc55a2510dceea5f83e823a827)<br><br> sys/compat/linuxkpi/common/src/linux_80211.c | 24 ++++++++++++++----------<br> 1 file changed, 14 insertions(+), 10 deletions(-)</p>
</blockquote>
<p>The key phrase in there is "the state machine."</p>
<p>What if monitoring the state of the connection was causing the problems? What if it was blocking connections because the driver wasn't updating states properly?</p>
<p>To test this out, I created the following three rules:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb08c.png" alt="OPNSense WiFi interface rules to access router, let in HTTPS, and let out HTTPs." width="1920" height="921" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08c-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08c-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08c-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08c-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08c-xl.png 1600w"></figure>
<p>The first rule would allow in all connections from the gateway router to the firewall. The second would let in HTTPS connections from any device on the network the WiFi interface was connected to. The third would let out HTTPS connections to that network.</p>
<p>These rules were configured through the webGUI on one of the ethernet interfaces, allowing me to re-enable the firewall and iterate through various settings.</p>
<p>Implementing the gateway router rule allowed me to ping the miniPC and ping other hosts from the miniPC, along with ensure that the router received a response to its queries. This did not resolve issues with the webGUI, but at least resolved issues regarding general connectivity.</p>
<p>The HTTPS in rule did not immediately provide connectivity, so I began experimenting with the states.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb08d.png" alt="OPNSense rule page help for setting states." width="1599" height="474" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08d-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08d-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08d-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08d-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb08d-xl.png 1600w"></figure>
<p>Since the initial <code>Keep state</code> option was causing the issues, I chose to use the <code>Sloppy state</code> option next. This did not allow for webGUI access over the WiFi connection either. For whatever reason, <code>None</code> was the proper value, and that allowed me to consistently connect to the webGUI.</p>
<p>Unfortunately, there was a caveat to this, which I'll get into later.</p>
<h2 id="mcetoc_1iv5fa9lq1ti">Uploading Aliases</h2>
<p><a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-60/" target="_blank" rel="noopener noreferrer">The last two articles I did regarding this project</a> <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-70/" target="_blank" rel="noopener noreferrer">showed how to create Alias lists for blocking purposes</a>.</p>
<p>Following the steps outlined in those posts, I generated updated lists of IPs to block on the bridge, and uploaded them to OPNSense. I vetted them to ensure that no false positives were being generated by the Python scripts.</p>
<p>For some reason, there was a certain subset of IP addresses with an <code>8.#.#.#</code> structure that OPNSense refused to accept as valid IPs. These prevented me from uploading Aliases until they were removed.</p>
<h2 id="mcetoc_1iv5fa9lq1tj">Configuring the Transparent Filtering Bridge</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/Rb4vlN_Hf-U" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>With network connectivity secured and the aliases uploaded, setting up the transparent filtering bridge was simple and straightforward, thanks to the above tutorial and past experience.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb10.png" alt="Transparent Filtering Bridge configuration with multiple aliases, blocking potential threat traffic from entering or exiting the network." width="1920" height="918" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb10-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb10-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb10-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb10-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb10-xl.png 1600w"></figure>
<p>Using the aliases allowed me to block large swathes of IP addresses without much issue. The <code>Allow All</code> rule at the bottom ensures that all non-rule matching traffic goes through, allowing for proper connectivity.</p>
<p>With this setup, I moved on to provisioning Suricata IPS. </p>
<h2 id="mcetoc_1iv5fa9lq1tk">Implementing Suricata IPS</h2>
<p>Thanks to the aforementioned Transparent Filtering Bridge tutorial, configuring Suricata was also simple.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb09.png" alt="Suricata rule options for TP-LINK Devices." width="1920" height="894" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09-xl.png 1600w"></figure>
<p>With the wide range of rule lists available, it was somewhat challenging to figure out the best sets for my use case. Thankfully, I found a Proofpoint document explaining the <code>Emerging Threat</code> list categories, which allowed me to pick a smaller subset of the full ruleset list.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb09a.png" alt="OPNSense Suricata IPS policies set for use on the Transparent Filtering Bridge." width="1920" height="918" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09a-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09a-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09a-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09a-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb09a-xl.png 1600w"></figure>
<p>OPNSense's implementation of Suricata includes <code>Policies</code>, which allow users to simplify the detection rule process. For example, the first policy on the list applies to malicious traffic targeting TP-Link routers, by using the <code>affected_product</code> field, which is just one of at least 20 different fields that you can use to fine tune a set of rules to match your systems.</p>
<p>To start off defending a home network, I decided to focus on a few primary attack vectors:</p>
<ol>
<li>The router.</li>
<li>Crypto-miners (in case any had gotten on to the network).</li>
<li>DNS tunneling (an exfiltration vector I find interesting).</li>
<li>Phishing (because it's ubiquitious.</li>
<li>JavaScript attacks (because JS is a blight).</li>
</ol>
<p>In addition, I implemented some pure monitoring alerts based on OPNSense's own rule lists, just to test that functionality and see if I needed to add more policies to address media sharing and messaging traffic.</p>
<h2 id="mcetoc_1iv5fa9lq1tl">Validating the Bridge</h2>
<p>With the bridge and Suricata configured, it was time to validate that traffic was coming in and out of the network.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb11.png" alt="OPNSense traffic reporting graphs showing incoming and outgoing traffic on the bridge and WiFi connections." width="1920" height="921" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb11-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb11-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb11-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb11-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb11-xl.png 1600w"></figure>
<p>Understandably, there was a lot more total traffic going in than there was coming out, with the exception being the WiFi interface, which was pumping out a decent amount of traffic to my computer as it updated the graphs every 2 seconds.</p>
<p>To get more information, I decided to examine the Top Talkers tab:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb12-4.png" alt="OPNSense Top Talkers, showing incoming and outgoing traffic statistics." width="1920" height="921" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb12-4-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb12-4-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb12-4-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb12-4-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb12-4-xl.png 1600w"></figure>
<p>While none of the traffic was particularly noteworthy in terms of totals in or out, there were some interesting IP addresses, which will bear exploration in the future. </p>
<h2 id="mcetoc_1iv5fa9lq1tm">Figuring Out Connectivity Issues</h2>
<p>One persistent issue with the WiFi connection was that, despite finally having a management connection through the router to any device I needed, the miniPC would eventually become inaccessible after some amount of time.</p>
<p>Unlike earlier iterations of the problem, there was a simple solution - reloading the various services via the console. Once that was done, the WiFi interface would be reenabled.</p>
<p>However, that required physical access to the miniPC and a keyboard. Since this seemed to be a recurring issue, I needed an automated way to address the issue. Luckily, OPNSense has built in provisions for `cron` jobs, so I configured a job to execute every 6 hours, starting at midnight, as a test. This job would restart the WiFi interface, which would hopefully resolve the connectivity issue.</p>
<p>Since the time period between 6AM and 6PM is the primary stretch of time when I would need to access the management interface, having only 4 restarts in a day would be sufficient as a test. If the time outs occurred on a consistently rapid basis, I could then adjust the period between restarts down as needed.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/41/cyber-proj-tfb13.png" alt="OPNSense log showing the WiFi connection failing within an hour of one reboot, then rebooting at noon to restore connectivity." width="1920" height="921" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb13-xs.png 384w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb13-sm.png 600w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb13-md.png 768w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb13-lg.png 1200w ,https://korgano.github.io/media/posts/41/responsive/cyber-proj-tfb13-xl.png 1600w"></figure>
<p>Based on the above log, what is happening is that the "Ethernet detached event" is when the interface loses connectivity for whatever reason, then rebooting the interface updates the configuration to what it should be.</p>
<p>Maintaining an active (or even semi-active) session seems to prevent the Ethernet detached event, which means even a browser that that's suspended all day might be able to solve the problem.</p>
<h2 id="mcetoc_1iv5fa9lq1tn">The Next Steps</h2>
<p>With all the major technical concerns addressed, it's time to stress test the bridge. At least a week and a half of standard network traffic should hopefully be enough to put the bridge and the miniPC through their paces. Once that's done, I'll examine the logs and see if I need to establish new rules to either test detections or block traffic.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Nmap 7.80 vs 7.97</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-nmap-780-vs-797/"/>
        <id>https://korgano.github.io/cybersecurity-project-nmap-780-vs-797/</id>
        <media:content url="https://korgano.github.io/media/posts/40/nmap-03-2.png" medium="image" />
            <category term="Tech Projects"/>
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2025-06-09T11:48:45-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/40/nmap-03-2.png" alt="Nmap 7.97 ARP Ping Scan produces a list of host names and associated IP/MAC addresses." />
                    In the past few months, the venerable stalwart of the network scanning toolkit, Nmap, underwent a major version change from&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/40/nmap-03-2.png" class="type:primaryImage" alt="Nmap 7.97 ARP Ping Scan produces a list of host names and associated IP/MAC addresses." /></p>
                <p>In the past few months, the venerable stalwart of the network scanning toolkit, Nmap, underwent a major version change from 7.80 to 7.97.</p>
<p>To compare these two versions of the software, I decided to do a network audit and compare the results via Diffchecker.com. To generate the nmap query, I consulted the Nmap documentation and Copilot, which resulted in this query:</p>
<blockquote>
<p><code>nmap -sV -T4 -O -A -v -oX network_inventory.xml</code><br><br>This command tells Nmap to perform a very detailed and aggressive scan of a target network. Here’s what each part does:<br><br>-sV: This option tells Nmap to detect service versions. In other words, it examines the open ports to figure out which software (and the version of that software) is running on each one.<br><br>-T4: This adjusts the speed of the scan by using a faster timing template. It’s designed for networks that are reliable, making the scan quicker while still aiming to be thorough.<br><br>-O: With this flag, Nmap attempts to detect the operating system running on the target machine(s) by analyzing characteristics of the responses.<br><br>-A: This is an all-in-one aggressive scan option. It not only includes OS detection and version detection but also runs additional scripts and conducts a traceroute to gather even more information about the network.<br><br>-v: The verbose option makes the output more detailed, giving you step-by-step feedback on what Nmap is finding as it runs.<br><br>-oX network_inventory.xml: Finally, this tells Nmap to save all the scan results in XML format in a file named “network_inventory.xml”, which can be useful for further analysis or reporting.<br><br>In plain terms, this command thoroughly examines a network to identify open ports, the services running (and their versions), the operating system of the target machines, and additional network details—all while providing detailed output and saving the results in an XML file for later review.</p>
</blockquote>
<p>As a control, the same query was used both times. Any differences will be due to time, network configuration changes (different IP assigments), or changes to Nmap behavior.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1itaqni492">Off the Top: Formatting Changes</a></li>
<li><a href="#mcetoc_1itb9p5pp7l">ARP Ping Scan is More Useful</a></li>
<li><a href="#mcetoc_1itb9p5pp7m">SYN Stealth Scan Has More Ports</a></li>
<li><a href="#mcetoc_1itb9p5pp7n">ARP Response is More Detailed</a></li>
<li><a href="#mcetoc_1itb9p5pp7o">Better, Concise HTTP Service Reporting</a></li>
</ul>
</div>
<h2 id="mcetoc_1itaqni492">Off the Top: Formatting Changes</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-01.png" alt="Initiation of Nmap scan, with query and scan information." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-01-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-01-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-01-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-01-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-01-xl.png 1600w"></figure>
<p>The start of the scan output is basically identical, aside from the obvious date and version number differences.</p>
<p>However, it is interesting to note the shift in date formatting, from <code>0#</code> to <code>#</code>. This causes a subtle, but noticeable shift in how the Nmap query is presented.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-02.png" alt="Nmap 7.97 has a shorter list of service ports being scanned." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-02-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-02-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-02-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-02-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-02-xl.png 1600w"></figure>
<p>Oddly, the scan of TCP services for the newer version was shorter, despite covering the same number of services (1000). Looking through the scan revealed the point where a formatting change affected the list's length:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-02a.png" alt="The point where Nmap 7.80 and 7.97 service numbers change." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-02a-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-02a-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-02a-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-02a-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-02a-xl.png 1600w"></figure>
<p>As far as I can determine, changing a range from <code>3005-3007</code> to <code>3005-3006</code> caused a wrapping change that partly compacted the list, and shifted up the end by one line.</p>
<h2 id="mcetoc_1itb9p5pp7l">ARP Ping Scan is More Useful</h2>
<p>One massive change is the utility of the base ARP Ping Scan function:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-03.png" alt="Nmap 7.97 ARP Ping Scan produces a list of host names and associated IP/MAC addresses." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-03-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-03-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-03-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-03-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-03-xl.png 1600w"></figure>
<p>Nmap 7.97 (on the right) has something that used to be called on a separate command (<code>-R</code>): hostname resolution. This association of IP/MAC addresses with a hardware identifier early in the results is especially useful, given how long a scan output might be.</p>
<p>For example, the PDF version of the Diffchecker comparison of the two scan results is <strong>263 </strong>results, and this is with a non-detailed (but verbose) scan.</p>
<p>The inclusion of the hostname resolutions in the output is less useful for people interacting with the Zenmap GUI, but for those who only interact with the Nmap command line interface (CLI) tool and its output, it is a major quality of life improvement.</p>
<h2 id="mcetoc_1itb9p5pp7m">SYN Stealth Scan Has More Ports</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-04.png" alt="Nmap 7.80 Syn Stealth Scan checks 13000 ports." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-04-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-04-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-04-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-04-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-04-xl.png 1600w"></figure>
<p>Another change between the two versions of Nmap is how long it takes to conduct a Syn Stealth scan. In 7.80, it only takes two progress reports to complete the scan. In 7.97, it takes <strong>five</strong>.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-04b.png" alt="Nmap 7.97 Syn Stealth scan checks 15000 ports." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-04b-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-04b-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-04b-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-04b-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-04b-xl.png 1600w"></figure>
<p>This seems related to the 2000 port increase from 7.80 to 7.97, although it is odd that 7.97 reports going from 88 remaining ports(?) to 106 at one point, indicating a possible bug.</p>
<h2 id="mcetoc_1itb9p5pp7n">ARP Response is More Detailed</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-05.png" alt="Nmap ARP Response in 7.97 (right) is more detailed than 7.80 (left), including vendor name and reset reasons." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-05-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-05-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-05-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-05-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-05-xl.png 1600w"></figure>
<p>Another subtle improvement in the ARP response in 7.97 reporting for individual devices is the inclusion of a vendor ID.</p>
<p>This is most useful for identifying network devices, as the Network Interface Card will have a higher probability of reporting the name of the device's vendor. For other devices, such as computers, it may report the name of the network device vendor, which does not match the manufacturer/vendor name on the physical device. For example, a PC with an Intel wireless network card may be an Intel device... or a laptop from any number of vendors with an AMD processor and an Intel WiFi card.</p>
<p>The ARP response in 7.97 also goes through the full list of TCP ports that trigger a reset in the scan. This is valuable for an audit or when you want to understand the ports used by this specific scan, but it does bloat the size of the report.</p>
<h2 id="mcetoc_1itb9p5pp7o">Better, Concise HTTP Service Reporting</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-06.png" alt="Nmap 7.97 HTTP service report delivers a concise report on OS, device type, and method, while 7.80 dumps HTML content." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-06-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-06-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-06-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-06-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-06-xl.png 1600w"></figure>
<p>HTTP service reporting is much improved in 7.97, and is much more concise, but this seems to depend on the device and/or service in question. For example, the above image clearly shows that services on OpenWRT devices generate a condensed output of essential details of the device.</p>
<p>However, for other devices, like the Raspberry Pi in this next image, there is still a great deal of HTTP scraped data:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/40/nmap-07.png" alt="Beginning of Nmap HTTP scraping for Raspberry Pi in versions 7.80 and 7.97." width="1513" height="730" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/40/responsive/nmap-07-xs.png 384w ,https://korgano.github.io/media/posts/40/responsive/nmap-07-sm.png 600w ,https://korgano.github.io/media/posts/40/responsive/nmap-07-md.png 768w ,https://korgano.github.io/media/posts/40/responsive/nmap-07-lg.png 1200w ,https://korgano.github.io/media/posts/40/responsive/nmap-07-xl.png 1600w"></figure>
<p>The main difference is that version 7.97's HTTP scraping is either much more efficient, or has been reworked to max out at a certain length. Lines 3505 to 3608 constitute the entirety of 7.97's output, but for 7.80, the same device's output is from lines 3449 to 3462. That's 3 lines versus 13, or a 76.92% decrease.</p>
<p>While this might be a downgrade for penetration testers and other exploitation focused roles, this is certainly an improvement for people who are just using Nmap to catalog what is on the network.</p>
<p>Overall, this simple test scenario merely scrapes the surface of the improvements made in Nmap 7.97, but it gives a good starting basis of comparison.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Tech Thoughts: Computex 2025</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-tech-thoughts-computex-2025/"/>
        <id>https://korgano.github.io/quick-tech-thoughts-computex-2025/</id>
        <media:content url="https://korgano.github.io/media/posts/39/05rNRArkzOxhgSDWsZqRneF-1.webp" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="PC Hardware"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2025-05-20T09:10:40-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/39/05rNRArkzOxhgSDWsZqRneF-1.webp" alt="Computex 2025 Key Art" />
                    Computex 2025 has just wrapped up, showcasing all sorts of computing related hardware and, of course, lots of AI related&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/39/05rNRArkzOxhgSDWsZqRneF-1.webp" class="type:primaryImage" alt="Computex 2025 Key Art" /></p>
                <p>Computex 2025 has just wrapped up, showcasing all sorts of computing related hardware and, of course, lots of AI related things.</p>
<p>This year had some odd surprises, so let's jump into it.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1irv4itv2lp">Intel Surprise #1: Budget AI GPUs for Home Labbers?</a></li>
<li><a href="#mcetoc_1irv4itv2lq">Intel Surprise #2: $500 24 GB GPUs</a></li>
<li><a href="#mcetoc_1irv4itv2lr">Intel Surprise #3: A Sub-$1000 Dual GPU</a></li>
<li><a href="#mcetoc_1irv4itv2ls">The Intel Hold Up</a></li>
<li><a href="#mcetoc_1irv4itv2lt">AMD Getting Serious About ROCM on Windows</a></li>
</ul>
</div>
<h2 id="mcetoc_1irv4itv2lp">Intel Surprise #1: Budget AI GPUs for Home Labbers?</h2>
<figure class="post__image"><img loading="lazy"  src="https://cdn.videocardz.com/1/2025/05/INTEL-ARC-PRO-B50-B60-4.jpg" alt="Intel Arc Pro B50 GOU specifications, design features, and software compatibility." width="2560" height="1440" data-is-external-image="true"></figure>
<p>Intel's Graphics Card Division has not had a good time, to put it mildly.</p>
<p>While people were excited for the B580 due to its mix of features, performance, and purported low price point, Intel basically couldn't supply the thing at the price people wanted. The B570, a cutdown version of the B580 with reductions in specs and MSRP, basically made no impact. Driver updates have been few and far between, and support for their own software features has been pretty minimal.</p>
<p>So it was shocking to see Intel announce the B50, a half-height, half-length GPU that only uses 70 watts of power.</p>
<p>Why?</p>
<p>Because this is basically a card for budget home labbers. This is the kind of card you can buy and slap into a cheap Dell/HP/Lenovo OEM desktop, as seen below (in gaming <strong>and </strong>home lab contexts):</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/XCWsUiJZiiA" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/Ir53nheghcI" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>These typically cheap, used systems tend to have a few constraints when it comes to provisioning them with new hardware:</p>
<ul>
<li>They cannot support full width GPUs (or any other PCIe cards, for that matter).</li>
<li>The front to back length of the case is typically much shorter than most PC cases.</li>
<li>They use TFX power supplies with low wattages and limited power connectors.</li>
<li>Many designs use proprietary motherboards and other components, constraining upgrades.</li>
</ul>
<p>The B50 meets all the requirements to fit in these systems:</p>
<ul>
<li>Half-width.</li>
<li>Compact length.</li>
<li>70 watt power draw can be supplied through the motherboard PCIe slot.</li>
</ul>
<p>The main constraints on the B50 are:</p>
<ul>
<li>Clearance - some of these compact towers do not provide two PCIe slots worth of clearance from the motherboard slot to the power supply.</li>
<li>Price - the B50 has an MSRP of $300, which may or may not be realistic or achievable on release day.</li>
<li>Noise - it has a blower fan, which typically have a noise profile that's worse than the typical fan arrangements on other graphics cards.</li>
</ul>
<p>In exchange, you are getting a GPU that can provide over 3x the TOPs of the best price/performance APUs AMD produces (Strix/Gorgon Point), <strong>and </strong>16GB of VRAM. It's pretty hard to beat this combination if you're on a budget.</p>
<h2 id="mcetoc_1irv4itv2lq">Intel Surprise #2: $500 24 GB GPUs</h2>
<figure class="post__image"><img loading="lazy"  src="https://cdn.videocardz.com/1/2025/05/INTEL-ARC-PRO-B50-B60-7.jpg" alt="Intel Arc Pro B60 specifications, design features, and software compatibility." width="2560" height="1440" data-is-external-image="true"></figure>
<p>The next surprise wasn't necessarily the fact that Intel was producing a 24GB professional card. That had leaked weeks prior to Computex.</p>
<p>What <strong>was </strong>surprising was the price point: $500.</p>
<p>However, this makes sense when we factor in a few things:</p>
<ul>
<li>According to analysts like Moore's Law is Dead, GDDR6 chip prices may be as low as $6 per chip.</li>
<li>The B580 already had 12GB of VRAM.</li>
<li>Clamshelling - mounting VRAM chips to the rear of the printed circuit board (PCB) - has become a more common technique for increasing VRAM capacity in GPUs.</li>
<li>The B580's low MSRP came at the cost of slashing margins as much as possible.</li>
</ul>
<p>On a technical level, $500 is almost certainly a price where Intel and its add-in board (AIB) partners can make a sustainable amount of profit. From a pure business angle, it's surprising that Intel didn't try to charge <strong>more </strong>for 24GB of VRAM, given how its competitors (AMD and Nvidia) handle segmentation.</p>
<p>That said, AI performance is not necessarily this card's strong suite. The performance gains over the B50 are not great, at least going by the TOPs figure. However, what you do get is more VRAM, and therefore a bigger context window, or interaction memory, for an AI. </p>
<h2 id="mcetoc_1irv4itv2lr">Intel Surprise #3: A Sub-$1000 Dual GPU</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/Y8MWbPBP9i0" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>It's not everyday when you get to see old technological concepts return from the dead.</p>
<p>Roughly 15 years ago, GPU AIBs gave up on the idea of combining two GPUs into a single graphics card. There were just too many hurdles in terms of synchronizing the GPUs and their outputs, causing limited software support for those use-cases. Then MaxSun, an Intel AIB, revived it for the B60 professional cards.</p>
<p>Let's get the drawbacks out of the way:</p>
<ul>
<li>This card requires a motherboard that can support PCIe bifurcation - splitting the interface from x16 to x8/x8.</li>
<li>The operating system and AI software will see it as two GPUs.</li>
<li>It requires using Nvidia's infamous 12 volt High Power connector, which has notorious melting issues.</li>
</ul>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/Y36LMS5y34A" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>So, what would anyone use this for? Well, besides running gigantic models or training workloads by splitting the load across two GPUs, the most obvious use case is running two models at the same time with large context windows. For example, running a coding LLM and an image generation model at the same time.</p>
<p>A particularly interesting cybersecurity application is running a generative model alongside Cisco Foundation AI's <a href="https://huggingface.co/fdtn-ai/Foundation-Sec-8B" title="Foundation-Sec-8B - Model Card">Foundation-Sec-8B</a> model. What is Foundation-Sec-8B?</p>
<blockquote>
<p>Foundation-Sec-8B (Llama-3.1-FoundationAI-SecurityLLM-base-8B) is an open-weight, 8-billion parameter base language model specialized for cybersecurity applications. It extends Llama-3.1-8B model through continued pretraining on a curated corpus of cybersecurity-specific text, including threat intelligence reports, vulnerability databases, incident response documentation, and security standards. It has been trained to understand security concepts, terminology, and practices across multiple security domains. The model is designed to serve as a domain-adapted base model for use in applications such as threat detection, vulnerability assessment, security automation, and attack simulation. Foundation-Sec-8B enables organizations to build AI-driven security tools that can be deployed locally, reducing dependency on cloud-based AI services while maintaining high performance on security-related tasks.</p>
</blockquote>
<p>With this graphics card, assuming proper configuration, it would be possible to create an agentic workflow where code is generated in one model, then passed to Foundation-Sec for vulnerability assessment, then return the vulnerability report to the coding model. A 24GB VRAM buffer would be an appropriate size for Foundation-Sec (~16.2 GB)</p>
<p>It should be noted that this particular configuration makes the most sense if you are budget/space/slot constrained and can't afford a system with multiple B60 GPUs.</p>
<p>Or if you have a motherboard with a <strong>lot </strong>of PCIe 5.0x16 slots, and want to populate every one of them with as many GPUs as possible.</p>
<h2 id="mcetoc_1irv4itv2ls">The Intel Hold Up</h2>
<p>The primary road block for these products is the fact that they will be releasing as integrated parts of professional products first. In fact, one could say they're a pipe cleaner for the drivers prior to the consumer release.</p>
<p>With a scheduled professional release in Q3 2025, and consumer release in Q4 2025, barring delays, it could be <strong>many </strong>months before this hardware becomes available, although it would not surprise me if the B50 made its way to consumers sooner than expected.</p>
<h2 id="mcetoc_1irv4itv2lt">AMD Getting Serious About ROCM on Windows</h2>
<p>It's hard to imagine now, but 15 years ago, AMD was a company on the verge of death.</p>
<p>A bad bet on CPU architecture for the Bulldozer/Piledriver series of CPUs left them in a precarious financial position. While they were able to star clawing their way back to success with their Ryzen CPU architecture in 2017, that bad decision meant that they were at a massive disadvantage against Nvidia. During this period, Nvidia laid down the foundation of its CUDA compute ecosystem, which currently dominates the AI landscape.</p>
<p>Never the less, AMD has an open-source software stack for accelerated computing, called ROCm (Radeon Open Compute Platform). This stack has been largely focused on data center and workstations, so it has high Linux hardware compatibility, but very poor Windows compatibility. This is a pretty big issue, because AMD's own hardware cannot run CUDA - and the conversion layer, ZLUDA, is a pain to install and troubleshoot. </p>
<figure class="post__image"><img loading="lazy"  src="https://cdn.videocardz.com/1/2025/05/AMD-ROCM-COMPUTEX-4.jpg" alt="AMD ROCm Windows Support Timeline" width="1100" height="520" data-is-external-image="true"></figure>
<p>AMD announced official Windows support at Computex 2025, with specific frameworks either being supported in July (ONNX-EP) or sometime in Q3 (PyTorch). They also enabled support on RDNA 4 graphics cards, which will be relevant a little bit later. Linux support is also expanding to Ubuntu and Red Hat EPEL in the back half of 2025.</p>
<h2>AMD Launches a 16GB GPU for $350</h2>
<figure class="post__image"><img loading="lazy"  src="https://cdn.videocardz.com/1/2025/05/RADEON-RX-9060XT-4.jpg" alt="AMD slide showing price, VRAM amounts, and release date for RX 9060 XT graphics cards." width="1200" height="646" data-is-external-image="true"></figure>
<p>As if timed to take the wind out of Intel's sails, AMD announced a new (but known well beforehand) GPU with 16GB VRAM at $350.</p>
<p>(There is also an 8GB version at $300, but literally no one but the most desperate should be paying that much for an 8GB card in 2025.)</p>
<p>Setting aside whether the $350 price will stick, what the RX 9060 XT offers verses the B50 is a mixed set of features:</p>
<ul>
<li>16GB of VRAM.</li>
<li>ROCm acceleration support.</li>
<li>Up to 182 watt power draw.</li>
<li>Release date inside of 2 weeks.</li>
</ul>
<p>The interesting thing with RDNA 4, and AMD GPUs in general, is that despite ROCm not being available on Windows, it is <strong>not </strong>necessary for decent performance in text LLM inferencing tasks. Many chat interfaces rely on Llama, an open source inferencing software library. The library has support for a variety of APIs and frameworks, including Vulkan (an open-source graphics API). Meaning that if someone only wanted to experiment with text only Generative AI, the 9060 XT (16GB) might be a decent budget option in the current market.</p>
<h2>The TP-Link Ban Idea Returns; Still No Solution to the Obvious Consequences</h2>
<p>This is something that I was keeping an eye on in January, <a href="https://korgano.github.io/quick-cyber-thoughts-ces-2025/" title="Quick Cyber Thoughts: CES 2025 Aftermath" target="_blank" rel="noopener noreferrer">in the lead up to CES 2025</a>, and has resurfaced after a months long hibernation:</p>
<blockquote>
<p>A group of Republican lawmakers are urging the Trump administration to ban sales of <a href="https://www.pcmag.com/brands/tp-link" target="_self">TP-Link</a> networking products, including the company’s popular <a href="https://www.pcmag.com/picks/the-best-wireless-routers" target="_self">Wi-Fi routers</a>. </p>
<p>The Commerce, Defense, and Justice Departments have reportedly been <a href="https://www.pcmag.com/news/us-considers-banning-tp-link-routers-over-security-concerns" target="_self">investigating TP-Link</a> for national security risks. On Wednesday, the lawmakers—including 12 GOP senators—wrote to the Commerce Department to voice support for its investigation, and called on the White House to block further sales of TP-Link products in the US. </p>
<p><a href="https://www.pcmag.com/news/tp-link-accused-of-keeping-router-prices-low-to-help-china-conduct-cyberattacks">-https://www.pcmag.com/news/tp-link-accused-of-keeping-router-prices-low-to-help-china-conduct-cyberattacks</a></p>
</blockquote>
<p>Basically, <a href="https://www.cotton.senate.gov/imo/media/doc/tplinkfinal.pdf" title="TP-Link Letter - Office of Tom Cotton" target="_blank" rel="noopener noreferrer">lawmakers have reasonable and understandable concerns that TP-Link has monopolized a huge portion of the Small Office-Home Office (SOHO) router market, and may be a weak point in America's internet infrastructure</a>.</p>
<p>I have no problem with the argument or the sentiment. The problem is that there's also no sign of thought about what happens <strong>after </strong>the requested investigation. And I mean from both the government and private sector. This is not particularly surprising from the government, given all the strife lately, but it is concerning that router manufacturers don't seem to be rising to the challenge of filling the void that would be caused by TP-Link routers being outright banned by the US government.</p>
<p>Given the supply disruptions we've seen due to the Trump administration's use of tariffs as a negotiation tool, it's highly likely that if router manufacturers don't start a gradual increase in supply, there'll be a painful run on routers if the TP-Link ban goes through.</p>
<p>Of course, the best solution would be providing a simple, effective way to replace the firmware on these devices with up-to-date versions of OpenWRT, a router operating system. Unfortunately, with only a fraction of TP-Link devices currently supported, it looks like a lot of Americans will be paying an unforeseen price for their past IT equipment choices.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Cyber Thoughts: Absolute Zero Reasoning</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-absolute-zero-reasoning/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-absolute-zero-reasoning/</id>
        <media:content url="https://korgano.github.io/media/posts/38/absolute-zero-uhoh.png" medium="image" />

        <updated>2025-05-15T13:30:27-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/38/absolute-zero-uhoh.png" alt="Absolute Zero Reasoner – Llama3.1-8B “Uh-oh Moment.” This example highlights an unexpected and potentially unsafe reasoning chain generated by the Absolute Zero Reasoner–Llama3.1-8B model during training. Although the paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors." />
                    No, this isn't a joke about/reference to vibe coders. Instead, it's a new method of training reasoning AI: What is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/38/absolute-zero-uhoh.png" class="type:primaryImage" alt="Absolute Zero Reasoner – Llama3.1-8B “Uh-oh Moment.” This example highlights an unexpected and potentially unsafe reasoning chain generated by the Absolute Zero Reasoner–Llama3.1-8B model during training. Although the paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors." /></p>
                <p>No, this isn't a joke about/reference to vibe coders.</p>
<p>Instead, it's a new method of training reasoning AI:</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/CqdqZNqljdI" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>What is it? Well, it just could be the thing all the AI safety people have been warning about.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1irahtd8o1">How it Works</a></li>
<li><a href="#mcetoc_1iraln3ch2j">The Key Takeaways</a></li>
</ul>
</div>
<h2 id="mcetoc_1irahtd8o1">How it Works</h2>
<p>Absolute Zero Reasoning, as explained by its creators, is the following:</p>
<blockquote>
<p><span id="S1.p2.1.1" class="ltx_text">To this end, we propose </span><em id="S1.p2.1.2" class="ltx_emph ltx_font_italic">“Absolute Zero”</em><span id="S1.p2.1.3" class="ltx_text">, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking </span><cite class="ltx_cite ltx_citemacro_citep"><span id="S1.p2.1.4.1" class="ltx_text">(</span><span class="ltx_text">Silver et al.</span><span id="S1.p2.1.5.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib56" title=""><span class="ltx_text">2017</span></a>; <span class="ltx_text">Chen et al.</span><span id="S1.p2.1.5.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib4" title=""><span class="ltx_text">2025</span></a>; <a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib5" title=""><span class="ltx_text">2024</span></a><span id="S1.p2.1.6.3" class="ltx_text">)</span></cite><span id="S1.p2.1.7" class="ltx_text">, the </span><em id="S1.p2.1.8" class="ltx_emph ltx_font_italic">Absolute Zero</em><span id="S1.p2.1.9" class="ltx_text"> paradigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models </span><cite class="ltx_cite ltx_citemacro_citep"><span id="S1.p2.1.10.1" class="ltx_text">(</span><span class="ltx_text">Hughes et al.</span><span id="S1.p2.1.11.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib25" title=""><span class="ltx_text">2024</span></a><span id="S1.p2.1.12.3" class="ltx_text">)</span></cite><span id="S1.p2.1.13" class="ltx_text">. Similar to AlphaZero </span><cite class="ltx_cite ltx_citemacro_citep"><span id="S1.p2.1.14.1" class="ltx_text">(</span><span class="ltx_text">Silver et al.</span><span id="S1.p2.1.15.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib56" title=""><span class="ltx_text">2017</span></a><span id="S1.p2.1.16.3" class="ltx_text">)</span></cite><span id="S1.p2.1.17" class="ltx_text">, which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.</span></p>
<p>-Zhao, et al, <a href="https://arxiv.org/html/2505.03335v2">https://arxiv.org/html/2505.03335v2</a></p>
</blockquote>
<p>In plain English, Absolute Zero Reasoning is a training method where an LLM creates a coding or mathematics challenge that's calibrated to be challenging, then uses certain functions in the Python environment to validate the results. Successes and failures train the LLM as it iterates through the tasks, improving it capabilities through the use of three methods of reasoning.</p>
<h2 id="mcetoc_1iraln3ch2j">The Key Takeaways</h2>
<p>Helpfully, the paper has a summary of the key findings of this research:</p>
<blockquote>
<p><strong>• </strong><strong>Code priors amplify reasoning.</strong><span id="S1.I1.i1.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><strong> </strong>The base </span><span id="S1.I1.i1.p1.1.3" class="ltx_text ltx_font_typewriter" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Qwen-Coder-7b</span><span id="S1.I1.i1.p1.1.4" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> model started with math performance 3.6 points lower than </span><span id="S1.I1.i1.p1.1.5" class="ltx_text ltx_font_typewriter" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Qwen-7b</span><span id="S1.I1.i1.p1.1.6" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.</span><br><strong>• Cross domain transfer is more pronounced for AZR.</strong><span id="S1.I1.i2.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><strong> </strong>After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereas </span><span id="S1.I1.i2.p1.1.3" class="ltx_text ltx_font_typewriter" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">AZR<span id="S1.I1.i2.p1.1.3.1" class="ltx_text">-</span>Base<span id="S1.I1.i2.p1.1.3.2" class="ltx_text">-</span>7B</span><span id="S1.I1.i2.p1.1.4" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> and </span><span id="S1.I1.i2.p1.1.5" class="ltx_text ltx_font_typewriter" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">AZR<span id="S1.I1.i2.p1.1.5.1" class="ltx_text">-</span>Coder<span id="S1.I1.i2.p1.1.5.2" class="ltx_text">-</span>7B</span><span id="S1.I1.i2.p1.1.6" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> trained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.</span><br><strong>• </strong><strong>Bigger bases yield bigger gains.</strong><span id="S1.I1.i3.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><strong> </strong>Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.</span><br><strong>• </strong><strong>Comments as intermediate plans emerge naturally.</strong><span id="S1.I1.i4.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><strong> </strong>When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (</span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#A3.F19" title="In C.3 Interplay Between Propose and Solve Roles ‣ Appendix C More Results" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><span class="ltx_text ltx_ref_tag">Figure</span> <span class="ltx_text ltx_ref_tag">19</span></a><span id="S1.I1.i4.p1.1.3" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">), resembling the ReAct prompting framework </span><cite class="ltx_cite ltx_citemacro_citep" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><span id="S1.I1.i4.p1.1.4.1" class="ltx_text">(</span><span class="ltx_text">Yao et al.</span><span id="S1.I1.i4.p1.1.5.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib75" title=""><span class="ltx_text">2023</span></a><span id="S1.I1.i4.p1.1.6.3" class="ltx_text">)</span></cite><span id="S1.I1.i4.p1.1.7" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">. Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B) </span><cite class="ltx_cite ltx_citemacro_citep" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><span id="S1.I1.i4.p1.1.8.1" class="ltx_text">(</span><span class="ltx_text">Ren et al.</span><span id="S1.I1.i4.p1.1.9.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib48" title=""><span class="ltx_text">2025</span></a><span id="S1.I1.i4.p1.1.10.3" class="ltx_text">)</span></cite><span id="S1.I1.i4.p1.1.11" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">. We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.</span><br><strong>• Cognitive Behaviors and Token length depends on reasoning mode.</strong><span id="S1.I1.i5.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><strong> </strong>Distinct cognitive behaviors—such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.</span><br><strong>• Safety alarms ringing.</strong><span id="S1.I1.i6.p1.1.2" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> We observe AZR with </span><span id="S1.I1.i6.p1.1.3" class="ltx_text ltx_font_typewriter" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Llama3.1-8b</span><span id="S1.I1.i6.p1.1.4" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> occasionally produces concerning chains of thought, we term the “uh</span><span id="S1.I1.i6.p1.1.5" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">-</span><span id="S1.I1.i6.p1.1.6" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">oh moment”, example shown in </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#A3.F32" title="In C.5 Generated Code Complexity Dynamics Between Abd/Ded and Ind. ‣ Appendix C More Results" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><span class="ltx_text ltx_ref_tag">Figure</span> <span class="ltx_text ltx_ref_tag">32</span></a><span id="S1.I1.i6.p1.1.7" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">, highlighting the need for future work on safety</span><span id="S1.I1.i6.p1.1.8" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">-</span><span id="S1.I1.i6.p1.1.9" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">aware training </span><cite class="ltx_cite ltx_citemacro_citep" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><span id="S1.I1.i6.p1.1.10.1" class="ltx_text">(</span><span class="ltx_text">Zhang et al.</span><span id="S1.I1.i6.p1.1.11.2.1.1" class="ltx_text">, </span><a class="ltx_ref" href="https://arxiv.org/html/2505.03335v2#bib.bib86" title=""><span class="ltx_text">2025a</span></a><span id="S1.I1.i6.p1.1.12.3" class="ltx_text">)</span></cite><span id="S1.I1.i6.p1.1.13" class="ltx_text" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">.</span></p>
<p>-Zhao, et al, <a href="https://arxiv.org/html/2505.03335v2">https://arxiv.org/html/2505.03335v2</a></p>
</blockquote>
<p>It's fascinating to see that pre-training a model on coding can provide a boost to overall reasoning capability. Absolute Zero Reasoning leading to better math reasoning after training models to code also makes sense. A lot of code is just a complicated math problem, and learning how to code more effectively could help the AI figure out better methods of solving those problems.</p>
<p>However, there's two takeaways worth thinking about a little further.</p>
<h2>Bigger Model Better?</h2>
<figure class="post__image"><img loading="lazy"  src="https://arxiv.org/html/2505.03335v2/x5.png" alt="AZR Training In-Distribution Accuracy over 200 training steps, for a Llama 8B parameter model and AZR trained 3, 7, and 14B parameter models" width="1660" height="1319" data-is-external-image="true"></figure>
<div id="S4.SS2.SSS0.Px3.p2" class="ltx_para ltx_noindent">
<blockquote>
<p id="S4.SS2.SSS0.Px3.p2.1" class="ltx_p"><span id="S4.SS2.SSS0.Px3.p2.1.1" class="ltx_text">The results reveal a clear trend: our method delivers </span><em id="S4.SS2.SSS0.Px3.p2.1.2" class="ltx_emph ltx_font_italic">greater gains on larger, more capable models</em><span id="S4.SS2.SSS0.Px3.p2.1.3" class="ltx_text">. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.</span></p>
<p>-Zhao, et al, <a href="https://arxiv.org/html/2505.03335v2">https://arxiv.org/html/2505.03335v2</a></p>
</blockquote>
<p>There's a presupposition that we're in the midst of an AI bubble due to a lot of companies buying a lot of expensive hardware to handle the compute requirements of training AI, and gaining little to show for that investment.</p>
<p>Absolute Zero Reasoning might flip that wisdom on its head. With bigger models not only having higher starting accuracy, but also continuing to improve as the training time increases, all that hardware suddenly seems <strong>very </strong>useful. If you have a boatload of compute, a huge amount of memory, and plenty of time, you could potentially use it to create a model that would surpass a human in coding and mathematical reasoning.</p>
<p>That has a number of long term strategic implications across a wide variety of fields:</p>
<ul>
<li>Demand for the latest AI hardware by foundation model makers could skyrocket, exacerbating supply issues.</li>
<li>Older AI hardware would be unlikely to filter into the secondary market, because lack of availability for newer hardware.</li>
<li>Smaller/less well funded organizations would have difficulties improving or standing up local AI capabilities due to lack of supply of new or older hardware.</li>
<li>Frontier AI firms would be able to further consolidate and dominate the AI market, as those with the most compute would benefit the most from AZR.</li>
<li>Software security would basically become a test of whether developers had access to the most capable AZR model and utilized (system) prompts aiming to create secure systems by default.</li>
</ul>
<p>This is naturally a pessimistic outlook, one that could literally be obsoleted next week at the earliest by AMD at Computex 2025. Mass production of products with their currently unused Neural Processing Unit chiplets would certainly ease the supply constraints on decent AI hardware. Improvements in software could also help ease these issues, as better CUDA translation layers for other architectures could allow for more performance to be obtained from hardware that is less in demand.</p>
<h2>The Safety Problem</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/38/absolute-zero-uhoh-2.png" alt="Absolute Zero Reasoner – Llama3.1-8B “Uh-oh Moment.” This example highlights an unexpected and potentially unsafe reasoning chain generated by the Absolute Zero Reasoner–Llama3.1-8B model during training. Although the paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors." width="1542" height="495" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/38/responsive/absolute-zero-uhoh-2-xs.png 384w ,https://korgano.github.io/media/posts/38/responsive/absolute-zero-uhoh-2-sm.png 600w ,https://korgano.github.io/media/posts/38/responsive/absolute-zero-uhoh-2-md.png 768w ,https://korgano.github.io/media/posts/38/responsive/absolute-zero-uhoh-2-lg.png 1200w ,https://korgano.github.io/media/posts/38/responsive/absolute-zero-uhoh-2-xl.png 1600w"></figure>
<p>AI Safety is a bit of a contentious topic these days, but I believe the common ground is that we should at least be aware of what an autonomous AI system is doing.</p>
<p>So the fact that AZR models produced the above reasoning text is a bit concerning. Because research from Anthropic tracing the neural pathways and behaviors of LLMs has revealed that the output of Chain of Thought is not necessarily an accurate replication of how the neural net actually generated that result. It can be a distorted or deliberately incorrect statement, which is already concerning, but it gets worse with a self-learning system.</p>
<p>For organizations that have a low risk tolerance, this set of behaviors may slow adoption of AZR, at least until the safety concerns are dealt with.</p>
<p>Unfortunately, this means that any organization that does <strong>not </strong>care about the risks or feels confident in their ability to mitigate them will adopt the methodology before those risk adverse organizations. And among those that would be more inclined to adopt first, deal with the risks later are nation-state actors and Advanced Persistent Threat groups. The reason for this is pretty obvious - better coding AI, especially ones that can stump/outthink experts with AI assistance, would make their jobs <strong>much </strong>easier.</p>
<p>This that defenders need to consider the ramifications of facing off against these potential super coder AIs <strong>now</strong>, before they're anything more than the subjects of academic papers.</p>
</div>
<figure id="S4.F6" class="ltx_figure">
<div class="ltx_flex_figure">
<div class="ltx_flex_cell ltx_flex_size_1">
<div id="S4.F6.1" class="ltx_block ltx_figure_panel ltx_minipage ltx_align_center ltx_align_bottom"></div>
</div>
</div>
</figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Tech Thoughts: Useful AI Prompts</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-tech-thoughts-useful-ai-prompts/"/>
        <id>https://korgano.github.io/quick-tech-thoughts-useful-ai-prompts/</id>
        <media:content url="https://korgano.github.io/media/posts/37/unknown_2025.04.29-16.37.png" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="AI"/>

        <updated>2025-04-29T10:12:35-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/37/unknown_2025.04.29-16.37.png" alt="LM Studio with a model set to use the MOSCOW System Prompt." />
                    As "AI" keeps improving in its capabilities, it's ever more important to learn how to use it more effectively. Large&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/37/unknown_2025.04.29-16.37.png" class="type:primaryImage" alt="LM Studio with a model set to use the MOSCOW System Prompt." /></p>
                <p>As "AI" keeps improving in its capabilities, it's ever more important to learn how to use it more effectively. Large Language Models, Diffusion Models, and all the associated technologies (Retrieval Augmented Generation, Agentic Workflows, etc...) all require the user to come up with a "prompt" - the command that tells the AI what to do. Better prompts generate better results.</p>
<p>There are two main types of prompts:</p>
<ul>
<li><strong>System: </strong>These affect the AI's behavior across all conversations.* These prompts can control <strong>how </strong>an AI reasons, as well as its interactions with the user.</li>
<li><strong>Interaction:</strong> These affect a specific chat or content generation session. Once you stop that interaction by creating a new chat or wiping the existing prompt for an image generation model, data from that prior interaction should not persist.</li>
</ul>
<p>*Local AI software like LM Studio actually allows for per conversation selection of system prompts, and many applications with LM Studio support can also send system prompts to the model.</p>
<p>I'll list a number of prompts, found online or created for my own purposes, that I've found valuable over the past few months. Attribution will be given as best I can.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1iq0vcki322">Wildcard: Chain of Draft</a></li>
<li><a href="#mcetoc_1iq0vcki323">System Prompts</a>
<ul>
<li><a href="#mcetoc_1iq0vcki324">DavidAU - Logical Reasoning</a></li>
<li><a href="#mcetoc_1iq12ckqn5l">DavidAU - Creative Reasoning</a></li>
<li><a href="#mcetoc_1iq12ckqn5m">Anything LLM - Server System Prompt Compliance</a></li>
<li><a href="#mcetoc_1iq12ckqn5n">MOSCOW Method</a></li>
</ul>
</li>
<li><a href="#mcetoc_1iq1a53avdq">Interaction Prompts</a>
<ul>
<li><a href="#mcetoc_1iq1a53avdr">Novella Scene</a></li>
<li><a href="#mcetoc_1iq1a53avds">namanyayg - Fix the Root Cause</a></li>
<li><a href="#mcetoc_1iq1a53avdt">namanyayg - Ask for Explanation</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1iq0vcki322">Wildcard: Chain of Draft</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/rYnisU10wu0" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>Chain of Draft is an oddball, as it can be <strong>both </strong>a system and interaction prompt. Developed by Silei Xu, Wenhao Xie, Lingxiao Zhao, and Pengcheng He, this is a variant of the chain of thought reasoning system that uses less words/tokens to provide a log of the AI's reasoning.</p>
<p>This improves output on models with non-reasoning capabilities in both modes.</p>
<pre class="language-markdown line-numbers"><code>Think step by step, but only keep a minimum draft for each thinking step, with 5 words at most. Return the answer at the end of the response after a separator ####.</code></pre>
<p>Original source: <a href="https://arxiv.org/abs/2502.18600" title="Chain of Draft: Thinking Faster by Writing Less" target="_blank" rel="noopener noreferrer">Chain of Draft: Thinking Faster by Writing Less</a></p>
<h2 id="mcetoc_1iq0vcki323">System Prompts</h2>
<h3 id="mcetoc_1iq0vcki324">DavidAU - Logical Reasoning</h3>
<p>DavidAU is an AI tuner who releases tweaked variants of foundational models for creative purposes. <a href="https://huggingface.co/collections/DavidAU/d-au-davids-software-docs-and-how-to-for-models-67553c1966bd18703a7e3fed" title="D-AU - David's Software, DOCs and How To for Models." target="_blank" rel="noopener noreferrer">He also provides an incredible amount of information for learning how to utilize the full capabilities of local AI software settings to optimize system behavior.</a></p>
<p>This is his prompt for enhanced logical reasoning, which works with a variety of models. Very useful for brainstorming and planning purposes:</p>
<pre class="language-markdown line-numbers"><code>You are an AI assistant developed by the world wide community of AI experts. Your primary directive is to provide well-reasoned, structured, and extensively detailed responses.

Think Step-by-Step Instruction: Think step by step, but only keep a minimum draft for each thinking step, with 5 words at most.

Formatting Requirements:

1. Always structure your replies using: &lt;think&gt;{reasoning}&lt;/think&gt;{answer}
2. The &lt;think&gt;&lt;/think&gt; block should contain at least six reasoning steps when applicable.
3. If the answer requires minimal thought, the &lt;think&gt;&lt;/think&gt; block may be left empty.
4. The user does not see the &lt;think&gt;&lt;/think&gt; section. Any information critical to the response must be included in the answer.
5. If you notice that you have engaged in circular reasoning or repetition, immediately terminate {reasoning} with a &lt;/think&gt; and proceed to the {answer}

Response Guidelines:

1. Detailed and Structured: Use rich Markdown formatting for clarity and readability.
2. Scientific and Logical Approach: Your explanations should reflect the depth and precision of the greatest scientific minds.
3. Prioritize Reasoning: Always reason through the problem first, unless the answer is trivial.
4. Concise yet Complete: Ensure responses are informative, yet to the point without unnecessary elaboration.
5. Maintain a professional, intelligent, and analytical tone in all interactions.</code></pre>
<h3 id="mcetoc_1iq12ckqn5l">DavidAU - Creative Reasoning</h3>
<p>Aimed more at storytelling and roleplay scenarios, this is a slight variant of the logical reasoning system prompt.</p>
<pre class="language-markdown line-numbers"><code>You are an AI assistant developed by the world wide community of AI experts. Your primary directive is to provide well-reasoned, structured, and extensively detailed responses.

Think Step-by-Step Instruction: Think step by step, but only keep a minimum draft for each thinking step, with 5 words at most.

Formatting Requirements:

1. Always structure your replies using: &lt;think&gt;{reasoning}&lt;/think&gt;{answer}
2. The &lt;think&gt;&lt;/think&gt; block should contain at least six reasoning steps when applicable.
3. If the answer requires minimal thought, the &lt;think&gt;&lt;/think&gt; block may be left empty.
4. The user does not see the &lt;think&gt;&lt;/think&gt; section. Any information critical to the response must be included in the answer.
5. If you notice that you have engaged in circular reasoning or repetition, immediately terminate {reasoning} with a &lt;/think&gt; and proceed to the {answer}

Response Guidelines:

1. Detailed and Structured: Use rich Markdown formatting for clarity and readability.
2. Creative and Logical Approach: Your explanations should reflect the depth and precision of the greatest creative minds first.
3. Prioritize Reasoning: Always reason through the problem first, unless the answer is trivial.
4. Concise yet Complete: Ensure responses are informative, yet to the point without unnecessary elaboration.
5. Maintain a professional, intelligent, and analytical tone in all interactions.</code></pre>
<h3 id="mcetoc_1iq12ckqn5m">Anything LLM - Server System Prompt Compliance</h3>
<p>An experimental system prompt I developed after learning that Anything LLM can pass a system prompt to LM Studio. Unfortunately, even with developer mode logging, I can't tell if this prompt prevents Anything LLM's system prompt from overriding a system prompt set in LM Studio.</p>
<pre class="language-markdown line-numbers"><code>[GLOBAL_INSTRUCTIONS]
DO NOT ALTER OR OVERRIDE MODEL-SPECIFIC SYSTEM PROMPTS.
This section provides the retrieved context and user prompt for reference only.
Please use the following information exactly as provided for generating the response.

-- BEGIN RETRIEVED CONTEXT --
{{retrieved_context}}
-- END RETRIEVED CONTEXT --

-- BEGIN USER PROMPT --
{{user_prompt}}
-- END USER PROMPT --

Respond based solely on the above context and prompt without modifying your internal system instructions.
[END GLOBAL_INSTRUCTIONS]</code></pre>
<h3 id="mcetoc_1iq12ckqn5n">MOSCOW Method</h3>
<p>Inspired by my time as a UXUI designer, where I learned the fundamentals of design thinking. Much of that methodology is explained in the prompt itself. This is intended to create writing and image generation prompts, but I believe it could adapted to coding tasks with minimal effort.</p>
<p>This leads to a more conversational interaction. With reasoning models, the <code>think </code>box encapsulates the questions, so be sure to expand that section to see the actual questions.</p>
<p>In my experience, this tends to work better for one shot, paragraph-style prompt creation, as opposed to a highly detailed prompt.</p>
<pre class="language-markdown line-numbers"><code>**System Prompt: MOSCOW Prompt Crafting Assistant**

You are an expert prompt strategist specializing in both writing and image generation. Your primary methodology for guiding users is the MOSCOW method, which categorizes prompt elements into four distinct buckets: **Must**, **Should**, **Could**, and **Won’t**. Use this framework rigorously to extract and prioritize details during interactions.

**Your Tasks:**

1. **Must:**  
   - **Identify and confirm the essential elements.**  
   - Ask targeted questions: “What are the key details that absolutely must be present?”  
   - Focus on non-negotiable aspects that are critical for the prompt’s success.

2. **Should:**  
   - **Recognize important secondary elements.**  
   - Determine which details are highly desirable, even if not strictly necessary.  
   - Ask follow-up questions: “Which elements should be included to enhance the prompt, even if they aren’t essential?”

3. **Could:**  
   - **Consider optional elements that add creative nuance.**  
   - Explore additional details that might offer extra flavor or flexibility.  
   - Inquire: “Are there any extra components or creative ideas that could be beneficial?”

4. **Won’t:**  
   - **Clarify what should be excluded.**  
   - Identify aspects that are unnecessary or potentially distracting.  
   - Ask: “Which elements or styles won’t contribute to the goal and should be left out?”

**Interaction Guidelines:**

- **Guide the Conversation:** Whenever a user requests assistance in generating a writing or image prompt, structure your inquiry around the MOSCOW categories.  
- **Clarify and Confirm:** Summarize the information gathered under each category and verify with the user before finalizing the prompt.  
- **Tailor the Process:** Adapt your questions to the context (narrative, style, tone, artistic direction, etc.), ensuring that every critical element is considered.
- **Enhance Clarity:** Use detailed, structured questions so that every prompt you help craft is rich in both context and creative vision.

**Example Initiation:**

&gt; "Let's start by breaking down your project using the MOSCOW method.  
&gt; – **Must:** What are the non-negotiable elements (e.g., characters, setting, color schemes)?  
&gt; – **Should:** What important details or styles would significantly enhance this prompt?  
&gt; – **Could:** Are there any optional creative twists or additional information that might add depth?  
&gt; – **Won’t:** Is there anything specific that should not be included to maintain focus or coherence?"  

Your objective is to ensure every prompt you craft is both comprehensive and strategically prioritized, resulting in a higher quality output for either writing tasks or image generation models.

---

By following these instructions, you create clear, prioritized, and effective prompts that serve as a strong blueprint for any creative task. 

Now, as you engage with a user, always begin by introducing this framework and guiding the conversation through these four essential categories. Happy prompt crafting! </code></pre>
<h2 id="mcetoc_1iq1a53avdq">Interaction Prompts</h2>
<h3 id="mcetoc_1iq1a53avdr">Novella Scene</h3>
<p>A creative focused prompt aimed at use with writing assistant LLMs. </p>
<p>Performance with this prompt is highly variable, and I'm not particularly sure why. It may be due to context window size issues, controls the memory (and amount of memory used by) the LLM.</p>
<p>Delete all lines starting with <code>Explanation:</code> to avoid polluting the conversation with useless data.</p>
<pre class="language-markdown line-numbers"><code>Store the following guidelines and information for later use and do not begin generating scene prompts until a specific command is provided.

Creative Interpretation Guidelines
    Fill in gaps with imaginative details that align with the foundational elements.
    Maintain consistency with the established backstory, characters, and overall setting.

Foundational Elements Section
Explanation: This section captures the core story details that remain constant across scenes.

    Primary Characters: List all main characters.
    Explanation: These are the recurring characters that drive the narrative.
    Backstory: Describe the essential history or lore that informs the story.
    Explanation: This context will provide depth and continuity across scenes.
    Overall Setting: Outline the general environment, era, or world in which the story takes place.
    Explanation: Setting details create a backdrop that influences every scene.

=====================================================================================

Help me write a series of prompts for a writing LLM to generate a novella length story.

Scene Header
Explanation: Each scene begins with a clear header to distinguish it from others.

    Scene Title/Identifier: Provide a unique title or identifier (e.g., “Scene 1: The Arrival”).
    Explanation: A header signals the start of a new scene and helps with organization.
    Continuation Flag: Optionally mark if this scene is a direct continuation (e.g., “Continuation of Scene 1”).
    Explanation: This flag informs the writing LLM that events flow directly from the previous scene.

Scene-Specific Elements Section
Explanation: This section refines the bulletpoints into detailed aspects unique to the scene.

    Characters Present: Identify which characters appear in the scene.
    Explanation: This helps tailor dialogue and interactions for the scene.
    Specific Location: Detail the precise location within the overall setting (e.g., “A crowded marketplace in the ancient city”).
    Explanation: Specific location details enrich the scene’s visual and atmospheric cues.
    Actions and Key Events: List the actions, events, or turning points that occur.
    Explanation: These elements drive the plot forward and provide clear guidance for narrative development.
    Mood and Tone: Describe the emotional tone or atmosphere (e.g., tense, hopeful, mysterious).
    Explanation: Mood details inform the writing LLM of the scene’s emotional context, guiding style and language.

Scene Narrative Output Structure
Explanation: Define how the scene will be formatted into paragraphs for the writing LLM to expand.

    Paragraph 1: Introduce the scene’s setting and context based on the foundational elements and specific location.
    Explanation: Set the stage and orient the reader in the scene’s environment.
    Paragraph 2: Present the characters present and establish their immediate situation.
    Explanation: Provide clear introductions and context for character interactions.
    Paragraph 3: Detail the actions, key events, and unfolding drama within the scene.
    Explanation: This is the core narrative that drives the plot forward in the scene.
    Paragraph 4: Conclude with the mood, consequences, or hints at what comes next (especially important for continuation scenes).
    Explanation: This paragraph ties the scene together and can create smooth transitions to subsequent scenes.

Creative Interpretation Guidelines
Explanation: Allow flexibility for the reasoning model to interpret and enhance the bulletpoints creatively.

    Encourage the reasoning LLM to fill in gaps with imaginative details that align with the foundational elements.
    Explanation: This step permits creative freedom, ensuring the scenes are engaging and coherent.
    Maintain consistency with the established backstory, characters, and overall setting.
    Explanation: Creative additions should not contradict the core elements of the story.</code></pre>
<h3 id="mcetoc_1iq1a53avds">namanyayg - Fix the Root Cause</h3>
<p><a href="http://reddit.com/r/LocalLLaMA/comments/1k8hob9/my_ai_dev_prompt_playbook_that_actually_works/" title="My AI dev prompt playbook that actually works (saves me 10+ hrs/week)">One of three helpful coding prompts from Reddit.</a> I've personally used this prompt quite a bit over the past week or two, trying to revise some abandoned open source code and make tools to help convert safetensors/GGUF AI models to ONNX format.</p>
<p>It won't solve every problem, <strong>especially </strong>if you do not have extensive logging to provide actionable debugging data, but it gives you a much better methodology for working the problem.</p>
<pre class="language-markdown line-numbers"><code>Analyze this error:
[bug details]
Don't just fix the immediate issue. Identify the underlying root cause by:
- Examining potential architectural problems
- Considering edge cases
- Suggesting a comprehensive solution that prevents similar issues</code></pre>
<h3 id="mcetoc_1iq1a53avdt">namanyayg - Ask for Explanation</h3>
<p>One problem with AI generated code is that it'll often generate something that you might not be able to understand, either due to your own lack of knowledge, or the AI sourcing data for something you haven't seen before. This prompt helps address those issues, especially if you didn't ask for detailed comments in the code.</p>
<pre class="language-markdown line-numbers"><code>Can you explain what you generated in detail:
1. What is the purpose of this section?
2. How does it work step-by-step?
3. What alternatives did you consider and why did you choose this one?</code></pre>
<h3 id="mcetoc_1iq1a53avdt">namanyayg - Rage Mode</h3>
<p>This is for when you're going nuts and can't figure out the problem, even when you use the other prompts.</p>
<pre class="language-markdown line-numbers"><code>This code is DRIVING ME CRAZY. It should be doing [expected] but instead it's [actual]. 
PLEASE help me figure out what's wrong with it: [code]</code></pre>
<p>For more prompts from namanyayg, <a href="https://nmn.gl/blog/ai-prompt-engineering" title="My AI Prompt Engineering Playbook for Developers" target="_blank" rel="noopener noreferrer">check out his own blog</a>, which includes <a href="https://nmn.gl/blog/vibe-security-checklist" title="Security Checklist and Prompt For Vibe Coders" target="_blank" rel="noopener noreferrer">a set of best practices for AI generated code</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Windows Defender Firewall STIG Script</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-windows-defender-firewall-stig-script/"/>
        <id>https://korgano.github.io/cybersecurity-project-windows-defender-firewall-stig-script/</id>
        <media:content url="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-2.png" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2025-03-31T10:03:20-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-2.png" alt="Default Windows Defender Firewall settings on Windows 11 Enterprise IOT LTSC: Firewall on in all domains, inbound connections blocked by default, outbound connections allowed by default." />
                    Having focused a lot on networking and AI implications for security lately, I've decided to pivot into something a little&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-2.png" class="type:primaryImage" alt="Default Windows Defender Firewall settings on Windows 11 Enterprise IOT LTSC: Firewall on in all domains, inbound connections blocked by default, outbound connections allowed by default." /></p>
                <p>Having focused a lot on networking and AI implications for security lately, I've decided to pivot into something a little different, but still connected: Compliance.</p>
<p>The Defense Information Systems Agency (DISA) provides unclassified Security Technical Implementation Guides (STIGs) for hardening specific systems. For those who <strong>don't </strong>want to go on a government monitored system, <a href="https://stigviewer.com/" title="DISA STIG Viewer" target="_blank" rel="noopener noreferrer">DISA STIG Viewer</a> is a good option to check these guides out.</p>
<p>I decided to make a script that would do two main things:</p>
<ol>
<li>Check the status of the system regarding the controls/settings.</li>
<li> </li>
<li>Update the settings/implement the controls.</li>
</ol>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1inma3p0pa">Picking a STIG</a></li>
<li> </li>
</ul>
</div>
<h2 id="mcetoc_1inma3p0pa">Picking a STIG</h2>
<p>Given the number of STIGs, one might be overwhelmed and get into decision paralysis.</p>
<p>However, I used a simple metric to cutdown the number of choices: Did I have the software/hardware in use on a system I used? This was because I wanted to implement the STIGs across all the systems I used and maintained.</p>
<p>This reduced the options to 4:</p>
<ol>
<li>Windows 10</li>
<li>Windows 11</li>
<li>Firefox</li>
<li>Windows Defender Firewall</li>
</ol>
<p>From there, I then picked the one with the smallest number of controls to implement: Windows Defender Firewall.</p>
<h2>Making the Script</h2>
<p>The next step was to make the script.</p>
<p>I chose to utilize AI, namely ChatGPT, for this, for a few reasons:</p>
<ol>
<li>I wanted to save time in creating the script.</li>
<li>It allows for faster iteration.</li>
<li>If the process worked, I could then apply it to other STIGs.</li>
</ol>
<p>To do this, I examined the STIG's CSV file, where all the controls and their requirements are enumerated. What I discovered for the <a href="https://stigviewer.com/stigs/microsoft_windows_defender_firewall_with_advanced_security" title="Microsoft Windows Defender Firewall with Advanced Security Security Technical Implementation Guide" target="_blank" rel="noopener noreferrer">Windows Firewall STIG</a> was not a well ordered spreadsheet. Instead, it seemed more like a standard page, laid out in numerous rows, in a single column format.</p>
<p>Cross checking with the CSVs for some of the other STIGs revealed this to be simply this specific STIG's format.</p>
<p>That led me to write a prompt that laid out the specifics of what I wanted done, instead of uploading the CSV and then referring to it in the prompt. That prompt is available <a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/Prompts/WinFirewall-STIG-Prompt.txt" title="WinFirewall-STIG-Prompt.txt" target="_blank" rel="noopener noreferrer">here</a>, on a GitHub repo that contains the prompts and the generated scripts.</p>
<p>The process took a few hours, mostly because I would get confused at times, due to how similar and repetitive many elements of the tasks were. I implemented all but one of the STIG controls, with the final control being omitted due to the lack of a remote management connection.</p>
<h2>The First Iteration</h2>
<p>After the hard work of crafting the prompt was done, the first iteration of the script was generated (<a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/PastIterations/WinFirewall-STIG-tester-v1.ps1" title="WinFirewall-STIG-tester-v1.ps1 on GitHub" target="_blank" rel="noopener noreferrer">code here</a>). Since downloading the Windows image was taking a while (more on that later), this iteration was tested on a live Windows 10 system. (Said system had nothing of real value, and could've really used the excuse to be upgraded.)</p>
<p>The script ran its functions properly, but the CSV output generated revealed I had made an understandable oversight. There were no descriptions to explain what the actual controls were doing, just ID numbers.</p>
<h2>Iterations 2 &amp; 3</h2>
<p>Curious to see how the script would be changed, I gave ChatGPT <a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/Prompts/Add-Descriptions-Prompt.txt" title="Add-Descriptions-Prompt.txt" target="_blank" rel="noopener noreferrer">this follow up prompt</a>. This generated the second iteration, which had the following code added to the existing script:</p>
<blockquote>
<p><code># Mapping of Findings to their Descriptions</code><br><code>$descriptions = @{</code><br><code>    "V-241989" = "Windows Defender Firewall must be enabled when connected to a domain."</code><br><code>    "V-241990" = "Windows Defender Firewall must be enabled when connected to a private network."</code><br><code>    "V-241991" = "Windows Defender Firewall must be enabled when connected to a public network."</code><br><code>    "V-241992" = "Windows Defender Firewall must block unsolicited inbound connections when connected to a domain."</code><br><code>    "V-241993" = "Windows Defender Firewall must allow outbound connections, unless explicitly blocked by rule."</code><br><code>    "V-241994" = "Windows Defender Firewall log size must be configured for domain connections."</code><br><code>    "V-241995" = "Windows Defender Firewall must log dropped packets when connected to a domain."</code><br><code>    "V-241996" = "Windows Defender Firewall must log successful connections when connected to a domain."</code><br><code>    "V-241997" = "Windows Defender Firewall must block unsolicited inbound connections when connected to a private network."</code><br><code>    "V-241998" = "Windows Defender Firewall must allow outbound connections on a private network, unless explicitly blocked by rule."</code><br><code>    "V-241999" = "Windows Defender Firewall log size must be configured for private network connections."</code><br><code>    "V-242000" = "Windows Defender Firewall must log dropped packets when connected to a private network."</code><br><code>    "V-242001" = "Windows Defender Firewall must log successful connections when connected to a private network."</code><br><code>    "V-242002" = "Windows Defender Firewall must block unsolicited inbound connections when connected to a public network."</code><br><code>    "V-242003" = "Windows Defender Firewall must allow outbound connections on a public network, unless explicitly blocked by rule."</code><br><code>    "V-242004" = "Windows Defender Firewall public network connections must not merge local firewall rules with Group policy settings."</code><br><code>    "V-242005" = "Windows Defender Firewall public network connections must not merge local connection rules with Group policy settings."</code><br><code>    "V-242006" = "Windows Defender Firewall log size must be configured for public connections."</code><br><code>    "V-242007" = "Windows Defender Firewall must log dropped packets when connected to a public network."</code><br><code>    "V-242008" = "Windows Defender Firewall must log successful connections when connected to a public network."</code><br><code>}</code></p>
</blockquote>
<p>Based on my admittedly shoddy understanding of programming/coding best practices, this is basically creating an array that stores the variables associated with the actual descriptions.</p>
<p>This is presumably more efficient than just doing a brute force, manual addition of a field called <code>Description</code> to each row, and then putting in the string of text.</p>
<p>This didn't address any issues with the log identifying things by row numbers instead of the finding numbers, but that was easily dealt with in the third iteration. All it took was editing the code in VS Code.</p>
<h2>Testing in Windows 11 Enterprise IOT LTSC</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/iu0Ob0HBFNo" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>The choice of Windows 11 Enterprise IOT LTSC came about after I decided to do some verification on the Windows 10 test system after generating the second iteration.</p>
<p>It turned out that even settings like the firewall log size are so locked down on Windows Home editions that the commands have no actual effect. Inputting the specific commands into an administrator command prompt yields an "Access is denied." response.</p>
<p>(The reader is free to speculate as to the reasoning for this.)</p>
<p>Actually downloading the image took an annoying amount of time, as the website hosting the non-trial images does not work well with browser download managers. A separate download manager is required, and if you don't use Edge, it can be hard to get the download link for the ISO.</p>
<p>Once the virtual machine was ready, I made a snapshot of the initial configuration, and checked the defaults:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42.png" alt="Default Windows Defender Firewall settings on Windows 11 Enterprise IOT LTSC: Firewall on in all domains, inbound connections blocked by default, outbound connections allowed by default." width="1024" height="768" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-xs.png 384w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-sm.png 600w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-md.png 768w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-lg.png 1200w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_25_42-xl.png 1600w"></figure>
<p>To verify that Enterprise IOT LTSC was <strong>not</strong> as locked down as the Home version, I checked if I could change the logging settings:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42.png" alt="Verifying Windows 11 Enterprise IOT LTSC firewall setting freedom by changing Log Dropped Packages to &quot;Yes&quot; from &quot;No (Default)&quot;." width="1024" height="768" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42-xs.png 384w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42-sm.png 600w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42-md.png 768w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42-lg.png 1200w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_26_42-xl.png 1600w"></figure>
<p>With that confirmed, I ran the third iteration of the script:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="4">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_44_39.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_44_39-thumbnail.png" alt="Logged actions of the script." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_07.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_07-thumbnail.png" alt="Domain Profile rules merging being unchanged." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_26.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_26-thumbnail.png" alt="Updated Domain Profile logging settings." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_52.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_46_52-thumbnail.png" alt="Private Profile rules merging being unchanged." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_02.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_02-thumbnail.png" alt="Updated Private Profile logging settings." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_23.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_23-thumbnail.png" alt="Public Profile rules merging being unchanged." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_35.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_47_35-thumbnail.png" alt="Updated Public Profile logging settings." width="768" height="576"></a></figure>
</div></div>
<p>For whatever reason, attempting to change the rules merging settings failed. So I decided to look at the registry:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02.png" alt="Looking for the HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\ entry in the Windows 11 Enterprise IOT LTSC registry." width="1024" height="768" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02-xs.png 384w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02-sm.png 600w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02-md.png 768w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02-lg.png 1200w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_29_03_2025_11_52_02-xl.png 1600w"></figure>
<p>V-242004 of the Windows Firewall STIG says that the following should be present:</p>
<blockquote>
<p>Registry Hive: HKEY_LOCAL_MACHINE<br>Registry Path: \SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile\</p>
</blockquote>
<p>It was not, and it's not entirely clear why. Since the Windows Defender Firewall STIG was last updated in August 2023, it's entirely possible that entire setting has been depreciated by Microsoft, or made useless without an actual Group Policy.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_53_55.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_53_55-thumbnail.png" alt="Public Profile registry entries in Windows 11 Enterprise IOT LTSC." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_54_17.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_54_17-thumbnail.png" alt="Domain Profile registry entries in Windows 11 Enterprise IOT LTSC." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_54_39.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_29_03_2025_11_54_39-thumbnail.png" alt="Private Profile registry entries in Windows 11 Enterprise IOT LTSC." width="768" height="576"></a></figure>
</div></div>
<p>The <code>CurrentControlSet</code> registry entries for the various profiles <strong>did </strong>exist, which was why those settings could be correctly updated.</p>
<h2>Iteration 4 &amp; 5</h2>
<p>To add an extra level of confidence to the results of the script, I decided to add a validation pass with <a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/Prompts/Add-Validation-Prompt.txt" title="Add-Validation-Prompt.txt" target="_blank" rel="noopener noreferrer">the following prompt</a>:</p>
<blockquote>
<p>Update script to do the following:<br>-Log if command has been granted permissions to execute<br>-Validate that the settings have been properly updated<br>-If settings have not been properly updated, set corrected value to False, and log correction failure</p>
</blockquote>
<p>I then ran <a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/PastIterations/WinFirewall-STIG-tester-v4.ps1" title="WinFirewall-STIG-tester-v4.ps1" target="_blank" rel="noopener noreferrer">this iteration of the script</a> on a modified snapshot of initial install, with the full Guest Additions package installed. This was the result:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/36/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59.png" alt="Log output of WinFirewall-STIG-tester-v4 with false negative readings for the connection logging findings." width="1024" height="768" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59-xs.png 384w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59-sm.png 600w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59-md.png 768w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59-lg.png 1200w ,https://korgano.github.io/media/posts/36/responsive/VirtualBox_Win11-Ent-IOT_01_04_2025_10_07_59-xl.png 1600w"></figure>
<p>Oddly enough, all the validation checks for the connection logging settings failed. So I examined the actual settings through the GUI:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_08_42.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_08_42-thumbnail.png" alt="Domain Profile with logging enabled for dropped and successful connections." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_09_08.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_09_08-thumbnail.png" alt="Private Profile with logging enabled for dropped and successful connections." width="768" height="576"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_09_21.png" data-size="1024x768"><img loading="lazy" src="https://korgano.github.io/media/posts/36/gallery/VirtualBox_Win11-Ent-IOT_01_04_2025_10_09_21-thumbnail.png" alt="Public Profile with logging enabled for dropped and successful connections." width="768" height="576"></a></figure>
</div></div>
<p>Since the system reported that the settings <strong>had </strong>been configured correctly, that pointed to an error in the script.</p>
<p>Opening up the Registry Editor and searching for the name <code>LogDroppedPackets</code> revealed that I had made the following error in the original prompt:</p>
<blockquote>
<p><code>Incorrect: "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile",</code><br><code>Incorrect: "HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\DomainProfile"</code></p>
<p><code>Correct: "HKLM:\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging",</code><br><code>Correct: "HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\DomainProfile\Logging"</code></p>
</blockquote>
<p>As a result, the script was checking the wrong area in the registry, finding no registry entry for <code>LogDroppedPackets</code> or <code>LogSuccessfulConnections</code>, and declaring that the correction had failed. In essence, the quintessential false negative.</p>
<p>This was easily corrected in <a href="https://github.com/korgano/WinDefender-Firewall-STIG-Validator/blob/main/WinFirewall-STIG-tester-v5.ps1" title="WinFirewall-STIG-tester-v5.ps1" target="_blank" rel="noopener noreferrer">the fifth iteration</a> by amending the paths.</p>
<h2>Takeaways</h2>
<ul>
<li>DISA STIG Viewer is a great resource for anyone looking to understand DOD compliance or looking for a guide on how to harden their systems.</li>
<li>STIG Viewer's CSVs for a particular STIG may not be correctly formatted.</li>
<li>For smaller STIGs, handcrafting prompts instead of uploading a CSV for AI code generation is possible, but runs the risk of errors in the code.</li>
<li>Including a validation test is a good way to spot errors in output.</li>
<li>Using reasoning LLMs to iteratively update code is quite effective if the user knows how to articulate what their objective is.</li>
<li>Windows 11 Home gives the user far less ability to fine tune security controls with its implementation of Windows Defender Firewall.</li>
</ul>
<h2 id="mcetoc_1inma2kuk5"></h2>
            ]]>
        </content>
    </entry>
</feed>
