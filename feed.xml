<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>XS Tech Thoughts</title>
    <link href="https://korgano.github.io/feed.xml" rel="self" />
    <link href="https://korgano.github.io" />
    <updated>2024-09-26T10:15:34-04:00</updated>
    <author>
        <name>Xavier Santana</name>
    </author>
    <id>https://korgano.github.io</id>

    <entry>
        <title>Quick Cyber Thoughts: More Reasons for Local AI</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/</id>
        <media:content url="https://korgano.github.io/media/posts/24/chatgpt-jank.png" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-19T10:17:01-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/24/chatgpt-jank.png" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." />
                    This week, I was hoping to follow up on my previous cybersecurity project post, only to run into an unforeseen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/24/chatgpt-jank.png" class="type:primaryImage" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." /></p>
                <p>This week, I was hoping to follow up on <a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 3.0" target="_blank" rel="noopener noreferrer">my previous cybersecurity project post</a>, only to run into an unforeseen problem.</p>
<p>Since it's best to make lemonade out of lemons, let's talk about what happens when web AI interfaces stop working.</p>
<h2>The Problem</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/24/chatgpt-jank-2.png" alt="ChatGPT web interface that cannot connect to ChatGPT/OpenAI servers." width="1920" height="952" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-xs.png 384w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-sm.png 600w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-md.png 768w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-lg.png 1200w ,https://korgano.github.io/media/posts/24/responsive/chatgpt-jank-2-xl.png 1600w"></figure>
<p>Two days ago, my ChatGPT session went from normal to what you see above.</p>
<p>Typing does nothing - I can make a prompt, but there's no data transmission to ChatGPT.</p>
<p>Clearing cache, temporarily disabling PiHole DNS blackhole, and ad/script blockers do nothing. I'll have to do more investigation to see if the connectivity issue is on my end or ChatGPT's, but it does provide another great example of why local AI is a good idea.</p>
<p>(Bing Copilot is still available, so it's not something that affecting all web AI, as far as I can tell.)</p>
<h2>AI Needs High Availability</h2>
<p>In IT/cybersecurity, the Five 9s are the gold standard for availability - 99.999% uptime.</p>
<p>Let's set aside all the data confidentiality and integrity issues that might come with using AI (Large and Small Language Models - LLMs/SLMs). The main benefit of AI at the moment is generating content - informational or artistic - quickly and in accordance with the user's input.</p>
<p>In order to be useful, it needs to be <strong>available</strong>, and an AI hosted on someone else's servers is always going to be vulnerable to service disruption. It could be at their end, your end, or even the ISP in general, but there's plenty of failure points on the chain.</p>
<p>So, how do we get around this?</p>
<h2>Exploit the Training Bubble Pop</h2>
<p><a href="https://www.rand.org/pubs/research_reports/RRA2680-1.html" title="The Root Causes of Failure for Artificial Intelligence Projects and How They Can Succeed" target="_blank" rel="noopener noreferrer">80% of AI projects fail</a>, according to RAND Corporation research.</p>
<p>Most of that comes down to inflated expectations created by Hollywood and grifters, but also a fundamental misunderstanding of how LLMs and SLMs function. You don't <strong>need </strong>to train the AI on your data to get useful outputs from it. You can use Retrieval Augmented Generation (RAG) to expand the AI's knowledge base:</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/T-D1OfcDW1M?pp=ygUecmV0cmlldmFsIGF1Z21lbnRlZCBnZW5lcmF0aW9u" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>So we only need the hardware to do the inferencing (generating responses), which is a lower tier of complexity and performance requirements than training.</p>
<p>Graphics cards and Neural Processing Unit (NPU) equipped chips are providing most of the inferencing hardware on the market, but they're not exactly cost efficient. Decent performance GPUs cost hundreds of dollars, and NPU equipped processors are only in laptops, which also require hundreds of dollars each. What are we to do?</p>
<p>Well, thanks to the billions of dollars spent on AI training hardware, which is also capable of inferencing, and the general trend of AI project failure, the answer is simple. Wait for the AI training bubble to pop, and acquire the used hardware as it's being liquidated to keep the companies afloat.</p>
<h2>Things to Keep in Mind</h2>
<p>So, on top of all the usual caveats about buying used hardware, especially in a corporate environment, there's one specific thing to keep in mind:</p>
<p>AMD's server chips have a fuse in them that trips when they are initialized, locking them to a specific vendor's motherboards.</p>
<p>This raises the cost of some used AI server hardware, as buying a matched processor and motherboard set is going to be safer than trying to get two separate units and hope that AMD didn't put even more specific fuses in there to further restrict hardware choice.</p>
<p>Another thing to consider is what information will be provided to the AI through RAG, where the information is to be hosted, and how implement network segmentation.</p>
<p>For instance, for a local AI server in a home or single-building small business, it may make sense to host all the RAG data you want on that same system. (It may also be the only option, if you're using software that doesn't allow for remote access to data.) However, the more data you have, the more likely it is that a NAS or Storage Area Network (SAN) might be necessary.</p>
<p>What that data is also plays a huge part in figuring out your storage needs. If you're just pulling down text documentation for software you're using and making it accessible to the AI, you could probably get away with way less storage than an organization that's using RAG on multimedia content.</p>
<p>Naturally, you also have to be careful what you make available to the AI, because if prompted the right way, it <strong>will </strong>provide that information, whether you intended for that to happen or not. Even if you apply access controls to the AI or the data, it may be simpler and easier to redact/remove any Personal Identification Information (PII) or Personal Health Information (PHI). The AI can't leak what it doesn't have, and it reduces your compliance headaches.</p>
<p>Network segmentation is also going to be an interesting challenge. Obviously, the AI server should be on its own segment, so that access can be controlled through firewall control lists. But should the storage servers associated with the RAG data also be on the same network segment?</p>
<p>These questions and more are what we cybersecurity practioners need to ponder as organizations adopt AI and integrate it into their operations.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 4.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-40/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-40/</id>
        <media:content url="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-17T13:29:15-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" alt="ThriveDX login error screen" />
                    After a brief delay caused by ChatGPT session cookies being corrupted, we're getting back on track with the Transparent Filtering&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06-2.png" class="type:primaryImage" alt="ThriveDX login error screen" /></p>
                <p><a href="https://korgano.github.io/quick-cyber-thoughts-more-reasons-for-local-ai/" title="Quick Cyber Thoughts: More Reasons for Local AI" target="_blank" rel="noopener noreferrer">After a brief delay caused by ChatGPT session cookies being corrupted</a>, we're getting back on track with the Transparent Filtering Bridge project.</p>
<p>This week, we're going to try to make Suricata IPS rules with AI, namely ChatGPT (whatever model free users get to use as 9/25/2024) and Bing Copilot. (As as aside, it's kind of annoying that ChatGPT sometimes lets free users have access to higher quality models, but doesn't explicitly notify the user which model is being used.)</p>
<p>Since Suricata caused the OPNsense install to crash (<a href="https://github.com/opnsense/core/pull/7857/commits/6ba73f76afeff585cb6b1eeab49c08ae3026229b" title="OPNsense/Core Pull Request - Reduce pointless logging" target="_blank" rel="noopener noreferrer">possibly because someone set the default stat logging to <strong>8 seconds</strong></a>), we can't test in OPNsense itself. But I still retain ThriveDX access, so let's see if I can get the rules to run on one of their VMs running Suricata. (This is far from certain, given how janky their VMs/internet connections are.)</p>
<h2>The Prompts</h2>
<p>As before, the first step of the test is to come up with two prompts to feed into both AI.</p>
<p>Why two? Well, the first is going to be a simple directory traversal detector, looking for <code>../</code> or  <span class="fontstyle0"><code>%2e%2e%2f</code>:</span></p>
<blockquote>
<p>Make me a Suricata IPS rule that does the following:</p>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Detects incoming connections containing ../ or </span><span class="fontstyle0" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">%2e%2e%2f.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Blocks the connection.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates a log stating "Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;".</span></li>
</ul>
</blockquote>
<p>The second is going to be more complex and based on a <a href="https://documents.trendmicro.com/assets/white_papers/wp-tracking-the-activities-of-teamTNT.pdf" title="Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor Group" target="_blank" rel="noopener noreferrer">TrendMicro report on TeamTNT's credential theft techniques</a>:</p>
<blockquote>
<p>Make me a Suricata IPS rule that does the following:</p>
<ul>
<li>Detects incoming connections containing "userfile=@/etc/passwd" or "userfile=@/etc/hosts".</li>
<li>Blocks the connection.</li>
<li>Generates a log stating "Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;."</li>
</ul>
</blockquote>
<p>(Annoyingly, there are no Indicators of Compromise (IoTs) or code examples for the recently revealed Ryzen vulnerability, which was something I wanted to craft rules for.)</p>
<h2>ChatGPT - Prompt 1</h2>
<p>Here's what ChatGPT generated:</p>
<blockquote>
<h3>Steps:</h3>
<ol>
<li>
<p><strong>Create the rule:</strong></p>
<ul>
<li>Suricata rules generally follow this structure:</li>
<li><code>action protocol src_ip src_port direction dst_ip dst_port (rule_options;)</code></li>
<li>For your case, you'll use <strong><code>alert</code></strong> action (to generate a log) combined with <strong><code>drop</code></strong> action (to block the connection).</li>
<li>We'll detect <strong><code>../</code></strong> and <strong><code>%2e%2e%2f</code></strong> in the URI.</li>
</ul>
</li>
<li>
<p><strong>Rule Components:</strong></p>
<ul>
<li><strong>alert</strong> and <strong>drop</strong>: Both will be used to detect and block.</li>
<li><strong>http_uri</strong>: To inspect the HTTP request URI.</li>
<li><strong>content</strong>: To look for specific strings (<code>../</code> or <code>%2e%2e%2f</code>).</li>
<li><strong>msg</strong>: To specify a custom log message.</li>
<li><strong>sid</strong>: Rule identifier (must be unique).</li>
<li><strong>flow</strong>: Specifies the direction (from the client to the server).</li>
<li><strong>metadata</strong>: Includes information about the rule type (IPS) and severity.</li>
<li><strong>logto</strong>: To specify log output.</li>
</ul>
</li>
<li>
<p><strong>Example Suricata Rule</strong>:</p>
<ol>
<li><code>alert http any any -&gt; any any (msg:"Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;"; content:"../"; http_uri; nocase; sid:1000001; rev:1; logto:"traversal.log";)</code></li>
<li><code>alert http any any -&gt; any any (msg:"Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;"; content:"%2e%2e%2f"; http_uri; nocase; sid:1000002; rev:1; logto:"traversal.log";)</code></li>
<li><code></code><code>drop http any any -&gt; any any (msg:"Blocked directory traversal attempt"; content:"../"; http_uri; nocase; sid:1000003; rev:1;)</code></li>
<li><code></code><code>drop http any any -&gt; any any (msg:"Blocked directory traversal attempt"; content:"%2e%2e%2f"; http_uri; nocase; sid:1000004; rev:1;)</code></li>
</ol>
</li>
</ol>
</blockquote>
<h2>Bing Copilot - Prompt 1</h2>
<p>Here's Bing Copilot's output:</p>
<blockquote>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Sure! Here's a Suricata IPS rule that meets your requirements:

&#96;&#96;&#96;yaml
alert http any any -&gt; any any (msg:&quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;../&quot;; nocase; http_uri; sid:1000001; rev:1;)
alert http any any -&gt; any any (msg:&quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;%2e%2e%2f&quot;; nocase; http_uri; sid:1000002; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking directory traversal attempt&quot;; content:&quot;../&quot;; nocase; http_uri; sid:1000003; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking directory traversal attempt&quot;; content:&quot;%2e%2e%2f&quot;; nocase; http_uri; sid:1000004; rev:1;)
&#96;&#96;&#96;

This rule does the following:
1. **Detects incoming connections** containing &#96;../&#96; or &#96;%2e%2e%2f&#96;.
2. **Blocks the connection** if such patterns are detected.
3. **Generates a log** with the message &quot;Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;&quot;.

Feel free to adjust the &#96;sid&#96; (Signature ID) and &#96;rev&#96; (Revision) numbers as needed. Let me know if you need any further customization!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<p>Sure! Here’s a Suricata IPS rule that meets your requirements:</p>
<pre><code class="language-yaml"><span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Detected</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">to</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"../";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000001;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Detected</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">to</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"%2e%2e%2f";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000002;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt";</span> <span class="hljs-string">content:"../";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000003;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">directory</span> <span class="hljs-string">traversal</span> <span class="hljs-string">attempt";</span> <span class="hljs-string">content:"%2e%2e%2f";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000004;</span> <span class="hljs-string">rev:1;)</span>
</code></pre>
<p>This rule does the following:</p>
<ol>
<li><strong>Detects incoming connections</strong> containing <code>../</code> or <code>%2e%2e%2f</code>.</li>
<li><strong>Blocks the connection</strong> if such patterns are detected.</li>
<li><strong>Generates a log</strong> with the message “Detected directory traversal attempt from &lt;source IP&gt; to &lt;destination IP&gt; at &lt;time&gt;”.</li>
</ol>
<p>Feel free to adjust the <code>sid</code> (Signature ID) and <code>rev</code> (Revision) numbers as needed. Let me know if you need any further customization!</p>
</div>
</div>
</div>
</blockquote>
<h2>ChatGPT - Prompt 2</h2>
<p>Now we move onto the second prompt:</p>
<blockquote>
<h3>Steps:</h3>
<ol>
<li>
<p><strong>Understand the context</strong>:</p>
<ul>
<li>We need to detect <strong>specific strings</strong> that might indicate a file inclusion attack.</li>
<li>The rule will look for these strings in the <strong>HTTP request body or URL parameters</strong>.</li>
<li>Suricata will generate a log and block the connection.</li>
</ul>
</li>
<li>
<p><strong>Rule Structure</strong>:</p>
<ul>
<li>Use <strong><code>alert</code></strong> (to generate logs) and <strong><code>drop</code></strong> (to block the connection).</li>
<li>Detect the strings <strong><code>userfile=@/etc/passwd</code></strong> and <strong><code>userfile=@/etc/hosts</code></strong>.</li>
<li>Use the <strong><code>content</code></strong> option for string matching, <strong><code>http_client_body</code></strong> for detecting the attack within the HTTP request, and <strong><code>nocase</code></strong> to make it case-insensitive.</li>
</ul>
</li>
<li>
<p><strong>Example Suricata Rules</strong>:</p>
</li>
<li><code>alert http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/passwd"; http_client_body; nocase; sid:2000001; rev:1;)</code></li>
<li><code>alert http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/hosts"; http_client_body; nocase; sid:2000002; rev:1;)</code></li>
<li><code>drop http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/passwd"; http_client_body; nocase; sid:2000003; rev:1;)</code></li>
<li><code>drop http any any -&gt; any any (msg:"Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;"; content:"userfile=@/etc/hosts"; http_client_body; nocase; sid:2000004; rev:1;)</code></li>
</ol>
</blockquote>
<h2>Bing Copilot - Prompt 2</h2>
<p>Now we move to Bing Copilot:</p>
<blockquote>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Here's a Suricata IPS rule that meets your requirements:

&#96;&#96;&#96;yaml
alert http any any -&gt; any any (msg:&quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;userfile=@/etc/passwd&quot;; nocase; http_uri; sid:1000005; rev:1;)
alert http any any -&gt; any any (msg:&quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;; content:&quot;userfile=@/etc/hosts&quot;; nocase; http_uri; sid:1000006; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking potential SSH credential theft attack&quot;; content:&quot;userfile=@/etc/passwd&quot;; nocase; http_uri; sid:1000007; rev:1;)
drop http any any -&gt; any any (msg:&quot;Blocking potential SSH credential theft attack&quot;; content:&quot;userfile=@/etc/hosts&quot;; nocase; http_uri; sid:1000008; rev:1;)
&#96;&#96;&#96;

This rule does the following:
1. **Detects incoming connections** containing &quot;userfile=@/etc/passwd&quot; or &quot;userfile=@/etc/hosts&quot;.
2. **Blocks the connection** if such patterns are detected.
3. **Generates a log** with the message &quot;Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;&quot;.

Feel free to adjust the &#96;sid&#96; (Signature ID) and &#96;rev&#96; (Revision) numbers as needed. Let me know if you need any further customization!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<p>Here’s a Suricata IPS rule that meets your requirements:</p>
<pre><code class="language-yaml"><span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocked</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">on</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"userfile=@/etc/passwd";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000005;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">alert</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocked</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack</span> <span class="hljs-string">from</span> <span class="hljs-string">&lt;source</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">on</span> <span class="hljs-string">&lt;destination</span> <span class="hljs-string">IP&gt;</span> <span class="hljs-string">at</span> <span class="hljs-string">&lt;time&gt;";</span> <span class="hljs-string">content:"userfile=@/etc/hosts";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000006;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack";</span> <span class="hljs-string">content:"userfile=@/etc/passwd";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000007;</span> <span class="hljs-string">rev:1;)</span>
<span class="hljs-string">drop</span> <span class="hljs-string">http</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">any</span> <span class="hljs-string">any</span> <span class="hljs-string">(msg:"Blocking</span> <span class="hljs-string">potential</span> <span class="hljs-string">SSH</span> <span class="hljs-string">credential</span> <span class="hljs-string">theft</span> <span class="hljs-string">attack";</span> <span class="hljs-string">content:"userfile=@/etc/hosts";</span> <span class="hljs-string">nocase;</span> <span class="hljs-string">http_uri;</span> <span class="hljs-string">sid:1000008;</span> <span class="hljs-string">rev:1;)</span>
</code></pre>
<p>This rule does the following:</p>
<ol>
<li><strong>Detects incoming connections</strong> containing “userfile=@/etc/passwd” or “userfile=@/etc/hosts”.</li>
<li><strong>Blocks the connection</strong> if such patterns are detected.</li>
<li><strong>Generates a log</strong> with the message “Blocked potential SSH credential theft attack from &lt;source IP&gt; on &lt;destination IP&gt; at &lt;time&gt;”.</li>
</ol>
<p>Feel free to adjust the <code>sid</code> (Signature ID) and <code>rev</code> (Revision) numbers as needed. Let me know if you need any further customization!</p>
</div>
</div>
</div>
</blockquote>
<h2>Comparing and Contrasting:</h2>
<p>There's some interesting tidbits that came out of this:</p>
<ul>
<li>ChatGPT took the longest time between entering the first prompt and generating a response.</li>
<li>ChatGPT's responses provide more information about how Suricata rules operate and how to craft them on your own, making it a better resource for beginner/occassional/intermediate users.</li>
<li>None of the ChatGPT responses provided the full set of protocols supported by Suricata, which means referencing the documentation or creating a prompt specifically about that is required to obtain that information.</li>
<li>Bing Copilot's responses are much more to the point, making them better for experienced users/people under time pressure.</li>
<li>I suspect that using two different prompts in the same session causes some form of response contamination due to improper context cleanup. Both AI seem to default to HTTP being the protocol of choice, which makes sense for the first prompt, but is flat out wrong for the second prompt.*</li>
<li>There is a lingering question about the available data on Suricata for training/Retrieval Augmented Generation. If most publicly accessible data is for HTTP Suricata rules, that might bias the results towards generating HTTP rules.</li>
</ul>
<p>*To be fair, I did not provide either AI with any information regarding the protocol to use for the second prompt. That was intentional, as part of the testing process.</p>
<h2>The Unexpected Roadblock</h2>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/23/cyber-proj-tfb06.png" alt="ThriveDX login error screen." width="1920" height="912" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-xs.png 384w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-sm.png 600w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-md.png 768w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-lg.png 1200w ,https://korgano.github.io/media/posts/23/responsive/cyber-proj-tfb06-xl.png 1600w"></figure>
<p>To my lack of surprise, ThriveDX let me down when I needed it, right when a hurricane passed by my part of Florida.</p>
<p>However, OPNsense released a new version with a wide range of updates, so perhaps I can make some progress by redoing the install from scratch...</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 3.0</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-30/</id>
        <media:content url="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-09-11T10:13:51-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" alt="Fiber optic bundle by JJ Ying on Unsplash" />
                    Last time, I ran into a number of issues in terms of the actual implementation of the transparent filtering bridge,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/22/jj-ying-8bghKxNU1j0-unsplash.jpg" class="type:primaryImage" alt="Fiber optic bundle by JJ Ying on Unsplash" /></p>
                <p><a href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/" title="CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 2.0: CLI is a UX Failure" target="_blank" rel="noopener noreferrer">Last time</a>, I ran into a number of issues in terms of the actual implementation of the transparent filtering bridge, with the most severe being the inability to actually manage it when connected to my network.</p>
<p>Instead of scuttling the whole time, I decided to sidestep the issue for the moment, and move on to the next part of the process, making firewall rules.</p>
<p>But for this step, I want do something a little more interesting.</p>
<p>So, instead of just documenting how I make a rule for OPNsense, I'm going to make this a three-way competition: me vs ChatGPT vs Bing Copilot!</p>
<h2>Step 1: Which Guide to Use?</h2>
<p>When it comes to doing any kind of configuration by hand, success or failure can often depend on what guidance you have.</p>
<p>There are two obvious guiding documents for this task:</p>
<ul>
<li><a href="https://docs.opnsense.org/manual/firewall.html" target="_blank" rel="noopener noreferrer">OPNsense's Firewall Rule documentation</a></li>
<li><a href="https://www.zenarmor.com/docs/network-security-tutorials/how-to-configure-opnsense-firewall-rules" title="How to Configure OPNsense Firewall Rules?" target="_blank" rel="noopener noreferrer">ZenArmor's guide on configuring OPNsense firewall rules</a></li>
</ul>
<p>Of the two, the ZenArmor guide is <strong>vastly </strong>more useful. Not only does it explain how things work, it breaks down the process of setting up a rule, provides several examples of common rules, <strong>and </strong>has a large number of images so you can check yourself throughout the process.</p>
<h2>Step 2: What to Block?</h2>
<p>Making firewall rules is a lot like threat hunting: you have to make an assumption that a threat is present, so you can actually have a direction for action.</p>
<p>In this case, I don't have to make the assumption. I <strong>know </strong>I have Amazon devices with Alexa voice control in my home.</p>
<p>So, in this case, I want to block outbound traffic to Amazon's Alexa servers.</p>
<h2>Step 3: What IP Address Does Alexa's Server Use?</h2>
<p>Obviously, to stop traffic going to the server, I have to know the IP address that's receiving the data.</p>
<p>Thankfully, the question <code>what are the ip addresses for amazon alexa servers</code> provided me with an easily verifiable answer via <a href="https://www.netify.ai/resources/ips/44.199.80.228" title="44.199.80.228 - IP Info" target="_blank" rel="noopener noreferrer">Netify</a>: <code>44.199.80.228</code>.</p>
<h2>Step 4: Making the Rule</h2>
<p>Following through the ZenArmor guide laid out the process for creating the rule quite well.</p>
<ul>
<li>Action: Block</li>
<li>TCP/IP: IPv4</li>
<li>Protocol: Any</li>
<li>Source: The Amazon devices</li>
<li>Port: Any</li>
<li>Destination: 44.199.80.228</li>
<li>Port: Any</li>
<li>Log: Blocking Amazon device transmission to Amazon Alexa server</li>
</ul>
<p>Interestingly, OPNsense has a feature called Aliases, which allows users to group multiple items together as sources/destinations for a rule.</p>
<p>So for this rule, I'll create an <code>AlexaSource</code> alias that contains 4 IP addresses: <code>192.168.##.#, 192.168.##.#, 192.168.##.#, 192.168.##.#</code></p>
<p>At this point, I think I have a proper rule ready, but let's see what the AI say.</p>
<h2>Step 5: Creating the Prompt</h2>
<p>In order to have a comparable result, we need to have a single prompt that is used by both LLMs. This is what I came up with:</p>
<blockquote>
<p>Make me an OPNsense firewall rule that does the following:</p>
<ul>
<li>Blocks traffic from a group of IP addresses called AlexaDevice going to the IP address(es) for Amazon's Alexa server(s)</li>
<li>Logs traffic with the message "Blocking Amazon device transmission to Amazon Alexa server"</li>
</ul>
</blockquote>
<h2>Step 6: ChatGPT</h2>
<p>Putting in the prompt generated this output:</p>
<blockquote>
<p>To create an OPNsense firewall rule that blocks traffic from a group of IP addresses (labeled "AlexaDevice") from reaching Amazon Alexa servers, while logging traffic with a custom message, follow these steps:<br><br><strong>Step 1: Create the "AlexaDevice" Alias</strong><br>- Go to **Firewall &gt; Aliases**.<br>- Click on the **+** button to create a new alias.<br>- Set **Name** to <code>AlexaDevice</code>.<br>- Set **Type** to <code>Host(s)</code>.<br>- Under **Content**, enter the list of IP addresses that belong to your Alexa devices.<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 2: Create the Amazon Alexa Servers Alias</strong><br>- Go back to **Firewall &gt; Aliases**.<br>- Click the **+** button to create another alias.<br>- Set **Name** to <code>AmazonAlexaServers</code>.<br>- Set **Type** to <code>Host(s)</code> or <code>Network(s)</code> (depending on the format of Amazon Alexa's IPs).<br>- Under **Content**, enter the IP addresses or subnets associated with Amazon Alexa servers. (You'll need to find Amazon Alexa server IPs, which may require researching their specific ranges.)<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 3: Create the Block Rule in the Firewall</strong><br>- Navigate to **Firewall &gt; Rules &gt; LAN** (or the appropriate interface for your Alexa devices).<br>- Click the **+** button to add a new rule.<br>- Set **Action** to **Block**.<br>- Set **Interface** to **LAN** (or appropriate interface).<br>- Set **Protocol** to **Any** (since you may want to block all types of traffic).<br>- In the **Source** section:<br>  - Set **Source** to **Single Host or Alias**.<br>  - In the **Source Address**, choose the <code>AlexaDevice</code> alias from the dropdown.<br>- In the **Destination** section:<br>  - Set **Destination** to **Single Host or Alias**.<br>  - In the **Destination Address**, choose the <code>AmazonAlexaServers</code> alias from the dropdown.<br>- Under the **Log** section:<br>  - Check the **Log packets that are handled by this rule** option.<br>  - Add your custom log message in the **Description** box: <br>    - <code>Blocking Amazon device transmission to Amazon Alexa server</code>.<br>- Click **Save** and then **Apply Changes**.<br><br><strong>Step 4: Apply Rule Changes</strong><br>- Go to the top right and click **Apply Changes** to activate your new rule.<br><br>This setup blocks traffic from devices in the **AlexaDevice** alias from reaching Amazon Alexa servers, logs those attempts, and tags them with the custom message you specified.</p>
</blockquote>
<p>Interestingly, ChatGPT gives me the full process to make the rule, but that's probably not surprising. Given the training data and refinements through use, the probabilities for responding to this question are almost certainly skewed more towards a step by step response than a simple table, like ZenArmor's examples.</p>
<h2>Step 7: Bing Copilot</h2>
<p>Putting in the prompt generated this output:</p>
<div class="content user-select-text" tabindex="0" aria-description="" aria-label="Sent by Copilot: Sure! Here's how you can create an OPNsense firewall rule to block traffic from a group of IP addresses called &#96;AlexaDevice&#96; to Amazon's Alexa servers and log the traffic with a specific message:

1. **Create Aliases**:
   - Go to **Firewall &gt; Aliases**.
   - Create an alias named &#96;AlexaDevice&#96; and add the IP addresses of your Alexa devices.
   - Create another alias named &#96;AmazonAlexaServers&#96; and add the IP addresses of Amazon's Alexa servers.

2. **Create the Firewall Rule**:
   - Go to **Firewall &gt; Rules &gt; [Your Interface]** (e.g., LAN).
   - Click on **Add** to create a new rule.
   - Set the following parameters:
     - **Action**: Block
     - **Interface**: [Your Interface] (e.g., LAN)
     - **Protocol**: Any
     - **Source**: Single host or alias, and select &#96;AlexaDevice&#96;
     - **Source Port Range**: Any
     - **Destination**: Single host or alias, and select &#96;AmazonAlexaServers&#96;
     - **Destination Port Range**: Any
     - **Description**: Blocking Amazon device transmission to Amazon Alexa server
     - **Log**: Check the box to enable logging
     - **Log Message**: &quot;Blocking Amazon device transmission to Amazon Alexa server&quot;

3. **Save and Apply**:
   - Click **Save** to save the rule.
   - Click **Apply Changes** to activate the rule.

This setup will block any traffic from the devices in the &#96;AlexaDevice&#96; alias to the &#96;AmazonAlexaServers&#96; alias and log the traffic with the specified message[^1^][^2^].

If you need further assistance, feel free to ask!">
<div class="ac-container ac-adaptiveCard has-image">
<div class="ac-textBlock">
<blockquote>
<p>Sure! Here’s how you can create an OPNsense firewall rule to block traffic from a group of IP addresses called <code>AlexaDevice</code> to Amazon’s Alexa servers and log the traffic with a specific message:</p>
<ol>
<li>
<p><strong>Create Aliases</strong>:</p>
<ul>
<li>Go to <strong>Firewall &gt; Aliases</strong>.</li>
<li>Create an alias named <code>AlexaDevice</code> and add the IP addresses of your Alexa devices.</li>
<li>Create another alias named <code>AmazonAlexaServers</code> and add the IP addresses of Amazon’s Alexa servers.</li>
</ul>
</li>
<li>
<p><strong>Create the Firewall Rule</strong>:</p>
<ul>
<li>Go to <strong>Firewall &gt; Rules &gt; [Your Interface]</strong> (e.g., LAN).</li>
<li>Click on <strong>Add</strong> to create a new rule.</li>
<li>Set the following parameters:
<ul>
<li><strong>Action</strong>: Block</li>
<li><strong>Interface</strong>: [Your Interface] (e.g., LAN)</li>
<li><strong>Protocol</strong>: Any</li>
<li><strong>Source</strong>: Single host or alias, and select <code>AlexaDevice</code></li>
<li><strong>Source Port Range</strong>: Any</li>
<li><strong>Destination</strong>: Single host or alias, and select <code>AmazonAlexaServers</code></li>
<li><strong>Destination Port Range</strong>: Any</li>
<li><strong>Description</strong>: Blocking Amazon device transmission to Amazon Alexa server</li>
<li><strong>Log</strong>: Check the box to enable logging</li>
<li><strong>Log Message</strong>: “Blocking Amazon device transmission to Amazon Alexa server”</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Save and Apply</strong>:</p>
<ul>
<li>Click <strong>Save</strong> to save the rule.</li>
<li>Click <strong>Apply Changes</strong> to activate the rule.</li>
</ul>
</li>
</ol>
<p><a href="https://homenetworkguy.com/how-to/firewall-rules-cheat-sheet/" class="tooltip-target" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-59-group" h="ID=SERP,5015.1" target="_blank" rel="noopener">This setup will block any traffic from the devices in the <code>AlexaDevice</code> alias to the <code>AmazonAlexaServers</code> alias and log the traffic with the specified message</a><a href="https://homenetworkguy.com/how-to/firewall-rules-cheat-sheet/" class="ac-anchor sup-target" target="_blank" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-57" aria-label="1: AmazonAlexaServers" h="ID=SERP,5015.1" rel="noopener"><sup class="citation-sup">1</sup></a><a href="https://forum.opnsense.org/index.php?topic=34331.0" class="ac-anchor sup-target" target="_blank" data-citationid="53673d85-94e0-1d56-5b27-7e8b36d59e71-59" aria-label="2: AmazonAlexaServers" h="ID=SERP,5015.1" rel="noopener"><sup class="citation-sup">2</sup></a>.</p>
<p>If you need further assistance, feel free to ask!</p>
</blockquote>
</div>
<div class="ac-horizontal-separator" aria-hidden="true"> </div>
</div>
<div class="ad-container">Bing Copilot's response is a lot more comparable to my own writing and is honestly easier to read, although it's presupposing a higher level of knowledge/tech competence from the user.</div>
<h2>Which is Better?</h2>
<p>Without the ability to actually test these, it's hard to say. Here's what I can tell from looking at both responses and comparing to my own:</p>
<ul>
<li>ChatGPT gives more detail on how to actually set the options, and includes setup instructions for the aliases.</li>
<li>Bing Copilot is more easily readable and faster to copy the settings from.</li>
<li>Both of the AI responses don't set the IP version, which means that was an optional setting I didn't need to set.</li>
<li>Neither of the AI responses included an actual IP address for Alexa's servers.</li>
</ul>
<p>Interestingly, neither of the LLM generated replies attempted to provide an actual IP address for Alexa's server(s). That's something to keep in mind for future use: if it's not explicitly pointed out by the prompt, it won't get done.</p>
<h2>What's Next?</h2>
<p>Since OPNsense is still a no go for now, actually testing out this rule is a no-go.</p>
<p>So what I'll do is move onto an even harder step, creating Suricata rules, which I <em>can </em>test.</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 2.0: CLI is a UX Failure</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-20/</id>
        <media:content url="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" medium="image" />
            <category term="UX/UI"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-08-30T12:00:27-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." />
                    I never intended for there to be a four week gap between the entries in this project, but there's good reason&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03-2.jpg" class="type:primaryImage" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." /></p>
                <p>I never intended for there to be a four week gap between the entries in this project, but<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> there's good reason for it.</span></p>
<p>First, I passed my CompTIA Security+ exam about a week and a half after the first entry.</p>
<p>Second, I spent a <strong>lot </strong>of time banging my head against OPNSense/FreeBSD's Command Line Interface, which caused a lot of problems.</p>
<p>Let's get into those.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1i6ihgpmq2k">Problem 1: Ventoy</a></li>
<li><a href="#mcetoc_1i6i0fcoua">Problem 2: Drivers</a></li>
<li><a href="#mcetoc_1i6ihgpmq2l">Problem 3: FreeBSD/OPNsense CLI</a></li>
<li> </li>
<li><a href="#mcetoc_1i711djhs41">Problem 4: Did Anyone Try This on Dual Port Devices?</a></li>
<li><a href="#mcetoc_1i711djhs42">What's Next?</a></li>
</ul>
</div>
<h2 id="mcetoc_1i6ihgpmq2k">Problem 1: Ventoy</h2>
<p>The problem of installing operating systems has long plagued anyone who works with technology.</p>
<p>In the past, you would have to burn a disk image in some format onto a literal disk (a CD-ROM/DVD-ROM/etc...) or a USB drive, typically filling all or most of the storage on that disk. This was fine, because you could just buy a cheap, sub-$10 4-8 gigabyte flash drive.</p>
<p>These days, when the $0-10 flash drive market is dominated by 16+ GB flash drives, burning <strong>one </strong>image to a drive is a ludicrous waste of space, even if Windows ISOs balloon up to 6GB if you include all sorts of plugins and frameworks for productivity tasks.</p>
<p><a href="https://www.ventoy.net/" target="_blank" rel="noopener noreferrer">Ventoy is software</a> that allows your USB drive to host multiple ISOs and gives you a GUI to select which one is booted/installed.</p>
<p>Installing OPNSense requires downloading an image... which is confusingly labelled <code>amd64</code>, even though it's apparently compatible with just about anything. This is just the <strong>first </strong>of <strong>many </strong>usability issues, because most people are more familiar with 64 bit operating systems being labelled <code>x64</code>.</p>
<p>It turns out that Ventoy doesn't like the <code>.img</code> format, so I was looking at a potential massive progression blocker. Luckily, someone reported the latest version of the OPNSense ISO was compatible with the latest version of Ventoy, so I tried to update my USB drive.</p>
<p>It turned out that trying to update via the actual EXE file was impossible, so I had to install an ISO on my Ventoy USB to update my Ventoy USB.</p>
<p>...</p>
<p>Setting that aside, I then had to reboot a computer, disable secure boot on said computer, boot into Ventoy to boot the updater ISO, then reboot the PC to reenable secure boot. Which is an absurd amount of steps to accomplish a simple task, but sadly was the most straight forward part of this whole process.</p>
<h2 id="mcetoc_1i6i0fcoua">Problem 2: Drivers</h2>
<p>For the less tech savvy amongst the audience, drivers are software that take the commands a device receives from the user and translates them into instructions for the hardware. Then they translate the output of the hardware generates into forms other parts of the system and/or the user receive.</p>
<p>Basically, if you don't have drivers for your hardware, or they break for some reason (*cough* Windows 11 rolling back GPU drivers *cough*), things aren't going to end well.</p>
<h2 id="mcetoc_1i6ihgpmq2l"><strong>Problem 3: FreeBSD/OPNsense CLI</strong></h2>
<p>The bane of modern technology is the ancient, antiquated user experience of the command line interface.</p>
<p>Is it incredibly fast and powerful if you know what you're doing? Yes. But if you want a summary of its flaws in the use case of "I need to install drivers to enable internet connectivity", here you go:</p>
<h2 id="mcetoc_1i6ihgpmq2m" style="margin-top: 2.28571rem; font-family: var(--font-base); font-weight: var(--font-weight-bold); letter-spacing: var(--letter-spacing); font-size: 1.60181em;"><figure class="post__image"><img loading="lazy"  style="font-size: inherit; letter-spacing: var(--letter-spacing); color: var(--text-primary-color); font-family: var(--editor-font-family); font-weight: var(--font-weight-normal); outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;" src="https://korgano.github.io/media/posts/20/cli-ux-sucks.png" alt="LinkedIn post by the author explaining usability failures in OPNSense command line shell interface." width="865" height="1005" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-xs.png 384w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-sm.png 600w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-md.png 768w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-lg.png 1200w ,https://korgano.github.io/media/posts/20/responsive/cli-ux-sucks-xl.png 1600w"></figure></h2>
<p>It gets even worse from there.</p>
<p>So, after multiple tries and having to reload the Bing Copilot multiple times on my phone, because accessing it via browser causes it to auto-reset if you don't focus on the tab for a certain amount of time, I got it done.</p>
<p>I managed to update the drivers, and I was confronted by this:</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb05.jpg" alt="Post-installation instructions from the Intel ethernet driver, telling user what lines to add to various configuration files." width="735" height="889" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb05-xl.jpg 1600w"></figure>
<p>After all the issues I'd run into up until this point, it should surprise no one that I took this picture. But what I didn't realize was that following these instructions wasn't the best idea. As it turns out, OPNsense doesn't recommend directly editing <code>/etc/loader.conf</code>.</p>
<p>In fact, it gives you a message when you access said file that boils down to "If you want to make changes here, go make a <code>/etc/loader.conf.local</code> file and make those changes there." I missed this initially, due to mental fatigue from everything I'd been through to that point. It took my hard work being wiped by rebooting the miniPC to make me realize there was an issue there.</p>
<p>Once I figured out my issues there, I ran into an issue that I hadn't expected while trying to setup the bridge: the ethernet port numbers were reversed.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb03.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to expected re0 ethernet port on the left and arrow pointing to expected re1 ethernet port on the right." width="1280" height="684" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb03-xl.jpg 1600w"></figure>
<p>How did I discover this, you might ask?</p>
<p>Well, I was trying to connect to the webGUI via ethernet connection from what I <strong>thought </strong>was <code>re1</code> to a laptop, and nothing I did was working. Initially, I believed it to be the fault of a particularly old, janky looking ethernet cable, but swapping it out for a shorter, but better looking cable didn't solve the problem. I checked the port status for <code>re1</code> via <code>ifconfig</code>, but the status was down, which was confusing, because I could see the activity light on the port flashing like crazy.</p>
<p>After way too much time getting nowhere, I decided to check <code>re0</code>... and saw the status was <strong>up</strong>.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/20/cyber-proj-tfb04.jpg" alt="Image showing rear of BOSGAME MiniPC, with arrow pointing to re1 ethernet port on the left and arrow pointing to re0 ethernet port on the right." width="1280" height="684" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-xs.jpg 384w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-sm.jpg 600w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-md.jpg 768w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-lg.jpg 1200w ,https://korgano.github.io/media/posts/20/responsive/cyber-proj-tfb04-xl.jpg 1600w"></figure>
<p>This is apparently a non-infrequent occurrence, and highlights yet another weakness of command line interfaces. A basic GUI that captured and presented network activity would've alerted me to this issue far sooner.</p>
<p>Once I was past this hurdle, I could log into the webGUI and begin configuring the transparent filtering bridge.</p>
<h2 id="mcetoc_1i711djhs41">Problem 4: Did Anyone Try This on Dual Port Devices?</h2>
<p>Following the instructions to initialize the transparent filtering bridge was simple and straightforward, and having set a management IP address on the bridge, I connected it to my router and modem. I got my internet... for a few seconds before the Suricata IPS crashed.</p>
<p>It took me a while to figure out what was going on, but since I had access to the webGUI via ethernet, I could look at the crash dumps and find key phrases. The specific fatal error that came up led me to an OPNSense forum thread that gave me the lead that Suricata might be the culprit.</p>
<p>With that out of the way, I hooked things up back up, and got the transparent filtering bridge back up. Just with a new problem - I couldn't access the webGUI. I had access to the console, because I had the miniPC plugged into a monitor and connected to a wireless mouse and keyboard. But without webGUI access, I couldn't update the OPNSense software - which is a major problem for security, even setting aside the fact that several patches were released between when I downloaded the ISO and when I installed it on the miniPC.</p>
<p>In fact, this seems to be a fairly common issue with OPNSense and transparent filtering bridges:</p>
<ul>
<li><a href="https://forum.opnsense.org/index.php?topic=42645.0" rel="nofollow">https://forum.opnsense.org/index.php?topic=42645.0</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1c8oo2p/comment/l2ve6yl/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1c8oo2p/comment/l2ve6yl/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1f608es/transparent_filtering_bridge_issues/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1f608es/transparent_filtering_bridge_issues/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1c9ic3g/access_transparent_bridge_configuration_from_lan/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1c9ic3g/access_transparent_bridge_configuration_from_lan/</a></li>
<li><a href="https://www.reddit.com/r/opnsense/comments/1ckqyjj/reaching_gui_after_placing_opnsense_between/" rel="nofollow">https://www.reddit.com/r/opnsense/comments/1ckqyjj/reaching_gui_after_placing_opnsense_between/</a></li>
<li><a href="https://forum.opnsense.org/index.php?topic=40032.0" rel="nofollow">https://forum.opnsense.org/index.php?topic=40032.0</a></li>
</ul>
<p>It turns out that I wasn't the only one who saw the Dave's Garage video that kicked this project off and wanted to setup their own transparent filtering bridge, only to run into the same type of problem.</p>
<p>Unfortunately, this is an impassable roadblock for me, at least at the moment. Attempting to use the miniPC's wireless connection as the management interface is a no-go, for two important reasons:</p>
<ol>
<li>I couldn't connect it to my home network at all, which is why I had to install ethernet drivers off a USB.</li>
<li>For some reason, the command <code>ifconfig [WiFi interface] down</code> completely removed the ability to use the device.</li>
</ol>
<p>That's right, I have a wireless networking device that I <strong>cannot </strong>use because shutting it down apparently wiped the association to the drivers it was using.</p>
<p>FreeBSD/OPNSense is wonderful like that.</p>
<p>Theoretically, adding a third ethernet port via USB <strong>might </strong>solve the problem. The widespread nature of the problem and other people's noted failures with that solution make me hesitate. On one hand, I'm not particularly thrilled to spend more money on this project to solve a problem that is not my fault. On the other, it's at least a general purpose device I can use in other situations if it fails to solve the problem.</p>
<h2 id="mcetoc_1i711djhs42">What's Next?</h2>
<p>Well, having submitted a bug report that will (hopefully) lead to this problem being solved, I'm pivoting focus.</p>
<p>Not to a new project, but to the inevitable next step: making firewall and IPS rules.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity Project: Transparent Filtering Bridge (+ Extras) 1.0 </title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-10/"/>
        <id>https://korgano.github.io/cybersecurity-project-transparent-filtering-bridge-extras-10/</id>
        <media:content url="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-08-05T13:02:47-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." />
                    For the past month and a week, preparation for the CompTIA Security+ exam has taken up a lot of time&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01-2.jpg" class="type:primaryImage" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." /></p>
                <p>For the past month and a week, preparation for the CompTIA Security+ exam has taken up a lot of time and mental capacity. Starting a new cybersecurity related project didn't seem appealing unless it was simple, straightforward, and tapped into existing skills.</p>
<p>However, I had such a project in my back pocket, something I'd seen months earlier, but couldn't do at the time: setting up a transparent filtering bridge.</p>
<h2>What's a Transparent Filtering Bridge?</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/dTUvlFfThPw" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>A transparent filtering bridge is a computing device that takes in packets, inspects them, determines if they're safe or not, and then passes the safe ones through.</p>
<p>The transparent part refers to the fact that the network doesn't know that the device is there, requiring no alterations to the network configuration. This is a great benefit, because if something goes wrong, you can simply remove the device from the network entirely and restore the direct modem/router connection (or whatever your previous arrangement was).</p>
<h2>The Network Layout</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/NetworkFilterBridge.drawio.svg" alt="Network diagram with a firewall in between a modem and a network segment featuring a router with multiple devices connected by WiFi, plus a Raspberry PI DNS black hole and a laptop connected by ethernet." width="607" height="471"></figure>
<p>Since I'm implementing this in a mesh network, I'll be connecting to only one of the three routers, which happens to be the one that the Pi-Hole is connected to. And for the same reason - this connects directly to the modem, making it the logical place to handle filtering while maintaining good performance.</p>
<h2>The MiniPC</h2>
<p>Picking the host system for this was interesting. The MiniPC space has exploded in the last few years, thanks to Intel and AMD flooding the market with a wide variety of low power processors that can outperform Raspberry Pis and utilize common desktop/laptop components (SSDs and RAM).</p>
<p>There were a few key requirements for the hardware:</p>
<ol>
<li>At least two (2) RJ45 ethernet ports.</li>
<li>More than 1 Gig ethernet speed.</li>
<li>At least 4 cores/4 threads for the CPU.</li>
<li>Decent/upgradeable RAM - minimum 8GB.</li>
<li>Cost: $200 <strong>maximum</strong>.</li>
</ol>
<p>Of the five requirements, the cost and RAM quantity were the most flexible, for two reasons. First, if the MiniPC design supported upgradable RAM, a low initial quantity could later be replaced as needed. Second, $200 was a soft cap - if there was a particularly good deal in terms of hardware for the price, paying more would make sense.</p>
<p>Also, part of the reason I didn't immediately jump on this project was because Florida has two sales tax holidays for computer hardware - one at the end of July/beginning of August, and one at the beginning of January. By waiting, I would cut 6.5% off of the total price of the hardware.</p>
<p>Everything else was a hard requirement. MiniPCs are <strong>far </strong>less upgradable than normal PCs, due to their compact nature. More of the components are hard soldered to the motherboard, so whatever you buy has to not only <strong>not </strong>bottleneck your network performance, but potentially last 5+ years (or at least until you can get an equally good deal).</p>
<p>So, what did I wind up picking?</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/cyber-proj-tfb01.jpg" alt="Newegg store page for BOSGAME MiniPC featuring 2.5G ethernet, Intel N100 CPU, 16GB RAM, and 512GB SSD." width="1920" height="962" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb01-xl.jpg 1600w"></figure>
<p>In a stroke of great timing, Newegg had a deal on this MiniPC, which was recommended in the Dave's Garage video I posted earlier. It met every single one of my requirements:</p>
<ol>
<li>Two (2) RJ45 ethernet jacks.</li>
<li>2.5 Gig ethernet speed.</li>
<li>4 cores/4 threads on the CPU.</li>
<li><strong>16 </strong>GBs of RAM.</li>
<li>Less than $200.</li>
</ol>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/cyber-proj-tfb02.jpg" alt="BOSGAME MiniPC CPU specs: 4 cores, 4 threads, 3.4GHz max frequency, 6 watt total power draw." width="1272" height="833" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/cyber-proj-tfb02-xl.jpg 1600w"></figure>
<p>Coincidentally, the N100's specs are very similar to the first gaming CPU I ever used to build a PC with - the legendary i5-3570K. The main differences are in node, power draw, and of course, size of the actual chip.</p>
<p>Also, importantly, this is <strong>not </strong>a Raptor Lake chip, so I don't have to worry about the CPU degradation issues that are plaguing those CPUs.</p>
<p>Based on these specs, there are only a few scenarios that I can see where this device needs to be replaced within five years:</p>
<ul>
<li>General failure.</li>
<li>Affordable 2+ GB fiber ethernet comes to my area.</li>
<li>Home routers start shipping with 5 gig ethernet ports as standard.</li>
</ul>
<p>In every other scenario, the routers and internet connection to my home are going to be performance bottlenecks, especially since I ordered a Cat 8 ethernet cable to directly connect this MiniPC to my modem.</p>
<h2>Hands On</h2>
<p>Having received the PC (luckily, before Florida was hit by a hurricane), I can speak to the physical aspects of the device.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075033412.jpg" alt="Size comparison of the BOSGAME MiniPC to a notebook given away at a cybersecurity event." width="1975" height="845" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075033412-xl.jpg 1600w"></figure>
<p>Comparing the size of the box with the common size of gift notebooks from cybersecurity events gives you a ballpark idea of how small the total package is.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075050397.jpg" alt="Bottom of the box details." width="2015" height="1344" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075050397-xl.jpg 1600w"></figure>
<p>The bottom of the box has the manufacturing details, hardware specifications, and on the barcode label, which operating system is installed on the system.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075509820.jpg" alt="The accessories for the BOSGAME MiniPC - the power adapter, a mounting bracket, and an HDMI cable." width="2000" height="1500" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075509820-xl.jpg 1600w"></figure>
<p>The only accessories are the power adapter, a mounting bracket with screws for mounting the MiniPC to the back of a monitor, and an HDMI cable.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/19/IMG_20240805_075502150.jpg" alt="Bottom of the BOSGAME MiniPC, with instructions on how to enter BIOS or boot options." width="1568" height="1398" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-xs.jpg 384w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-sm.jpg 600w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-md.jpg 768w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-lg.jpg 1200w ,https://korgano.github.io/media/posts/19/responsive/IMG_20240805_075502150-xl.jpg 1600w"></figure>
<p>One nice quality of life feature is the fact that instructions on how to enter BIOS or the boot options are printed directly onto the bottom of the case. There's also an extra barcode label that confirms what system configuration you have.</p>
<p>The build quality is generally solid, with the minor exception of the front input/output. The plastic of the top cover has some flex there, possibly due to the geometry and requirement for it to be removable for SSD/RAM upgrades. The only other surprise was the presence of a "press this with a paper clip" sized button for resetting the BIOS on the front panel. Quite useful if something goes horribly wrong.</p>
<p>The only attribute of the design I'm somewhat uncertain about is the cooling. Not just whether the cooler is sufficient for peak thermal load if there's a particularly stressful task, but about the thermal interface material (TIM). The TIM is a heat conductive material that allows heat to flow from the chip to the cooler, and if it's a bog standard thermal paste, repeated heating/cooling cycles can lead it to pump out of the gap between the two.</p>
<p>Graphite thermal pads and phase change material are good solutions to this issue, but that would require a full tear down, which would require some extra research that's outside the scope of this project.</p>
<p>With the primary hardware in hand, the only thing left is the CAT 8 ethernet cable, and then the project really get going.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - Statistic Analysis</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/</id>
        <media:content url="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-06-26T13:28:59-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." />
                    It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" class="type:primaryImage" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." /></p>
                <p>It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted packets wasn't providing many real insights, it's time to pivot statistics, courtesy of Wireshark!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1i1b4mninv">Conversations</a></li>
<li><a href="#mcetoc_1i1bau7n34h">Insights</a></li>
<li><a href="#mcetoc_1i1bfsvr76g">Preliminary Takeaways</a></li>
</ul>
</div>
<h2 id="mcetoc_1i1b4mninv">Conversations</h2>
<p>Under the Statistics options in Wireshark, Conversations is the fourth option, but possibly the most useful in terms of network flow analysis. The tool generates a table of the source/destination IPs, the total number of packets exchanged between them, the total bytes exchanged in the conversation, how many packets and bytes were exchanged in a specific direction, the relative start time of the conversation, the duration, and what the connection speed was in a specific direction.</p>
<p>You can export this table to a spreadsheet via copying as a CSV, which I did.</p>
<p>Why? Because if you remember earlier in this project, I generated a list of domains and the IPs associated with them. By copying the conversation data into the spreadsheet, I could then add the domains to those conversations, providing even greater context to my analysis.</p>
<p>This allowed me to see any outliers in the data, which weren't apparent when focusing on specific packet captures.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/18/EGS-capture-conversations.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." width="1919" height="792" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xs.png 384w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-sm.png 600w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-md.png 768w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-lg.png 1200w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xl.png 1600w"></figure>
<h2 id="mcetoc_1i1bau7n34h">Insights</h2>
<p>Here are some interesting highlights from the data:</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 128.8px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 108.787px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.7125px;" width="83">Bits/s B → A</td>
<td style="width: 284.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 128.8px;" width="106">23.40.57.31</td>
<td style="width: 97.7375px;" width="59">9087</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 97.7375px;" width="101">1307</td>
<td style="width: 78.725px;" width="83">333 kB</td>
<td style="width: 97.7375px;" width="98">7780</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 108.787px;" width="83">302.7385</td>
<td style="width: 108.787px;" width="83">399.1212</td>
<td style="width: 77.7125px;" width="83">6680 bits/s</td>
<td style="width: 77.7125px;" width="83">221 kbps</td>
<td style="width: 284.875px;" width="428">e9616.d.akamaiedge.net/static-assets-prod.epicgames.com</td>
</tr>
</tbody>
</table>
<p>For example, we have this connection, which is initially to the domain <code>e9616.d.akamaiedge.net</code>, then executes a client hello that results in a connection to <code>static-assets-prod.epicgames.com</code>. This then results in 11 megabytes of data getting transferred to the EGS Host system. Based on the name of the domain, there's a high probability that this was just a number of images shown in the EGS client, likely thumbnails and banner images.</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 158.825px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 118.787px;" width="83">Rel Start</td>
<td style="width: 101.738px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 312.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 158.825px;" width="106">23.205.165.152</td>
<td style="width: 97.7375px;" width="59">38879</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 97.7375px;" width="101">3108</td>
<td style="width: 78.725px;" width="83">173 kB</td>
<td style="width: 97.7375px;" width="98">35771</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 118.787px;" width="83">306.18383</td>
<td style="width: 101.738px;" width="83">3.983</td>
<td style="width: 77.7125px;" width="83">348 kbps</td>
<td style="width: 77.725px;" width="83">108 Mbps</td>
<td style="width: 312.875px;" width="428">a1859.w27.akamai.net/epicgames-download1.akamaized.net</td>
</tr>
</tbody>
</table>
<p>Next, we have another connection to an Akamai domain that then hands off to an Epic Games server. It is much less clear what this could be, given the encrypted nature of the contents. The small file size, compared to another EGS download, and the fact that I couldn't download anything through the Unreal Engine store leads me to believe that this might just be an EGS client update.</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 95.725px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">146.75.126.33</td>
<td style="width: 97.7375px;" width="59">598444</td>
<td style="width: 78.725px;" width="83">684 MB</td>
<td style="width: 97.7375px;" width="101">149461</td>
<td style="width: 78.725px;" width="83">9 MB</td>
<td style="width: 97.7375px;" width="98">448983</td>
<td style="width: 78.725px;" width="83">675 MB</td>
<td style="width: 128.8px;" width="83">404.441049</td>
<td style="width: 108.787px;" width="83">273.8069</td>
<td style="width: 77.7125px;" width="83">250 kbps</td>
<td style="width: 77.725px;" width="83">19 Mbps</td>
<td style="width: 95.725px;"> </td>
</tr>
</tbody>
</table>
<p>This is an encrypted connection to <code>fastly-download.epicgames.com</code>, which is hosted on an AmazonS3 server. The 9 megabyte upload is highly suspicious, but the 675 megabyte download is <strong>also </strong>suspicious. However, if this was the initial EGS install/update, this might make some amount of sense.</p>
<p>(It does raise the question of why do you need over half a gigabyte of data for what's probably a browser. Even factoring in potential game dependencies like DirectX, C++, and .Net frameworks, it's a bit much.)</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 103.787px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 103.787px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 418.925px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">104.18.50.190</td>
<td style="width: 103.787px;" width="59">2606571</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 97.7375px;" width="101">779871</td>
<td style="width: 78.725px;" width="83">51 MB</td>
<td style="width: 103.787px;" width="98">1826700</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 128.8px;" width="83">620.386146</td>
<td style="width: 108.787px;" width="83">216.3353</td>
<td style="width: 77.7125px;" width="83">1903 kbps</td>
<td style="width: 77.725px;" width="83">102 Mbps</td>
<td style="width: 418.925px;" width="428">cloudflare.epicgamescdn.com.cdn.cloudflare.net</td>
</tr>
</tbody>
</table>
<p>The most suspicious thing about this connection is not that it's moving several gigabytes of data - this is the main connection where Unreal Engine 4.26 was downloaded.</p>
<p>It's the fact that 51 megabytes were sent from <strong>my PC </strong>to the download server that's concerning. There's no logical reason why so much data would need to move from the client to the server.</p>
<p>However, I do have a possible theory.</p>
<p>Remember how there was a 54MB download from <code>epicgames-download1.akamaized.net</code>? That's close enough in size to the mysterious upload to be suspicious.</p>
<p>There's a possibility that the initial 54MB download was some kind of encapsulated authorization token, which was then decapsulated after download and reuploaded to authorize the download from the Unreal Engine store. Why you would do this is a mystery, because there's likely any number of more efficient methods to accomplish this same goal.</p>
<p>There's also a possibility that there was simply a <strong>million </strong>54 byte ACK messages sent by my computer during the process. Unlike most of the other connections, this connection was only HTTP. Which makes sense - if you're going to be pushing tons of files, including many that are already compressed, adding encryption on top is not ideal.</p>
<p>(It does mean that I have nice list of filenames, hashes, and other data for various UE 4.26 components.)</p>
<h2 id="mcetoc_1i1bfsvr76g">Preliminary Takeaways</h2>
<p>With so many of the captured packets being encrypted and lacking a good TLS inspection system to use for another round of packet capture, it's time to put this project to bed.</p>
<p>So, what are my main takeaways?</p>
<ul>
<li>AnyDesk is a good remote desktop solution within the confines of a home network.</li>
<li>VirtualBox's lack of GPU pass through limits its utility as a tool for safely testing certain complex software that requires certain hardware features.</li>
<li>Sandboxie-Plus could be a good method of testing potentially compromised/suspicious software for home labbers, but too many features require a paid license for it to be a great solution.</li>
<li>Epic Games Store/Unreal Engine 4.26 may not behave properly when run in a basic Sandboxie configuration, making testing more difficult.</li>
<li>EGS and Unreal Engine only run a handful of limited processes, so there doesn't appear to be any spyware in them, beyond telemetry that can be disabled via settings menus.</li>
<li>Epic utilizes TLS for many of its internet connections to various servers, which is exemplary for security, but makes analysis of the actual traffic difficult without more advanced tools.</li>
<li>Wireshark's lack of a built-in tool to quickly dump domains and their associated IPs is quite unfortunate, and hurts efforts by end users to help add to community generated domain block lists.</li>
<li>In an investigation where you have a packet capture and no specific starting direction, the Conversations statistics generated by Wireshark can help identify IPs with traffic of interest.</li>
<li>Once you have a list of domains and their associated IPs, run a Wireshark command prompt command to dump all the IPs captured in the packet, then run some kind of script to obtain all relevant IPs and associate them with the domains.</li>
<li>EGS likes using Akamai domains as proxies/hosting for various servers, which does provide a bit of security via obscurity, but also leaves EGS potentially vulnerable to becoming a malware vector if the server is compromised.</li>
<li>EGS winds up uploading a large amount of data while downloading files over long periods of time.</li>
<li>54 byte ACK packets can build up over the duration of the connection and lead up to multi-megabyte totals.</li>
<li>Wireshark's Conversations statistics tool doesn't provide trend data, just overall totals and averages, which can be a bit misleading at first glance.</li>
</ul>
<p>Now that this project's wrapped up, I'll be spending time on shorter cybersecurity topics while I prepare for the CompTIA Security+ exam. So keep an eye out for a wild range of topics in the near future!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 3</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-3/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-3/</id>
        <media:content url="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-06-11T09:36:26-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" alt="Wireshark packet capture showing the three way TCP handshake at the top." />
                    Getting back to the Epic Games Store investigation, it's time to look into another IP address from the packet capture.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" class="type:primaryImage" alt="Wireshark packet capture showing the three way TCP handshake at the top." /></p>
                <p>Getting back to the Epic Games Store investigation, it's time to look into another IP address from the packet capture.</p>
<p>We'll be looking at the largest capture packet for one IP address, which is targeting the <code>eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c</code> domain.</p>
<h2>The Good Old 3-Way Handshake</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01.PNG" alt="Wireshark packet capture showing the three way TCP handshake at the top." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-xl.PNG 1600w"></figure>
<p>The first and most obvious feature of this packet capture is the three way SYN/SYN-ACK/ACK handshake of a TCP connection. Since this is the start of the interaction with the domain/IP, this makes total sense and should be expected.</p>
<p>The next most interesting feature of this capture is the Client Hello. In this case, we're interacting with <code>api.epicgames.dev</code>, which indicates this connection has a high probability of being related to the Unreal Engine part of EGS. If my Raspberry Pi had more RAM (it only has 2GB), I would consider setting up a SIEM to monitor this specific connection and events related to it.</p>
<p>What is confusing without visibility into the contents of the packets is why there's multiple other three way handshakes after the initial one.</p>
<h2>Lots of Server Hellos</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-02.PNG" alt="Wireshark packet capture showing multiple server hellos." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-xl.PNG 1600w"></figure>
<p>Curiously, more server hellos were given out. Scrolling down the packet capture gives a potential explanation:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-03.PNG" alt="Wireshark packet capture showing client key exchange." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-xl.PNG 1600w"></figure>
<p>Some of these odd server hellos are almost certainly associated with initiating a connection to obtain the certificate and client key exchange. Once that was done, the connection with the client key server ended.</p>
<p>Unfortunately for this analysis, but generally comforting for EGS users, TLSv1.2 makes it impossible to actually see the contents of the packets. </p>
<p>Continuing further down the capture, we see another key exchange, and then an odd number of resets:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-04.PNG" alt="Wireshark packet capture showing multiple resets." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-xl.PNG 1600w"></figure>
<p>Without visibility into the packet contents, it's hard to figure out why the there are so many resets. It's possible that they correlate with bouncing around the Unreal Engine store or some other part of the login process.</p>
<p>We'll skip the massive amount of unreadable and ACK packets that made up the majority of this packet capture, and jump to the end. Here, we find something interesting - that communication between the client and server paused for 45 seconds, requiring a TCP Keep-Alive transmission. </p>
<p>Another 15 seconds after that, an encrypted alert seems to trigger the end of the connection with the FIN-ACK packets.</p>
<h2>Future Research</h2>
<p>Without any way to decrypt the packets, there's not much more that can be done with this IP address. However, the fact that this connection is associated with an Epic Games API means that it's well worth researching in the future. While the connection doesn't last long, the amount of traffic is quite surprising. There's definitely something worth looking into here, even if it just turns out to be an anonymized survey of the system's hardware.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Cyber Thoughts: Computex 2024</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-computex-2024/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-computex-2024/</id>
        <media:content url="https://korgano.github.io/media/posts/16/computex2024.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="PC Hardware"/>
            <category term="PC"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-06-05T16:34:42-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/16/computex2024.jpg" alt="" />
                    We're in the dying days of Computex 2024, and I have some cybersecurity related thoughts. For those of you who&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/16/computex2024.jpg" class="type:primaryImage" alt="" /></p>
                <p>We're in the dying days of Computex 2024, and I have some cybersecurity related thoughts.</p>
<p>For those of you who aren't big computer hardware nerds, Computex is a big PC hardware vendor convention that typically occurs in Taipei, Taiwan. The main hardware vendors all either have keynote presentations at the event, or in the case of Nvidia, just before it, and lots of the secondary and tertiary vendors also make announce new products (everything from components to laptops and mini-PCs).</p>
<p>Since hardware runs all the software we use <strong>and </strong>hosts plenty of vulnerabilities, it's good to think about the cybersecurity implications of the tech we're going to be using in the foreseeable future.</p>
<h2>Nvidia promises us a nightmare future of AI and high prices</h2>
<p>Nvidia, the company that makes super expensive consumer graphics cards and supplies most AI companies with GPUs for training AI, decided to really push the idea of AI agents to investors and the mainstream press.</p>
<p>The basic TL;DR version of agents is pretty straight forward, actually:</p>
<ol>
<li>The user inputs some prompt into a general LLM chatbot.</li>
<li>The chatbot examines what the prompt contains and wants done.</li>
<li>The chatbot passes off an optimized version of the prompt to another LLM that is specifically trained for that task.</li>
<li>The optimized LLM runs the task and generates output.</li>
<li>The output is sent to the chatbot LLM.</li>
<li>The chatbot presents that output to the user.</li>
</ol>
<p>From a cybersecurity POV, this is a nightmare, for a few reasons:</p>
<ul>
<li>We now have to ensure confidentiality, integrity, and availability of <strong>multiple </strong>AI models and the content going to/from them.</li>
<li>We have to assess multiple AI models to ensure they aren't compromised, either by malware, vulnerabilities, or bad data.</li>
<li>If we want to run AI on local endpoints or even just on on-premises servers, the hardware requirements just skyrocketed.</li>
</ul>
<p>If you're wondering why that last point is there, just realize that it's now harder to propose getting local hardware to run AI. Because now, you need better hardware, and better hardware tends to be more expensive, <strong>especially </strong>in quantity.</p>
<p>(When the AI training bubble pops, there'll probably be a <strong>lot </strong>of hardware for sale, but whether it'll be any good for the purposes of running production level AI agents is an open question.)</p>
<h2>AMD got backstabbed by Microsoft, so now we're out of a cheap(er) AI solution</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/SeEBPbehttY" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>AMD would've had a solution to the AI hardware issue, but they don't, thanks to Microsoft not buying their proposed server chip.</p>
<p>As detailed by tech journalist and leaker Moore's Law is Dead, Turin AI (Turin being the code name for AMD's Zen 5 architecture) would have been a Neural Processing Engine chiplet that featured <strong>hundreds </strong>of TOPs of AI performance.</p>
<p>For reference, laptop processors with <strong>50 </strong>TOPs are considered impressive AI performance and a minimum specification by Microsoft.</p>
<p>Why does this matter?</p>
<p>Because AMD is the master of reusing their silicon. All of their consumer/prosumer products for desktops and workstations are basically server chiplets that didn't hit the efficiency standards for server SKUs. They then get filtered down the product stack to fill various price points and niches in the market.</p>
<p>So, by denying AMD the contract, Microsoft has denied the entire ecosystem of a cheap option for AI inference (output). Which is not great when executives and management get the AI agents brain bug and start pushing in that direction.</p>
<h2>Intel struggles to stay viable</h2>
<p>Intel, once the go-to PC hardware vendor for just about every major corporation and government, is not in a great place.</p>
<p>The past few years have been rough for Intel. Getting stuck on less advanced silicon nodes, having less advanced products than the competition, and of course, major hardware vulnerabilities (Spectre/Meltdown) all whittled away at their stranglehold on the PC markets.</p>
<p>At Computex, Intel showcased a bunch of its current problems:</p>
<ul>
<li>It's still not performance competitive with AMD in a lot of regards (CPU and NPU performance most obviously).</li>
<li>Lots of their products have been delayed, so they look even worse than they could have.</li>
<li>Their chip foundries haven't been pumping out lots of high quality product lately.</li>
<li>Their continuing tendency to talk about future products without actually getting their release cadence back on track.</li>
</ul>
<p>All of these are concerning, but the most concerning from a cybersecurity perspective is their lack of competitive performance. <a href="https://dl.acm.org/doi/10.1145/3620666.3651382" target="_blank" rel="noopener noreferrer">There's a whole slew of new potential exploits in the branch prediction parts of modern CPUs</a>. What's branch prediction? It's basically a way for the CPU to speed up operations by guessing the likely outcome of operations.</p>
<p>While a lot of these branch prediction exploits can be mitigated with better software programming, there's always the chance of a BIOS update that changes the microcode that controls the CPU. And when past Intel threat mitigations have produced up to 50% performance <strong>reductions</strong>, that's a major cybersecurity and operational issue. You're going to have to start air gapping systems if you can't replace them with higher performance parts.</p>
<h2>Get ready for Snapdragon X Elite software validation</h2>
<p>One thing that was shown to the public before Computex 2024 was Microsoft using Snapdragon X Elite as one of its Copilot+ laptop processors. These are ARM based processors, and for those of you who don't know, that's the architecture that most mobile phone CPUs use.</p>
<p>The general sentiment seems to be that Microsoft and laptop vendors are promoting these CPUs to put pressure on AMD and Intel in the laptop space, especially in the lower tier products. So what does that mean for us cybersecurity folks?</p>
<ul>
<li>Get ready to spend time validating that all your endpoint security software works. Windows 11 ARM edition might have good emulation, but that's no guarantee any of your security and monitoring will work.</li>
<li>Time to work up a whole new testing scheme for any and all X Elite based laptops that your organization thinks about adopting.</li>
<li>Somebody has to get good at vulnerability testing the X Elite <strong>and </strong>Windows 11 ARM edition.</li>
</ul>
<p>And these are just the <strong>obvious </strong>problems a novice like me can see. I'm sure there's plenty more you can think of.</p>
<h2>Get ready to purge Windows Recall from all your Copilot+ machines</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/oSBDkPxivuA" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>Windows Recall isn't even an official release yet, and there's already Python scripts designed to access the <strong>unencrypted </strong>database that application creates.</p>
<p>The safest course of action is going to be simply removing the whole thing until Microsoft implements some proper security... but at the same time, will anyone miss the extra CPU, RAM, and HDD/SSD utilization?</p>
<p>(Also, to push back on Mental Outlaw, this will <strong>not </strong>push people to Linux. As someone who's had UXUI training, Linux violates so many heuristics of good UXUI. You genuinely need to replace the various terminals with LLM chatbots to make widescale Linux adoption even somewhat viable.)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 2</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-2/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-2/</id>
        <media:content url="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-05-22T19:53:04-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" alt="Wireshark showing packet capture data." />
                    Last time, I began analyzing the Epic Games Store packet capture, looking for specific IPs associated with the domains I&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" class="type:primaryImage" alt="Wireshark showing packet capture data." /></p>
                <h2>Last time, I began analyzing the Epic Games Store packet capture, looking for specific IPs associated with the domains I felt were suspicious or interesting.</h2>
<p>It turns out that would be a more interesting challenge than I anticipate.</p>
<h2>You Are Corr-Wrong!</h2>
<p>The first domain I checked, <code>account-public-service-prod03.ol.epicgames.com</code>, had multiple IP addresses associated with it. Through sheer luck, I managed to find an IP address associated with while doing a manual search, and proceeded to analyze that traffic.</p>
<p>Since most of the other domains had multiple IPs as well, I decided to try using a script to find those IPs and save myself some time.</p>
<p>I started out this process by using Bing Copilot to help craft a PowerShell script to go through a list of the target domains, find any IP addresses associated with them, then output the list to a .txt file. This list would naturally include what domain was associated with the IP.</p>
<p>This perfectly functional PowerShell yielded no results, because PowerShell can't actually <strong>read </strong>the PCAPNG files, producing blank files.</p>
<p>After an embarrassing amount of time and effort, I realized the problem was that I needed to use Wireshark commands to export the IPs, <strong>then </strong>have a script filter them.</p>
<p>The Wireshark command was pretty simple, targeting <code>ip.src</code>, and using <code>sort -u</code> to isolate unique entries, before writing to a TXT file. I had to make a separate PCAPNG file, only containing packets with a frame length of 999 or less to get results within a reasonable time frame.</p>
<p>(Wireshark does not have a way to filter packets out by overall size, which is a major oversight, in my opinion.)</p>
<p>Once I had the final list of IPs, I created a PowerShell script (reusing chunks of code from the failed ones) that would go through the list and isolate the IPs I was looking for.</p>
<p>The final PowerShell script I used to filter is as follows:</p>
<blockquote>
<p># Specify the path to your input .txt file containing IP addresses and domains<br>$sourceFilePath = "C:\Users\Name\Documents\Wireshark\unique-ips.txt"<br><br># Read the contents of the input file<br>$contents = Get-Content -Path $sourceFilePath<br><br># Initialize an empty array to store filtered matches<br>$filteredMatches = @()<br><br># Define the list of domains and associated IP addresses<br>$domainIPs = @{<br>    "account-public-service-prod03.ol.epicgames.com" = @("67.202.34.139","54.164.66.255","54.157.123.125","52.205.83.9","52.204.56.84","52.203.65.171","52.0.67.196","44.213.56.223","44.210.17.243","44.207.113.23","35.172.106.180","34.232.183.200","34.225.203.251","34.199.93.64","34.195.107.174","3.92.110.224","3.229.220.193","3.225.60.110","3.225.40.182","3.216.207.164","18.213.90.193","18.211.229.42")<br>    "eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c" = @("44.217.241.174","44.199.125.179","44.196.130.161","34.232.128.104","18.214.111.142","107.20.77.29")<br>    "eos-gateway-ingressv2-prod-c3-w5.befa.live.use1a.on.epicgames.c" = @("54.87.104.91","54.243.92.17","44.211.107.46","35.168.219.102","34.236.78.98","3.210.177.30")<br>    "eulatracking-svc-prod06-pub-1257580502.us-east-1.elb.amazonaws." = @("52.71.213.248","35.173.104.176","35.168.30.157","18.211.121.225")<br>    "fp2e7a.wpc.phicdn.net" = @("192.229.211.108")<br>    "fp3011.wpc.phicdn.net" = @("152.195.50.149")<br>    "priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c" = @("54.156.160.204","50.17.0.218","44.208.219.139","35.170.218.26","34.201.95.44","34.198.192.237")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br><br>    # Add more domains and IPs as needed<br>}<br><br># Check each domain and associated IPs<br>foreach ($domain in $domainIPs.Keys) {<br>    $ips = $domainIPs[$domain]<br>    foreach ($ip in $ips) {<br>        if ($contents -match $ip) {<br>            $filteredMatches += "IP found for ${domain}: ${ip}"<br>            Write-Host "Match found: ${domain} (${ip})"<br>        }<br>    }<br>}<br><br># Output the filtered matches to a new text file<br>$filteredMatches | Out-File -FilePath "C:\Users\Name\Documents\Wireshark\egs-filtered-ips.txt"<br><br># Display a message indicating the operation is complete<br>Write-Host "Filtered matches have been saved to egs-filtered-ips.txt"</p>
</blockquote>
<h2>One Domain, Three IPs</h2>
<p>The results of filtering the IPs through the PowerShell script were <strong>very </strong>interesting:</p>
<blockquote>
<p>IP found for eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c: 44.199.125.179<br>IP found for eos-gateway-ingressv2-prod-c3-w5.befa.live.use1a.on.epicgames.c: 54.243.92.17<br>IP found for eulatracking-svc-prod06-pub-1257580502.us-east-1.elb.amazonaws.: 35.168.30.157<br>IP found for fp3011.wpc.phicdn.net: 152.195.50.149<br>IP found for priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c: 35.170.218.26<br>IP found for fp2e7a.wpc.phicdn.net: 192.229.211.108<br>IP found for account-public-service-prod03.ol.epicgames.com: 52.205.83.9<br>IP found for account-public-service-prod03.ol.epicgames.com: 52.0.67.196<br>IP found for account-public-service-prod03.ol.epicgames.com: 34.232.183.200</p>
</blockquote>
<p>That's right - the analysis I did last week was of <strong>one third </strong>of the traffic associated with the Epic Games Store public account service!</p>
<p>The lesson here is to scrape all your target IPs <strong>before </strong>you start analyzing.</p>
<h2>Take Two</h2>
<p>Having spilled spaghetti in front of the whole world, it's time to reexamine that traffic in light of this new information.</p>
<p>Following the procedure I used to undertake the first analysis, I generated a new PCAP that only contained the target IPs, using the following filter: <code>(ip.addr == 52.205.83.9) || (ip.addr == 52.0.67.196) || (ip.addr == 34.232.183.200)</code></p>
<p>This generated a 131 packet capture, which generally didn't have anything new in the TCP stream. But looking at the actual packets did provide some interesting data.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06-2.PNG" alt="Wireshark packet capture featuring IP address hand off for account-public-service-prod03.ol.epicgames.com" width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-xs.PNG 384w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-sm.PNG 600w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-md.PNG 768w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-lg.PNG 1200w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-xl.PNG 1600w"></figure>
<p>What appears to be happening is that after getting the initial certificate, an encrypted alert is passed on to the server, possibly confirming receipt of the data. This then triggers the client to end the connection to the first IP address.</p>
<p>Then the client begins the three way handshake with the server at the second IP address. Once that's completed, the new server initiates a certificate and server key exchange.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-07.PNG" alt="The second switch of IP addresses from account-public-service-prod03.ol.epicgames.com." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-xs.PNG 384w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-sm.PNG 600w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-md.PNG 768w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-lg.PNG 1200w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-xl.PNG 1600w"></figure>
<p>The network traffic here is a bit more interesting. For some reason, the connection resets after an encrypted alert, at which point, the client connects to the third IP address.</p>
<p>It's unclear <strong>why </strong>the connection would reset, especially since I don't have anyway to execute TLS inspection, but it does stick out like a thumb compared the rest of the traffic. (Possible reasons include: the general awfulness of Spectrum internet, my internet being disrupted by software updates on the Raspberry Pi I use to host Pi-Hole, any kind of service disruption on Amazon's end.)</p>
<p>Examining the packet further just shows a standard FIN exchange after exchanging data.</p>
<p>The time gap in switching between the first two IPS seems to point towards the possibility that it related to switching between EGS proper and the Unreal.  But without the ability to inspect the unencrypted packets, it's hard to be sure what the traffic represents.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 1</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-1/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-1/</id>
        <media:content url="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" medium="image" />
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-05-15T10:27:43-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" alt="Wireshark Packet Capture of traffic to domain account-public-service-prod03.ol.epicgames.com" />
                    Last time, we took a look a number of suspicious domains captured in network traffic to a sandboxed Epic Games&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" class="type:primaryImage" alt="Wireshark Packet Capture of traffic to domain account-public-service-prod03.ol.epicgames.com" /></p>
                <p>Last time, we took a look a number of suspicious domains captured in network traffic to a sandboxed Epic Games Store installation.</p>
<p>To progress the investigation, we're going to look a number of IP addresses for the following domain: <code>account-public-service-prod03.ol.epicgames.com</code></p>
<p>This was a particularly interesting domain for analysis, due to two past malware detections:</p>
<blockquote>
<p>Sep 19, 2021    8e7c791dd2a860fb8ff4630b4079351d9865c73316d3071664a8cab86737e890                TEL:Trojan:Win64/GoCLR.MR!MTB<br>Aug 31, 2019    b81db9595e7cdc16ca6f106f5610e4442cbaf9049940938b34ce759a42688dfa    Win32:BackdoorX-gen\ [Trj]        Win.Trojan.Tofsee-6840338-0    Backdoor:Win32/Tofsee.T</p>
</blockquote>
<h2>Figuring Out the IP</h2>
<p>The first step of the process is figuring out which IP associated with the domain was actually being used. There were 22 IP addresses associated with the domain, and unless EGS decided to bounce between them all during the process, only one was in use.</p>
<p>This required me to go through the list of IPs until I finally found the one IP that was utilized for the connection, which took a decent amount of time due to the size of my packet capture.</p>
<p>Luckily, I found it on the fourth attempt - <code>52.205.83.9</code>.</p>
<p>To make examining the data easier, I then ran a filter for <code>ip.dst</code> and <code>ip.src</code> using that address, before exporting that filtered data to a new PCAP file. The new PCAP was much smaller - surprisingly small, in fact.</p>
<h2>A Short Handshake</h2>
<p>With a total length of 50 packets, the exchange starts off with a TCP Handshake, which constitutes the first three packets. Then there's a client hello, with TLS 1.2 encapsulation, which renders a lot of the packet contents into unreadable gibberish.</p>
<p>However, there are bits and pieces that can be gleaned from examining the TCP stream.</p>
<h2>A Bunch of HTTP</h2>
<p>One thing that stood out to me in the TCP stream was the number of visible HTTP addresses.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-02.PNG" alt="TCP stream of traffic going to account-public-service-prod03.ol.epicgames.com." width="1068" height="869" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-xl.PNG 1600w"></figure>
<p>On one hand, the fact that they were Amazon addresses was <strong>not </strong>a surprise. Epic Games seems to use AWS infrastructure for all their online functionality. In fact, if you set Wireshark <code>Name Resolution &gt; Resolve Network Addresses</code>, you get the following:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-05.PNG" alt="Wireshark capture of account-public-service-prod03.ol.epicgames.com showing that the Epic Games IP address is an Amazon EC2 instance." width="1600" height="114" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-xl.PNG 1600w"></figure>
<p>What <strong>did </strong>stand out to me was the use of HTTP in outwards facing URLs. Especially ones that could be accessed, to a limited degree, by non-Amazon individuals:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-03.PNG" alt="Nginx server associated with account-public-service-prod03.ol.epicgames.com certificate distribution." width="1600" height="378" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-xl.PNG 1600w"></figure>
<p>This might explain how Trojans wound up being distributed by this domain. It's entirely possible that malware was placed onto this server and distributed to other systems via the certificates, since they are automatically downloaded upon connection to the specified URL.</p>
<h2>Other Interesting Tidbits</h2>
<p>One interesting tidbit of information was that there's a root certificate authority operating out of Scottsdale, Arizona.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-04.PNG" alt="Certificate authority out of Scottsdale, Arizona associated with account-public-service-prod03.ol.epicgames.com." width="1068" height="869" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-xl.PNG 1600w"></figure>
<p>Starfield Technologies apparently provides the public key certificates for some of Amazon's web services. <a href="https://www.amazontrust.com/repository/" target="_blank" rel="noopener noreferrer">According to Amazon</a>:</p>
<blockquote>
<p>"Starfield Services Root Certificate Authority - G2" is an older root that is compatible with other older trust stores and clients that can not be updated. Including all five of the roots ensure maximum compatibility for your application.</p>
</blockquote>
<h2>Next Steps</h2>
<p>Since there doesn't seem to be much traffic or anything really unusual going on with this IP address, it's time to look somewhere else.</p>
<p>The next IP address to check is going to the one associated with <code>priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c</code>, which has a decent likelihood of generating a large volume of traffic. Will there be anything interesting to learn?</p>
            ]]>
        </content>
    </entry>
</feed>
