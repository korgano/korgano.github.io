<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>XS Tech Thoughts</title>
    <link href="https://korgano.github.io/feed.xml" rel="self" />
    <link href="https://korgano.github.io" />
    <updated>2024-07-02T11:11:08-04:00</updated>
    <author>
        <name>Xavier Santana</name>
    </author>
    <id>https://korgano.github.io</id>

    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - Statistic Analysis</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-4/</id>
        <media:content url="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-06-26T13:28:59-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." />
                    It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/18/EGS-capture-conversations-2.png" class="type:primaryImage" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." /></p>
                <p>It's time to continue my grind through the data from the Epic Games Store packet capture! Since looking at encrypted packets wasn't providing many real insights, it's time to pivot statistics, courtesy of Wireshark!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1i1b4mninv">Conversations</a></li>
<li><a href="#mcetoc_1i1bau7n34h">Insights</a></li>
<li><a href="#mcetoc_1i1bfsvr76g">Preliminary Takeaways</a></li>
</ul>
</div>
<h2 id="mcetoc_1i1b4mninv">Conversations</h2>
<p>Under the Statistics options in Wireshark, Conversations is the fourth option, but possibly the most useful in terms of network flow analysis. The tool generates a table of the source/destination IPs, the total number of packets exchanged between them, the total bytes exchanged in the conversation, how many packets and bytes were exchanged in a specific direction, the relative start time of the conversation, the duration, and what the connection speed was in a specific direction.</p>
<p>You can export this table to a spreadsheet via copying as a CSV, which I did.</p>
<p>Why? Because if you remember earlier in this project, I generated a list of domains and the IPs associated with them. By copying the conversation data into the spreadsheet, I could then add the domains to those conversations, providing even greater context to my analysis.</p>
<p>This allowed me to see any outliers in the data, which weren't apparent when focusing on specific packet captures.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/18/EGS-capture-conversations.png" alt="Wireshark Conversations dump in Excel, showing connection properties and associated domains." width="1919" height="792" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xs.png 384w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-sm.png 600w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-md.png 768w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-lg.png 1200w ,https://korgano.github.io/media/posts/18/responsive/EGS-capture-conversations-xl.png 1600w"></figure>
<h2 id="mcetoc_1i1bau7n34h">Insights</h2>
<p>Here are some interesting highlights from the data:</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 128.8px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 108.787px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.7125px;" width="83">Bits/s B → A</td>
<td style="width: 284.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 128.8px;" width="106">23.40.57.31</td>
<td style="width: 97.7375px;" width="59">9087</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 97.7375px;" width="101">1307</td>
<td style="width: 78.725px;" width="83">333 kB</td>
<td style="width: 97.7375px;" width="98">7780</td>
<td style="width: 78.725px;" width="83">11 MB</td>
<td style="width: 108.787px;" width="83">302.7385</td>
<td style="width: 108.787px;" width="83">399.1212</td>
<td style="width: 77.7125px;" width="83">6680 bits/s</td>
<td style="width: 77.7125px;" width="83">221 kbps</td>
<td style="width: 284.875px;" width="428">e9616.d.akamaiedge.net/static-assets-prod.epicgames.com</td>
</tr>
</tbody>
</table>
<p>For example, we have this connection, which is initially to the domain <code>e9616.d.akamaiedge.net</code>, then executes a client hello that results in a connection to <code>static-assets-prod.epicgames.com</code>. This then results in 11 megabytes of data getting transferred to the EGS Host system. Based on the name of the domain, there's a high probability that this was just a number of images shown in the EGS client, likely thumbnails and banner images.</p>
<table width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 158.825px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 118.787px;" width="83">Rel Start</td>
<td style="width: 101.738px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 312.875px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 158.825px;" width="106">23.205.165.152</td>
<td style="width: 97.7375px;" width="59">38879</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 97.7375px;" width="101">3108</td>
<td style="width: 78.725px;" width="83">173 kB</td>
<td style="width: 97.7375px;" width="98">35771</td>
<td style="width: 78.725px;" width="83">54 MB</td>
<td style="width: 118.787px;" width="83">306.18383</td>
<td style="width: 101.738px;" width="83">3.983</td>
<td style="width: 77.7125px;" width="83">348 kbps</td>
<td style="width: 77.725px;" width="83">108 Mbps</td>
<td style="width: 312.875px;" width="428">a1859.w27.akamai.net/epicgames-download1.akamaized.net</td>
</tr>
</tbody>
</table>
<p>Next, we have another connection to an Akamai domain that then hands off to an Epic Games server. It is much less clear what this could be, given the encrypted nature of the contents. The small file size, compared to another EGS download, and the fact that I couldn't download anything through the Unreal Engine store leads me to believe that this might just be an EGS client update.</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 97.7375px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 97.7375px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 95.725px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">146.75.126.33</td>
<td style="width: 97.7375px;" width="59">598444</td>
<td style="width: 78.725px;" width="83">684 MB</td>
<td style="width: 97.7375px;" width="101">149461</td>
<td style="width: 78.725px;" width="83">9 MB</td>
<td style="width: 97.7375px;" width="98">448983</td>
<td style="width: 78.725px;" width="83">675 MB</td>
<td style="width: 128.8px;" width="83">404.441049</td>
<td style="width: 108.787px;" width="83">273.8069</td>
<td style="width: 77.7125px;" width="83">250 kbps</td>
<td style="width: 77.725px;" width="83">19 Mbps</td>
<td style="width: 95.725px;"> </td>
</tr>
</tbody>
</table>
<p>This is an encrypted connection to <code>fastly-download.epicgames.com</code>, which is hosted on an AmazonS3 server. The 9 megabyte upload is highly suspicious, but the 675 megabyte download is <strong>also </strong>suspicious. However, if this was the initial EGS install/update, this might make some amount of sense.</p>
<p>(It does raise the question of why do you need over half a gigabyte of data for what's probably a browser. Even factoring in potential game dependencies like DirectX, C++, and .Net frameworks, it's a bit much.)</p>
<table style="width: 0px;" width="1470">
<tbody>
<tr>
<td style="width: 99.7375px;" width="97">Address A</td>
<td style="width: 148.812px;" width="106">Address B</td>
<td style="width: 103.787px;" width="59">Packets</td>
<td style="width: 78.725px;" width="83">Bytes</td>
<td style="width: 97.7375px;" width="101">Packets A → B</td>
<td style="width: 78.725px;" width="83">Bytes A → B</td>
<td style="width: 103.787px;" width="98">Packets B → A</td>
<td style="width: 78.725px;" width="83">Bytes B → A</td>
<td style="width: 128.8px;" width="83">Rel Start</td>
<td style="width: 108.787px;" width="83">Duration</td>
<td style="width: 77.7125px;" width="83">Bits/s A → B</td>
<td style="width: 77.725px;" width="83">Bits/s B → A</td>
<td style="width: 418.925px;">Domain</td>
</tr>
<tr>
<td style="width: 99.7375px;" width="97">EGS Host</td>
<td style="width: 148.812px;" width="106">104.18.50.190</td>
<td style="width: 103.787px;" width="59">2606571</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 97.7375px;" width="101">779871</td>
<td style="width: 78.725px;" width="83">51 MB</td>
<td style="width: 103.787px;" width="98">1826700</td>
<td style="width: 78.725px;" width="83">3 GB</td>
<td style="width: 128.8px;" width="83">620.386146</td>
<td style="width: 108.787px;" width="83">216.3353</td>
<td style="width: 77.7125px;" width="83">1903 kbps</td>
<td style="width: 77.725px;" width="83">102 Mbps</td>
<td style="width: 418.925px;" width="428">cloudflare.epicgamescdn.com.cdn.cloudflare.net</td>
</tr>
</tbody>
</table>
<p>The most suspicious thing about this connection is not that it's moving several gigabytes of data - this is the main connection where Unreal Engine 4.26 was downloaded.</p>
<p>It's the fact that 51 megabytes were sent from <strong>my PC </strong>to the download server that's concerning. There's no logical reason why so much data would need to move from the client to the server.</p>
<p>However, I do have a possible theory.</p>
<p>Remember how there was a 54MB download from <code>epicgames-download1.akamaized.net</code>? That's close enough in size to the mysterious upload to be suspicious.</p>
<p>There's a possibility that the initial 54MB download was some kind of encapsulated authorization token, which was then decapsulated after download and reuploaded to authorize the download from the Unreal Engine store. Why you would do this is a mystery, because there's likely any number of more efficient methods to accomplish this same goal.</p>
<p>There's also a possibility that there was simply a <strong>million </strong>54 byte ACK messages sent by my computer during the process. Unlike most of the other connections, this connection was only HTTP. Which makes sense - if you're going to be pushing tons of files, including many that are already compressed, adding encryption on top is not ideal.</p>
<p>(It does mean that I have nice list of filenames, hashes, and other data for various UE 4.26 components.)</p>
<h2 id="mcetoc_1i1bfsvr76g">Preliminary Takeaways</h2>
<p>With so many of the captured packets being encrypted and lacking a good TLS inspection system to use for another round of packet capture, it's time to put this project to bed.</p>
<p>So, what are my main takeaways?</p>
<ul>
<li>AnyDesk is a good remote desktop solution within the confines of a home network.</li>
<li>VirtualBox's lack of GPU pass through limits its utility as a tool for safely testing certain complex software that requires certain hardware features.</li>
<li>Sandboxie-Plus could be a good method of testing potentially compromised/suspicious software for home labbers, but too many features require a paid license for it to be a great solution.</li>
<li>Epic Games Store/Unreal Engine 4.26 may not behave properly when run in a basic Sandboxie configuration, making testing more difficult.</li>
<li>EGS and Unreal Engine only run a handful of limited processes, so there doesn't appear to be any spyware in them, beyond telemetry that can be disabled via settings menus.</li>
<li>Epic utilizes TLS for many of its internet connections to various servers, which is exemplary for security, but makes analysis of the actual traffic difficult without more advanced tools.</li>
<li>Wireshark's lack of a built-in tool to quickly dump domains and their associated IPs is quite unfortunate, and hurts efforts by end users to help add to community generated domain block lists.</li>
<li>In an investigation where you have a packet capture and no specific starting direction, the Conversations statistics generated by Wireshark can help identify IPs with traffic of interest.</li>
<li>Once you have a list of domains and their associated IPs, run a Wireshark command prompt command to dump all the IPs captured in the packet, then run some kind of script to obtain all relevant IPs and associate them with the domains.</li>
<li>EGS likes using Akamai domains as proxies/hosting for various servers, which does provide a bit of security via obscurity, but also leaves EGS potentially vulnerable to becoming a malware vector if the server is compromised.</li>
<li>EGS winds up uploading a large amount of data while downloading files over long periods of time.</li>
<li>54 byte ACK packets can build up over the duration of the connection and lead up to multi-megabyte totals.</li>
<li>Wireshark's Conversations statistics tool doesn't provide trend data, just overall totals and averages, which can be a bit misleading at first glance.</li>
</ul>
<p>Now that this project's wrapped up, I'll be spending time on shorter cybersecurity topics while I prepare for the CompTIA Security+ exam. So keep an eye out for a wild range of topics in the near future!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 3</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-3/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-3/</id>
        <media:content url="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-06-11T09:36:26-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" alt="Wireshark packet capture showing the three way TCP handshake at the top." />
                    Getting back to the Epic Games Store investigation, it's time to look into another IP address from the packet capture.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01-2.PNG" class="type:primaryImage" alt="Wireshark packet capture showing the three way TCP handshake at the top." /></p>
                <p>Getting back to the Epic Games Store investigation, it's time to look into another IP address from the packet capture.</p>
<p>We'll be looking at the largest capture packet for one IP address, which is targeting the <code>eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c</code> domain.</p>
<h2>The Good Old 3-Way Handshake</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-01.PNG" alt="Wireshark packet capture showing the three way TCP handshake at the top." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-01-xl.PNG 1600w"></figure>
<p>The first and most obvious feature of this packet capture is the three way SYN/SYN-ACK/ACK handshake of a TCP connection. Since this is the start of the interaction with the domain/IP, this makes total sense and should be expected.</p>
<p>The next most interesting feature of this capture is the Client Hello. In this case, we're interacting with <code>api.epicgames.dev</code>, which indicates this connection has a high probability of being related to the Unreal Engine part of EGS. If my Raspberry Pi had more RAM (it only has 2GB), I would consider setting up a SIEM to monitor this specific connection and events related to it.</p>
<p>What is confusing without visibility into the contents of the packets is why there's multiple other three way handshakes after the initial one.</p>
<h2>Lots of Server Hellos</h2>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-02.PNG" alt="Wireshark packet capture showing multiple server hellos." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-02-xl.PNG 1600w"></figure>
<p>Curiously, more server hellos were given out. Scrolling down the packet capture gives a potential explanation:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-03.PNG" alt="Wireshark packet capture showing client key exchange." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-03-xl.PNG 1600w"></figure>
<p>Some of these odd server hellos are almost certainly associated with initiating a connection to obtain the certificate and client key exchange. Once that was done, the connection with the client key server ended.</p>
<p>Unfortunately for this analysis, but generally comforting for EGS users, TLSv1.2 makes it impossible to actually see the contents of the packets. </p>
<p>Continuing further down the capture, we see another key exchange, and then an odd number of resets:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/17/EGS-prod-c1-w4.befa-04.PNG" alt="Wireshark packet capture showing multiple resets." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-xs.PNG 384w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-sm.PNG 600w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-md.PNG 768w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-lg.PNG 1200w ,https://korgano.github.io/media/posts/17/responsive/EGS-prod-c1-w4.befa-04-xl.PNG 1600w"></figure>
<p>Without visibility into the packet contents, it's hard to figure out why the there are so many resets. It's possible that they correlate with bouncing around the Unreal Engine store or some other part of the login process.</p>
<p>We'll skip the massive amount of unreadable and ACK packets that made up the majority of this packet capture, and jump to the end. Here, we find something interesting - that communication between the client and server paused for 45 seconds, requiring a TCP Keep-Alive transmission. </p>
<p>Another 15 seconds after that, an encrypted alert seems to trigger the end of the connection with the FIN-ACK packets.</p>
<h2>Future Research</h2>
<p>Without any way to decrypt the packets, there's not much more that can be done with this IP address. However, the fact that this connection is associated with an Epic Games API means that it's well worth researching in the future. While the connection doesn't last long, the amount of traffic is quite surprising. There's definitely something worth looking into here, even if it just turns out to be an anonymized survey of the system's hardware.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Quick Cyber Thoughts: Computex 2024</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/quick-cyber-thoughts-computex-2024/"/>
        <id>https://korgano.github.io/quick-cyber-thoughts-computex-2024/</id>
        <media:content url="https://korgano.github.io/media/posts/16/computex2024.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="PC Hardware"/>
            <category term="PC"/>
            <category term="Cybersecurity"/>
            <category term="AI"/>

        <updated>2024-06-05T16:34:42-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/16/computex2024.jpg" alt="" />
                    We're in the dying days of Computex 2024, and I have some cybersecurity related thoughts. For those of you who&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/16/computex2024.jpg" class="type:primaryImage" alt="" /></p>
                <p>We're in the dying days of Computex 2024, and I have some cybersecurity related thoughts.</p>
<p>For those of you who aren't big computer hardware nerds, Computex is a big PC hardware vendor convention that typically occurs in Taipei, Taiwan. The main hardware vendors all either have keynote presentations at the event, or in the case of Nvidia, just before it, and lots of the secondary and tertiary vendors also make announce new products (everything from components to laptops and mini-PCs).</p>
<p>Since hardware runs all the software we use <strong>and </strong>hosts plenty of vulnerabilities, it's good to think about the cybersecurity implications of the tech we're going to be using in the foreseeable future.</p>
<h2>Nvidia promises us a nightmare future of AI and high prices</h2>
<p>Nvidia, the company that makes super expensive consumer graphics cards and supplies most AI companies with GPUs for training AI, decided to really push the idea of AI agents to investors and the mainstream press.</p>
<p>The basic TL;DR version of agents is pretty straight forward, actually:</p>
<ol>
<li>The user inputs some prompt into a general LLM chatbot.</li>
<li>The chatbot examines what the prompt contains and wants done.</li>
<li>The chatbot passes off an optimized version of the prompt to another LLM that is specifically trained for that task.</li>
<li>The optimized LLM runs the task and generates output.</li>
<li>The output is sent to the chatbot LLM.</li>
<li>The chatbot presents that output to the user.</li>
</ol>
<p>From a cybersecurity POV, this is a nightmare, for a few reasons:</p>
<ul>
<li>We now have to ensure confidentiality, integrity, and availability of <strong>multiple </strong>AI models and the content going to/from them.</li>
<li>We have to assess multiple AI models to ensure they aren't compromised, either by malware, vulnerabilities, or bad data.</li>
<li>If we want to run AI on local endpoints or even just on on-premises servers, the hardware requirements just skyrocketed.</li>
</ul>
<p>If you're wondering why that last point is there, just realize that it's now harder to propose getting local hardware to run AI. Because now, you need better hardware, and better hardware tends to be more expensive, <strong>especially </strong>in quantity.</p>
<p>(When the AI training bubble pops, there'll probably be a <strong>lot </strong>of hardware for sale, but whether it'll be any good for the purposes of running production level AI agents is an open question.)</p>
<h2>AMD got backstabbed by Microsoft, so now we're out of a cheap(er) AI solution</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/SeEBPbehttY" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>AMD would've had a solution to the AI hardware issue, but they don't, thanks to Microsoft not buying their proposed server chip.</p>
<p>As detailed by tech journalist and leaker Moore's Law is Dead, Turin AI (Turin being the code name for AMD's Zen 5 architecture) would have been a Neural Processing Engine chiplet that featured <strong>hundreds </strong>of TOPs of AI performance.</p>
<p>For reference, laptop processors with <strong>50 </strong>TOPs are considered impressive AI performance and a minimum specification by Microsoft.</p>
<p>Why does this matter?</p>
<p>Because AMD is the master of reusing their silicon. All of their consumer/prosumer products for desktops and workstations are basically server chiplets that didn't hit the efficiency standards for server SKUs. They then get filtered down the product stack to fill various price points and niches in the market.</p>
<p>So, by denying AMD the contract, Microsoft has denied the entire ecosystem of a cheap option for AI inference (output). Which is not great when executives and management get the AI agents brain bug and start pushing in that direction.</p>
<h2>Intel struggles to stay viable</h2>
<p>Intel, once the go-to PC hardware vendor for just about every major corporation and government, is not in a great place.</p>
<p>The past few years have been rough for Intel. Getting stuck on less advanced silicon nodes, having less advanced products than the competition, and of course, major hardware vulnerabilities (Spectre/Meltdown) all whittled away at their stranglehold on the PC markets.</p>
<p>At Computex, Intel showcased a bunch of its current problems:</p>
<ul>
<li>It's still not performance competitive with AMD in a lot of regards (CPU and NPU performance most obviously).</li>
<li>Lots of their products have been delayed, so they look even worse than they could have.</li>
<li>Their chip foundries haven't been pumping out lots of high quality product lately.</li>
<li>Their continuing tendency to talk about future products without actually getting their release cadence back on track.</li>
</ul>
<p>All of these are concerning, but the most concerning from a cybersecurity perspective is their lack of competitive performance. <a href="https://dl.acm.org/doi/10.1145/3620666.3651382" target="_blank" rel="noopener noreferrer">There's a whole slew of new potential exploits in the branch prediction parts of modern CPUs</a>. What's branch prediction? It's basically a way for the CPU to speed up operations by guessing the likely outcome of operations.</p>
<p>While a lot of these branch prediction exploits can be mitigated with better software programming, there's always the chance of a BIOS update that changes the microcode that controls the CPU. And when past Intel threat mitigations have produced up to 50% performance <strong>reductions</strong>, that's a major cybersecurity and operational issue. You're going to have to start air gapping systems if you can't replace them with higher performance parts.</p>
<h2>Get ready for Snapdragon X Elite software validation</h2>
<p>One thing that was shown to the public before Computex 2024 was Microsoft using Snapdragon X Elite as one of its Copilot+ laptop processors. These are ARM based processors, and for those of you who don't know, that's the architecture that most mobile phone CPUs use.</p>
<p>The general sentiment seems to be that Microsoft and laptop vendors are promoting these CPUs to put pressure on AMD and Intel in the laptop space, especially in the lower tier products. So what does that mean for us cybersecurity folks?</p>
<ul>
<li>Get ready to spend time validating that all your endpoint security software works. Windows 11 ARM edition might have good emulation, but that's no guarantee any of your security and monitoring will work.</li>
<li>Time to work up a whole new testing scheme for any and all X Elite based laptops that your organization thinks about adopting.</li>
<li>Somebody has to get good at vulnerability testing the X Elite <strong>and </strong>Windows 11 ARM edition.</li>
</ul>
<p>And these are just the <strong>obvious </strong>problems a novice like me can see. I'm sure there's plenty more you can think of.</p>
<h2>Get ready to purge Windows Recall from all your Copilot+ machines</h2>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/oSBDkPxivuA" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>Windows Recall isn't even an official release yet, and there's already Python scripts designed to access the <strong>unencrypted </strong>database that application creates.</p>
<p>The safest course of action is going to be simply removing the whole thing until Microsoft implements some proper security... but at the same time, will anyone miss the extra CPU, RAM, and HDD/SSD utilization?</p>
<p>(Also, to push back on Mental Outlaw, this will <strong>not </strong>push people to Linux. As someone who's had UXUI training, Linux violates so many heuristics of good UXUI. You genuinely need to replace the various terminals with LLM chatbots to make widescale Linux adoption even somewhat viable.)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 2</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-2/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-2/</id>
        <media:content url="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-05-22T19:53:04-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" alt="Wireshark showing packet capture data." />
                    Last time, I began analyzing the Epic Games Store packet capture, looking for specific IPs associated with the domains I&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06.PNG" class="type:primaryImage" alt="Wireshark showing packet capture data." /></p>
                <h2>Last time, I began analyzing the Epic Games Store packet capture, looking for specific IPs associated with the domains I felt were suspicious or interesting.</h2>
<p>It turns out that would be a more interesting challenge than I anticipate.</p>
<h2>You Are Corr-Wrong!</h2>
<p>The first domain I checked, <code>account-public-service-prod03.ol.epicgames.com</code>, had multiple IP addresses associated with it. Through sheer luck, I managed to find an IP address associated with while doing a manual search, and proceeded to analyze that traffic.</p>
<p>Since most of the other domains had multiple IPs as well, I decided to try using a script to find those IPs and save myself some time.</p>
<p>I started out this process by using Bing Copilot to help craft a PowerShell script to go through a list of the target domains, find any IP addresses associated with them, then output the list to a .txt file. This list would naturally include what domain was associated with the IP.</p>
<p>This perfectly functional PowerShell yielded no results, because PowerShell can't actually <strong>read </strong>the PCAPNG files, producing blank files.</p>
<p>After an embarrassing amount of time and effort, I realized the problem was that I needed to use Wireshark commands to export the IPs, <strong>then </strong>have a script filter them.</p>
<p>The Wireshark command was pretty simple, targeting <code>ip.src</code>, and using <code>sort -u</code> to isolate unique entries, before writing to a TXT file. I had to make a separate PCAPNG file, only containing packets with a frame length of 999 or less to get results within a reasonable time frame.</p>
<p>(Wireshark does not have a way to filter packets out by overall size, which is a major oversight, in my opinion.)</p>
<p>Once I had the final list of IPs, I created a PowerShell script (reusing chunks of code from the failed ones) that would go through the list and isolate the IPs I was looking for.</p>
<p>The final PowerShell script I used to filter is as follows:</p>
<blockquote>
<p># Specify the path to your input .txt file containing IP addresses and domains<br>$sourceFilePath = "C:\Users\Name\Documents\Wireshark\unique-ips.txt"<br><br># Read the contents of the input file<br>$contents = Get-Content -Path $sourceFilePath<br><br># Initialize an empty array to store filtered matches<br>$filteredMatches = @()<br><br># Define the list of domains and associated IP addresses<br>$domainIPs = @{<br>    "account-public-service-prod03.ol.epicgames.com" = @("67.202.34.139","54.164.66.255","54.157.123.125","52.205.83.9","52.204.56.84","52.203.65.171","52.0.67.196","44.213.56.223","44.210.17.243","44.207.113.23","35.172.106.180","34.232.183.200","34.225.203.251","34.199.93.64","34.195.107.174","3.92.110.224","3.229.220.193","3.225.60.110","3.225.40.182","3.216.207.164","18.213.90.193","18.211.229.42")<br>    "eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c" = @("44.217.241.174","44.199.125.179","44.196.130.161","34.232.128.104","18.214.111.142","107.20.77.29")<br>    "eos-gateway-ingressv2-prod-c3-w5.befa.live.use1a.on.epicgames.c" = @("54.87.104.91","54.243.92.17","44.211.107.46","35.168.219.102","34.236.78.98","3.210.177.30")<br>    "eulatracking-svc-prod06-pub-1257580502.us-east-1.elb.amazonaws." = @("52.71.213.248","35.173.104.176","35.168.30.157","18.211.121.225")<br>    "fp2e7a.wpc.phicdn.net" = @("192.229.211.108")<br>    "fp3011.wpc.phicdn.net" = @("152.195.50.149")<br>    "priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c" = @("54.156.160.204","50.17.0.218","44.208.219.139","35.170.218.26","34.201.95.44","34.198.192.237")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br>#    "" = @("","")<br><br>    # Add more domains and IPs as needed<br>}<br><br># Check each domain and associated IPs<br>foreach ($domain in $domainIPs.Keys) {<br>    $ips = $domainIPs[$domain]<br>    foreach ($ip in $ips) {<br>        if ($contents -match $ip) {<br>            $filteredMatches += "IP found for ${domain}: ${ip}"<br>            Write-Host "Match found: ${domain} (${ip})"<br>        }<br>    }<br>}<br><br># Output the filtered matches to a new text file<br>$filteredMatches | Out-File -FilePath "C:\Users\Name\Documents\Wireshark\egs-filtered-ips.txt"<br><br># Display a message indicating the operation is complete<br>Write-Host "Filtered matches have been saved to egs-filtered-ips.txt"</p>
</blockquote>
<h2>One Domain, Three IPs</h2>
<p>The results of filtering the IPs through the PowerShell script were <strong>very </strong>interesting:</p>
<blockquote>
<p>IP found for eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c: 44.199.125.179<br>IP found for eos-gateway-ingressv2-prod-c3-w5.befa.live.use1a.on.epicgames.c: 54.243.92.17<br>IP found for eulatracking-svc-prod06-pub-1257580502.us-east-1.elb.amazonaws.: 35.168.30.157<br>IP found for fp3011.wpc.phicdn.net: 152.195.50.149<br>IP found for priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c: 35.170.218.26<br>IP found for fp2e7a.wpc.phicdn.net: 192.229.211.108<br>IP found for account-public-service-prod03.ol.epicgames.com: 52.205.83.9<br>IP found for account-public-service-prod03.ol.epicgames.com: 52.0.67.196<br>IP found for account-public-service-prod03.ol.epicgames.com: 34.232.183.200</p>
</blockquote>
<p>That's right - the analysis I did last week was of <strong>one third </strong>of the traffic associated with the Epic Games Store public account service!</p>
<p>The lesson here is to scrape all your target IPs <strong>before </strong>you start analyzing.</p>
<h2>Take Two</h2>
<p>Having spilled spaghetti in front of the whole world, it's time to reexamine that traffic in light of this new information.</p>
<p>Following the procedure I used to undertake the first analysis, I generated a new PCAP that only contained the target IPs, using the following filter: <code>(ip.addr == 52.205.83.9) || (ip.addr == 52.0.67.196) || (ip.addr == 34.232.183.200)</code></p>
<p>This generated a 131 packet capture, which generally didn't have anything new in the TCP stream. But looking at the actual packets did provide some interesting data.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-06-2.PNG" alt="Wireshark packet capture featuring IP address hand off for account-public-service-prod03.ol.epicgames.com" width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-xs.PNG 384w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-sm.PNG 600w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-md.PNG 768w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-lg.PNG 1200w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-06-2-xl.PNG 1600w"></figure>
<p>What appears to be happening is that after getting the initial certificate, an encrypted alert is passed on to the server, possibly confirming receipt of the data. This then triggers the client to end the connection to the first IP address.</p>
<p>Then the client begins the three way handshake with the server at the second IP address. Once that's completed, the new server initiates a certificate and server key exchange.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/15/EGS-account-pub-serv-07.PNG" alt="The second switch of IP addresses from account-public-service-prod03.ol.epicgames.com." width="1600" height="860" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-xs.PNG 384w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-sm.PNG 600w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-md.PNG 768w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-lg.PNG 1200w ,https://korgano.github.io/media/posts/15/responsive/EGS-account-pub-serv-07-xl.PNG 1600w"></figure>
<p>The network traffic here is a bit more interesting. For some reason, the connection resets after an encrypted alert, at which point, the client connects to the third IP address.</p>
<p>It's unclear <strong>why </strong>the connection would reset, especially since I don't have anyway to execute TLS inspection, but it does stick out like a thumb compared the rest of the traffic. (Possible reasons include: the general awfulness of Spectrum internet, my internet being disrupted by software updates on the Raspberry Pi I use to host Pi-Hole, any kind of service disruption on Amazon's end.)</p>
<p>Examining the packet further just shows a standard FIN exchange after exchanging data.</p>
<p>The time gap in switching between the first two IPS seems to point towards the possibility that it related to switching between EGS proper and the Unreal.  But without the ability to inspect the unencrypted packets, it's hard to be sure what the traffic represents.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - IPs 1</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-1/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ips-1/</id>
        <media:content url="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" medium="image" />
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-05-15T10:27:43-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" alt="Wireshark Packet Capture of traffic to domain account-public-service-prod03.ol.epicgames.com" />
                    Last time, we took a look a number of suspicious domains captured in network traffic to a sandboxed Epic Games&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv.PNG" class="type:primaryImage" alt="Wireshark Packet Capture of traffic to domain account-public-service-prod03.ol.epicgames.com" /></p>
                <p>Last time, we took a look a number of suspicious domains captured in network traffic to a sandboxed Epic Games Store installation.</p>
<p>To progress the investigation, we're going to look a number of IP addresses for the following domain: <code>account-public-service-prod03.ol.epicgames.com</code></p>
<p>This was a particularly interesting domain for analysis, due to two past malware detections:</p>
<blockquote>
<p>Sep 19, 2021    8e7c791dd2a860fb8ff4630b4079351d9865c73316d3071664a8cab86737e890                TEL:Trojan:Win64/GoCLR.MR!MTB<br>Aug 31, 2019    b81db9595e7cdc16ca6f106f5610e4442cbaf9049940938b34ce759a42688dfa    Win32:BackdoorX-gen\ [Trj]        Win.Trojan.Tofsee-6840338-0    Backdoor:Win32/Tofsee.T</p>
</blockquote>
<h2>Figuring Out the IP</h2>
<p>The first step of the process is figuring out which IP associated with the domain was actually being used. There were 22 IP addresses associated with the domain, and unless EGS decided to bounce between them all during the process, only one was in use.</p>
<p>This required me to go through the list of IPs until I finally found the one IP that was utilized for the connection, which took a decent amount of time due to the size of my packet capture.</p>
<p>Luckily, I found it on the fourth attempt - <code>52.205.83.9</code>.</p>
<p>To make examining the data easier, I then ran a filter for <code>ip.dst</code> and <code>ip.src</code> using that address, before exporting that filtered data to a new PCAP file. The new PCAP was much smaller - surprisingly small, in fact.</p>
<h2>A Short Handshake</h2>
<p>With a total length of 50 packets, the exchange starts off with a TCP Handshake, which constitutes the first three packets. Then there's a client hello, with TLS 1.2 encapsulation, which renders a lot of the packet contents into unreadable gibberish.</p>
<p>However, there are bits and pieces that can be gleaned from examining the TCP stream.</p>
<h2>A Bunch of HTTP</h2>
<p>One thing that stood out to me in the TCP stream was the number of visible HTTP addresses.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-02.PNG" alt="TCP stream of traffic going to account-public-service-prod03.ol.epicgames.com." width="1068" height="869" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-02-xl.PNG 1600w"></figure>
<p>On one hand, the fact that they were Amazon addresses was <strong>not </strong>a surprise. Epic Games seems to use AWS infrastructure for all their online functionality. In fact, if you set Wireshark <code>Name Resolution &gt; Resolve Network Addresses</code>, you get the following:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-05.PNG" alt="Wireshark capture of account-public-service-prod03.ol.epicgames.com showing that the Epic Games IP address is an Amazon EC2 instance." width="1600" height="114" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-05-xl.PNG 1600w"></figure>
<p>What <strong>did </strong>stand out to me was the use of HTTP in outwards facing URLs. Especially ones that could be accessed, to a limited degree, by non-Amazon individuals:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-03.PNG" alt="Nginx server associated with account-public-service-prod03.ol.epicgames.com certificate distribution." width="1600" height="378" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-03-xl.PNG 1600w"></figure>
<p>This might explain how Trojans wound up being distributed by this domain. It's entirely possible that malware was placed onto this server and distributed to other systems via the certificates, since they are automatically downloaded upon connection to the specified URL.</p>
<h2>Other Interesting Tidbits</h2>
<p>One interesting tidbit of information was that there's a root certificate authority operating out of Scottsdale, Arizona.</p>
<figure class="post__image"><img loading="lazy"  src="https://korgano.github.io/media/posts/14/EGS-account-pub-serv-04.PNG" alt="Certificate authority out of Scottsdale, Arizona associated with account-public-service-prod03.ol.epicgames.com." width="1068" height="869" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-xs.PNG 384w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-sm.PNG 600w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-md.PNG 768w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-lg.PNG 1200w ,https://korgano.github.io/media/posts/14/responsive/EGS-account-pub-serv-04-xl.PNG 1600w"></figure>
<p>Starfield Technologies apparently provides the public key certificates for some of Amazon's web services. <a href="https://www.amazontrust.com/repository/" target="_blank" rel="noopener noreferrer">According to Amazon</a>:</p>
<blockquote>
<p>"Starfield Services Root Certificate Authority - G2" is an older root that is compatible with other older trust stores and clients that can not be updated. Including all five of the roots ensure maximum compatibility for your application.</p>
</blockquote>
<h2>Next Steps</h2>
<p>Since there doesn't seem to be much traffic or anything really unusual going on with this IP address, it's time to look somewhere else.</p>
<p>The next IP address to check is going to the one associated with <code>priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c</code>, which has a decent likelihood of generating a large volume of traffic. Will there be anything interesting to learn?</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Epic Games Store Packet Capture - Domains</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ip-addresses/"/>
        <id>https://korgano.github.io/cybersecurity-project-epic-games-store-packet-capture-ip-addresses/</id>
        <media:content url="https://korgano.github.io/media/posts/13/suspicious-ip-loc-2.PNG" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-05-08T10:55:13-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/13/suspicious-ip-loc-2.PNG" alt="The most suspicious possible IP address location - the middle of a reservoir in Kansas." />
                    Last time, I managed to get Epic Games Store mostly functioning in Sandboxie-Plus and analyzed a number of DNS queries for potential&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/13/suspicious-ip-loc-2.PNG" class="type:primaryImage" alt="The most suspicious possible IP address location - the middle of a reservoir in Kansas." /></p>
                <p>Last time, I managed to get Epic Games Store <strong>mostly </strong>functioning in Sandboxie-Plus and analyzed a number of DNS queries for potential suspicious behavior.</p>
<p>Now, I'll be looking at IP addresses for host machines obtained during the packet capture session.</p>
<h2>Wireshark Weakness: Resolved Addresses Exporting</h2>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="4">
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-35-39-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-35-39-2-thumbnail.png" alt="Hosts obtained during packet capture - 01" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-44-28-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-44-28-2-thumbnail.png" alt="Hosts obtained during packet capture - 02" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-44-40-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-44-40-2-thumbnail.png" alt="Hosts obtained during packet capture - 03" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-01-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-01-2-thumbnail.png" alt="Hosts obtained during packet capture - 04" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-33-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-33-2-thumbnail.png" alt="Hosts obtained during packet capture - 05" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-54-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-45-54-2-thumbnail.png" alt="Hosts obtained during packet capture - 06" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-46-35-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-46-35-2-thumbnail.png" alt="Hosts obtained during packet capture - 07" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-51-52-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-51-52-2-thumbnail.png" alt="Hosts obtained during packet capture - 08" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-17-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-17-2-thumbnail.png" alt="Hosts obtained during packet capture - 09" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-35-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-35-2-thumbnail.png" alt="Hosts obtained during packet capture - 10" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-54-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-52-54-2-thumbnail.png" alt="Hosts obtained during packet capture - 11" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-18-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-18-2-thumbnail.png" alt="Hosts obtained during packet capture - 12" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-31-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-31-2-thumbnail.png" alt="Hosts obtained during packet capture - 13" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-49-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-53-49-2-thumbnail.png" alt="Hosts obtained during packet capture - 14" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-54-04-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-54-04-2-thumbnail.png" alt="Hosts obtained during packet capture - 15" width="768" height="828"></a></figure>
<figure class="gallery__item"><a href="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-54-20-2.png" data-size="837x902"><img loading="lazy" src="https://korgano.github.io/media/posts/13/gallery/2024-04-30-15-54-20-2-thumbnail.png" alt="Hosts obtained during packet capture - 16" width="768" height="828"></a></figure>
</div></div>
<p>Wireshark has <strong>many </strong>great network capture analysis features, but they're not perfect. For example, Resolved Addresses generates a list of IP/MAC addresses and domain/devices names associated with those addresses.</p>
<p>What it does not do, for some reason, is provide a method of exporting this list from the graphical user interface. Using the command line is necessary for this task, which is a shame, because this feature is ideal for helping develop PiHole blocklists.</p>
<p>So this forced me to take multiple screen captures at the time of capture, then transfer the PCAP to a separate computer for analysis. (My gaming rig is not really setup for that.)</p>
<p>After several rounds of iteration, I discovered that there's no easy way to dump the information via command line - for some reason, every source and destination IP would be the EGS host and the PiHole I use for DNS filtering. This is despite Wireshark correctly displaying IP addresses from outside my network.</p>
<p>I also discovered that I could copy and paste data from the GUI's Resolved Addresses pane... one entry at a time. By that I mean, I can highlight <strong>one </strong>piece of data, copy it, and paste it. Attempting to copy multiple pieces of data, like all the IP addresses, just results in pasting <strong>one </strong>IP address.</p>
<p><strong>Analyzing Domains and IPs</strong></p>
<p>After spending an annoying amount of time manually copy-pasting domains and IP addresses into a text document, I began running them through VirusTotal and AlienVault OTX.</p>
<p>After crosschecking their answers on a few easily discernable legitimate domains, I began feeding domains I was less certain about into those sites.</p>
<p>These are the entries that aroused the most suspicion in me, for various reasons:</p>
<blockquote>
<p>account-public-service-prod03.ol.epicgames.com</p>
<p>Security vendors' analysis<br>CyRadar: Malicious</p>
<p>Indicator Facts<br>2 malicious files communicating</p>
<p>Running webserver<br>Resolves to 8 IPs<br>Present in Umbrella<br>Present in Majestic<br>Present in Akamai</p>
<p>Antivirus Detections<br>Backdoor:Win32/Tofsee.T, TEL:Trojan:Win64/GoCLR.MR!MTB<br>AV Detection Ratio: 2 / 2</p>
<p>Associated Files<br>Sep 19, 2021    8e7c791dd2a860fb8ff4630b4079351d9865c73316d3071664a8cab86737e890                TEL:Trojan:Win64/GoCLR.MR!MTB</p>
<p>Aug 31, 2019    b81db9595e7cdc16ca6f106f5610e4442cbaf9049940938b34ce759a42688dfa    Win32:BackdoorX-gen\ [Trj]        Win.Trojan.Tofsee-6840338-0    Backdoor:Win32/Tofsee.T</p>
</blockquote>
<p>Given that Epic Games Store is roughly 5.5 years old, the fact that a Trojan/backdoor was identified on the platform in 2019 definitely raised an eyebrow. However, the fact that only <strong>two </strong>detections have been made in that time span suggests to me that these were probably not done by Epic. However, this domain is definitely going to be looked at in more depth later.</p>
<blockquote>
<p>eos-gateway-ingressv2-prod-c1-w4.befa.live.use1a.on.epicgames.c<br>No results on VirusTotal/AlienVault</p>
<p>eos-gateway-ingressv2-prod-c3-w5.befa.live.use1a.on.epicgames.c<br>No results on VirusTotal/AlienVault</p>
<p>eulatracking-svc-prod06-pub-1257580502.us-east-1.elb.amazonaws.<br>No results on VirusTotal/AlienVault</p>
</blockquote>
<p>These are suspicious due to not having <strong>any </strong>results on VirusTotal and AlienVault, although looking up their IPs suggest they're run out of the same AWS data center that a lot of EGS's services are. (And possibly my cybersecurity course too!)</p>
<p>Also, I'm very curious to see what I can find out about the End User License Agreement traffic.</p>
<blockquote>
<p>fp2e7a.wpc.phicdn.net</p>
<p>Fake Update Utilizes New IDAT Loader To Execute StealC and Lumma Infostealers - according to source ArcSight Threat Intelligence - 8 months ago<br>Contextual Indicators: The domain is popular in the world Contextual Indicators: The domain’s Cisco Umbrella rank is 709 Created On: 2014:11:14 00:00:00</p>
<p>VirusTotal Link: https://www.virustotal.com/gui/domain/fp2e7a.wpc.phicdn.net/detection Classification Description: Legitimate website which does not serve any malicious purpose.</p>
<p>ArcSight Threat Intelligence: Suspicious<br>Antivirus Detections<br>Trojan:Win32/Prepscram<br>AV Detection Ratio: 12 / 13</p>
<p>Jul 23, 2023    bc0e2cba3466c7b53635df6057dc87bcf622d0439ae766a71b49eae726226507            Win.Malware.Zusy-9957983-0    Trojan:Win32/Prepscram<br>Multiple Prepscam detections with different hashes</p>
</blockquote>
<p>This obviously set off a number of red flags for me, especially considering how recent the latest detection. I immediately popped the IP address into the same website that I'd used to verify the location and ownership of the others, and got this in return:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://korgano.github.io/media/posts/13/suspicious-ip-loc.PNG" alt="Speedguide.net IP Address look up for the IP address associated with fp2e7a.wpc.phicdn.net - the IP address is geolocated to the middle of Cheney Reservoir in Kansas." width="1600" height="827" sizes="(min-width: 37.5em) 1600px, 80vw" srcset="https://korgano.github.io/media/posts/13/responsive/suspicious-ip-loc-xs.PNG 384w ,https://korgano.github.io/media/posts/13/responsive/suspicious-ip-loc-sm.PNG 600w ,https://korgano.github.io/media/posts/13/responsive/suspicious-ip-loc-md.PNG 768w ,https://korgano.github.io/media/posts/13/responsive/suspicious-ip-loc-lg.PNG 1200w ,https://korgano.github.io/media/posts/13/responsive/suspicious-ip-loc-xl.PNG 1600w"></figure>
<p>There's a word for an IP address being geolocated in the middle of a reservoir in Kansas:</p>
<figure class="post__image"><img loading="lazy"  src="https://i.imgur.com/7ohZC9x.gif" alt="Inglourious Basterds - &quot;It's called suspicious.&quot;" width="360" height="202" data-is-external-image="true"></figure>
<p>Now, there's a totally credible explanation for this type of result. Some server clusters are actually put inside specialized containers and immersed in large bodies of water for cooling purposes.</p>
<p>Looking into things further, <a href="https://github.com/hoshsadiq/adblock-nocoin-list/issues/452" title="False positive: fp2e7a.wpc.2be4.phicdn.net " target="_blank" rel="noopener noreferrer">I discovered that the <code>*.phicdn.net </code>domain is associated with <code>ocsp.digicert.com</code></a><code></code>, which checks for certificate revocation.</p>
<p>Why they would use this domain, which is suspiciously generic and hosted in a suspicious location, is a question for more experienced investigators.</p>
<p>The final interesting domain I found was this one:</p>
<blockquote>
<p>priceengine-ecomprod01-pub-2131700027.us-east-1.elb.amazonaws.c<br>No results on VirusTotal/AlienVault</p>
</blockquote>
<p>This one is pretty easy to understand, but it'll be interesting to see what price data is being moved through this connection.</p>
<h2>The Next Steps</h2>
<p>With a specific number of interesting domains and IPs to examine, the next step is examine the actual network data flows. The logical place to start is with <code>account-public-service-prod03.ol.epicgames.com</code>, one of Epic Games' domains that has been compromised in the past.</p>
<p>Once we take a look at that one, we'll go through the rest of the ones I've highlighted in this article. Will we find anything interesting? Let's find out!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Sandboxing with Sandboxie-Plus</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-sandboxing-with-sandboxie-plus/"/>
        <id>https://korgano.github.io/cybersecurity-project-sandboxing-with-sandboxie-plus/</id>
        <media:content url="https://korgano.github.io/media/posts/12/alienware-Hpaq-kBcYHk-unsplash.jpg" medium="image" />
            <category term="Tech"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-04-22T10:09:46-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/12/alienware-Hpaq-kBcYHk-unsplash.jpg" alt="Gaming desktop with RGB keyboard and monitor displaying space scene in stylized asteroid belt." />
                    Last time on my continuing saga of trying to analyze Epic Games Store's network traffic without possibly compromising my PC,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/12/alienware-Hpaq-kBcYHk-unsplash.jpg" class="type:primaryImage" alt="Gaming desktop with RGB keyboard and monitor displaying space scene in stylized asteroid belt." /></p>
                <p>Last time on my continuing saga of trying to analyze Epic Games Store's network traffic without possibly compromising my PC, I discovered that VirtualBox wasn't a functional way to progress.</p>
<p>Instead, I would have to use a sandbox to isolate the program on my own PC, in order to have proper access to the necessary hardware and software resources.</p>
<p>After some fairly quick research, I discovered Sandboxie-Plus, a free open source sandbox program and installed it on my PC. But before progressing on the topic, I decided to do a little extra research.</p>
<h2>Trying to be Secure</h2>
<p>One major downside of Sandboxie-Plus is that <strong>many </strong>of the privacy and security related features are contingent on having a supporter certificate, which requires a donation of some kind. (The website and Github are both vague on this, and not even the FAQ explains if a one-time PayPal donation is enough.)</p>
<p>This led me to use Microsoft Copilot to gather information on how to configure Sandboxie-Plus to be as secure as it could be <strong>without </strong>the certificate, as well as how to configure logging:</p>
<blockquote>
<p>Sure, here are some best practices for configuring Sandboxie-Plus considering your factors:<br><br><strong>1. Configuring without Supporter Certificate for Privacy Mode:</strong><br>While the Privacy Mode feature in Sandboxie-Plus requires a supporter certificate⁴, you can still configure Sandboxie-Plus to limit access to your data. Here's how you can do it⁴⁵:<br>- Go to Sandbox Options &gt; Resource Access &gt; Resource Access Policies.<br>- Enable the "Privacy Mode, block file and registry access to all locations except the generic system ones" checkbox under Access Mode.<br>- Dismiss the pop-up that says you just activated a supporter-only feature⁶.<br><br><strong>2. Logging Behavior by the Sandboxed Software:</strong><br>To log as much behavior by the sandboxed software as possible, you can use the Trace Log feature¹²:<br>- Enable Trace Log tab by opening Options menu -&gt; Trace Logging.<br>- When the Trace Log tab is activated, it immediately starts to collect and display resource access information from all sandboxed programs that are running.<br>- At this point, perform any specific tasks that fail when done under the supervision of Sandboxie Plus.<br>- Finally, right-click on the collected data and select the entry named Copy Panel. This copies the collected data into the clipboard.<br>- You can now paste (Ctrl+V) the collected data somewhere and make it available for analysis¹².<br><br><strong>3. Denying Sandboxed Software Unnecessary Permissions and File Access:</strong><br>You can restrict the sandboxed software's unnecessary permissions and file access⁸⁹[^10^]¹¹:<br>- Right-click on the sandbox &gt; Sandbox Options &gt; Resource Access &gt; Files &gt; Add File/Folder.<br>- By default, Sandboxie doesn't allow writing to the Host system. Select Open if the program is installed outside the sandbox. Select Open for All if the program is installed inside the sandbox⁸.<br>- If you want to restrict network access for the apps within your sandbox, visit Access Restrictions in the General Options group. Ensure both options under Network Restrictions are enabled to prevent apps from tinkering with your network and firewall settings, or accessing network files and folders[^10^].<br><br>Remember, these are general guidelines and the exact configuration may vary based on your specific needs and the software you are sandboxing. Always ensure to test your configuration thoroughly to ensure it works as expected and provides the necessary security. Also, keep your Sandboxie-Plus software up-to-date to benefit from the latest features and security updates.<br><br>Source: Conversation with Bing, 4/19/2024<br>(1) Privacy Mode | Sandboxie Documentation. https://sandboxie-plus.github.io/sandboxie-docs/PlusContent/privacy-mode.html.<br>(2) Privacy Mode - GitHub. https://github.com/sandboxie-plus/sandboxie-docs/blob/main/PlusContent/privacy-mode.md.<br>(3) Sandboxie requires a supporter certificate for boxes where supporter .... https://github.com/sandboxie-plus/Sandboxie/issues/1718.<br>(4) Trace logging (for Sandboxie Plus) - Sandboxie documentation. https://okrc.github.io/sandboxie-docs/PlusContent/TraceLog.html.<br>(5) Trace Log | Sandboxie-Plus. https://sandboxie-plus.com/tracelog/.<br>(6) How to restrict a program of filesystem access? #2573 - GitHub. https://github.com/sandboxie-plus/Sandboxie/discussions/2573.<br>(7) Resource Access Settings | Sandboxie-Plus. https://sandboxie-plus.com/sandboxie/resourceaccesssettings/.<br>(8) How to Run Anything You Download Securely With Sandboxie Plus for ... - MUO. https://www.makeuseof.com/windows-sandboxie-plus-guide/.<br>(9) Restrictions Settings | Sandboxie Documentation. https://sandboxie-plus.github.io/sandboxie-docs/Content/RestrictionsSettings.html.<br>(10) Trace logging (for Sandboxie Plus) - Sandboxie Documentation. https://qzlin.github.io/sandboxie-docs-site/PlusContent/TraceLog/.<br>(11) Privacy Mode | Sandboxie-Plus. <a href="https://sandboxie-plus.com/privacy-mode/">https://sandboxie-plus.com/privacy-mode/</a>.</p>
</blockquote>
<h2>Unexpected Interaction</h2>
<p>Given my limited ability to secure the sandbox directly, I decided to use Windows Security's <a href="https://learn.microsoft.com/en-us/defender-endpoint/enable-controlled-folders?view=o365-worldwide" target="_blank" rel="noopener noreferrer">Controlled Folder Access</a> setting to restrict access to the most likely folder to be altered - the hidden AppData folder.</p>
<p>This turned out to be a <strong>massive </strong>mistake, as this interfered with all sorts of operations inside and outside of the sandbox, including software installations.</p>
<p>Additionally, following Copilot's advice on the Sandboxie-Plus privacy settings revealed a new problem: the settings work, but only for five minutes.</p>
<p>Eventually, this led me to scrap the original sandbox and reconfigure Windows Security to be less restrictive.</p>
<h2>The Second Attempt</h2>
<p>After reconfiguring Windows Security and deleting the original sandbox, I created a fresh new sandbox, and attempted to install Epic Games Store (EGS) in it.</p>
<p>This worked, and I collected a great deal of network traffic with Wireshark in the process, which I'll analyze in the next post.</p>
<p>However, there was plenty of odd behavior to diagnose:</p>
<ul>
<li>I could access the Unreal Engine page, download UE 4.27.2, go to the plugin marketplace, and add plugins to the cart.</li>
<li>I could <strong>not </strong>complete the transaction and add the plugins to my account.</li>
<li>I could <strong>not </strong>load a preexisting UE 4.27 project into to my instance of UE 4.27.2.</li>
<li>After suspending and resuming the EGS process, I could not get EGS to properly load up the usual user interface. I could load directly to the UE page and launch it from there, but not the regular page.</li>
</ul>
<p>Examining my Pi-Hole records from that time indicates connections to three Epic Games subdomains were being blocked:</p>
<ul>
<li>tracking.epicgames.com</li>
<li>datarouter.ol.epicgames.com</li>
<li>graphql.epicgames.com</li>
</ul>
<p>Tracking seems like an obvious thing to block, but the two other subdomains were rather puzzling.</p>
<p>After looking through a number of forum posts (<a href="https://forums.unrealengine.com/t/why-do-i-keep-seeing-failed-to-connect-to-datarouter-ol-epicgames-com-port-443-bad-access-warning-errors/421833" target="_blank" rel="noopener noreferrer">Unreal Engine dev forum</a>, <a href="https://steamcommunity.com/app/501080/discussions/0/1700542332341415949/?l=koreana" target="_blank" rel="noopener noreferrer">Steam forums for Fishing: Barents Sea</a>), I discovered that this a was general usage data reporting function. <a href="https://otx.alienvault.com/indicator/domain/datarouter.ol.epicgames.com" target="_blank" rel="noopener noreferrer">Further examination via AlienVault OTX</a> revealed that said subdomain is associated with 4 malware files:</p>
<ul>
<li>Win32:DropperX-gen\ [Drp] / ALF:SpikeAexR.MSILMVID</li>
<li>Win32:Evo-gen\ [Susp]</li>
<li>Win32:Malware-gen</li>
<li>MSIL:Agent-DRD\ [Trj] / Backdoor:MSIL/Bladabindi.AJ</li>
</ul>
<p>To be fair to Epic Games, I don't think <strong>they </strong>are putting malware and backdoors into their games. The Unreal Engine plugin marketplace is full of plenty of dubious material, including multiple blockchain and data access plugins, which provides plenty of opportunities for third parties to sneak malicious code into the platform.</p>
<p>The other subdomain, graphql.epicgames.com, is much less obvious in its purpose. Google results point to this subdomain being related to <a href="https://marketplace-website-node-launcher-prod.ol.epicgames.com/ue/marketplace/en-US/product/graphql-plugin/reviews" target="_blank" rel="noopener noreferrer">some type of AWS integration</a>, and possibly more data collection. Regardless, it shouldn't have anything to do with actual functionality.</p>
<h2>Next Steps</h2>
<p>Now that the sandbox has been setup, there's a few things to do:</p>
<ul>
<li>Analyze the Wireshark data for actionable insights.</li>
<li>Troubleshoot the various EGS issues and hopefully solve them.</li>
<li>Actually do the intended UE 4.27 development work.</li>
</ul>
<p>Next time, we'll dig into the PCAP file from this session.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project: Virtual Machines Aren&#x27;t Always The Solution</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-virtual-machines-arent-always-the-solution/"/>
        <id>https://korgano.github.io/cybersecurity-project-virtual-machines-arent-always-the-solution/</id>
        <media:content url="https://korgano.github.io/media/posts/11/rivage-AIIC6wCqkQc-unsplash.jpg" medium="image" />
            <category term="Tech"/>
            <category term="PC Hardware"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>
            <category term="Cybersecurity"/>

        <updated>2024-04-17T11:48:17-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/11/rivage-AIIC6wCqkQc-unsplash.jpg" alt="" />
                    Progress on this project has been slower than I'd like, mostly because of delays in obtaining latest gen hardware to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/11/rivage-AIIC6wCqkQc-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <p>Progress on this project has been slower than I'd like, mostly because of delays in obtaining latest gen hardware to make this project more likely to succeed.</p>
<p>However, the delays were worth the trouble, because I'm going to be executing the practical elements of this project on the following system:</p>
<ul>
<li>Ryzen 7 7800X3D</li>
<li>Radeon RX 7900 XTX</li>
<li>PCI-E 5.0x2 NVMe SSD</li>
<li>32GB DDR5 RAM</li>
</ul>
<p>This might seem excessive, given the following requirements for running Unreal Engine 4:</p>
<ul>
<li>Operating System: Windows 10 64-bit</li>
<li>Processor: Quad-core Intel or AMD, 2.5 GHz or faster</li>
<li>Memory: 8 GB RAM</li>
<li>Video Card/DirectX Version: DirectX 11 or DirectX 12 compatible graphics card</li>
</ul>
<p>It should be easy to run a virtual machine in Virtual Box that meets all these requirements, right?</p>
<h2>Problem 1: Windows Virtual Machine Setup</h2>
<p>The first step, after installing Virtual Box, was creating the Windows VM to host Unreal Engine 4.27. This was not as easy it should've been.</p>
<p>My initial approach was to install the latest version of Windows 11, which I had installed as the operating system of this new PC, using a tool called Ventoy. Ventoy allows you to host multiple ISOs on a single flash drive for the purpose of installing an operating system.</p>
<p>The normal Windows 11 install process involves either creating or signing into a Microsoft account, which is fine for a personal rig, but is not great for a VM that might be leaking data. Since the whole point of the project is seeing what data Epic Games Store might be leaking <strong>without </strong>compromising security and privacy, this was a no-go.</p>
<p>The result was that I had to use a custom Windows 10 ISO from ReviOS/RevisionOS, which is a gaming/stability focused version of Windows 10. It focuses on debloating Windows and changing settings to prevent unwanted Windows configuration changes caused by updates, which is a frequent problem. In fact, I use ReviOS's Windows 11 distribution on my primary laptop.</p>
<p>However, this ISO was from late last year, because ReviOS switched to a new distribution method that didn't require the creation of an ISO. So it lacked numerous security patches... which meant the VM was a vulnerability. But given all the protections I already have on my network and PC, this was acceptable.</p>
<p>One problem down, more to come.</p>
<h2>Problem 2: VM IP Address Woes</h2>
<p>The plan for the project was to isolate Epic Games Store onto a VM, put that VM on the same Device Isolation network an old PC I own, and remotely access the VM from that PC.</p>
<p>This fell apart for several reasons:</p>
<ul>
<li>The TP-Link router software, which I have <strong>very </strong>little ability to configure, <strong>seems</strong> to detect devices based on MAC addresses.</li>
<li>Virtual Box and its documentation are very thorough, but aren't great for troubleshooting very specific problems.</li>
<li>Bing Copilot's response quality has been... inconsistent lately, so I couldn't rely on it to help me out of the problem.</li>
<li>Static assigned IP addresses don't work Device Isolation, because that's another process handled by the router software I have limited control over.</li>
</ul>
<p>The best I could do is to place the <strong>entire </strong>PC on the isolated devices list while running the VM, which I was considering... up until I encountered the next, most showstopping problem.</p>
<h2>Problem 3: Virtual Box Cannot Simulate DX11 GPUs</h2>
<p>Virtual Box's virtual GPU is best described as "anemic", bordering on completely unusable for anything besides generating visual output.</p>
<p>Thankfully, I didn't <strong>need </strong>it to do anything more than that, but it was annoying not being able to harness more of the RX 7900 XTX's power.</p>
<p>However, after going through the trouble of installing Epic Games Store <strong>and </strong>Unreal Engine 4.27, I discovered a critical issue.</p>
<p>Unreal Engine 4.27 requires DirectX (DX) 11 to function, and Virtual Box can only do up to DX9.</p>
<p>This means that the VM is utterly useless, aside from capturing the traffic generated by Epic Games Store. Which I could do, but couldn't export from the VM due to some sort of Virtual Box issue I don't understand.</p>
<p>This would be the end of the road, right?</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/Iw1AghidekY" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<h2>Project Pivot: Sandbox Epic Games Store</h2>
<p>After realizing that about 5 hours of work was for nothing, I did other things instead.</p>
<p>Having cleared my head, I considered other options.</p>
<p>The first, most obvious option was a containerized deployment of EGS. However, while I could find information about containerized versions of Unreal Engine 4, I didn't find anything about <strong>EGS</strong>, which is the primary data privacy threat.</p>
<p>Then I thought about a sandbox, particularly a free open source solution. Was there a program that had a strong feature set in active development?</p>
<p>The answer is <a href="https://github.com/sandboxie-plus/Sandboxie" target="_blank" rel="noopener noreferrer">Sandboxie-Plus.</a></p>
<p>This will be the environment I will operate Epic Games Store out of, once I learn how to properly configure the sandbox to prevent any data harvesting of the host system.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Project Research: Remote Access</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-project-research-remote-access/"/>
        <id>https://korgano.github.io/cybersecurity-project-research-remote-access/</id>
        <media:content url="https://korgano.github.io/media/posts/10/glenn-carstens-peters-npxXWgQ33ZQ-unsplash.jpg" medium="image" />
            <category term="Tech"/>
            <category term="Quick Thoughts"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>

        <updated>2024-03-14T15:55:55-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/10/glenn-carstens-peters-npxXWgQ33ZQ-unsplash.jpg" alt="" />
                    For the next stage of my cybersecurity project, I need reliable remote access to the desktop computer where I'll be&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/10/glenn-carstens-peters-npxXWgQ33ZQ-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <p>For the next stage of my cybersecurity project, I need reliable remote access to the desktop computer where I'll be running a Windows VM containing Epic Games Store and Wireshark.</p>
<p>There are a great many programs that can serve this function, so I felt it prudent to do some research before potentially making a huge, time consuming mistake.</p>
<p>So I turned to Microsoft Copilot to start my search, due to its general functionality and the fact that it spits out a list of citations that I can use to check its results.</p>
<h2>Search #1: "best free remote desktop apps in terms of security"</h2>
<p>This search prompt got the following Copilot results:</p>
<p><code>Certainly! When it comes to **free remote desktop software**, security is a crucial factor. Let's explore some options that strike a balance between usability and safety:</code><br><br><code>1. **Chrome Remote Desktop**:</code><br><code>   - **Pros**:</code><br><code>     - **Free** and easy to set up.</code><br><code>     - Works well for **individuals** and professionals.</code><br><code>     - Operates within the **Google ecosystem**.</code><br><code>     - **Relatively safe** for host computers.</code><br><code>   - **Cons**:</code><br><code>     - **Minimal functionality**.</code><br><code>     - Limited to **Google Chrome**.</code><br><code>     - Lacks advanced features.</code><br><code>     - Cannot transfer files between devices.</code><br><code>     - Not suitable for large-scale businesses.</code><br><code>   - **How It Works**: Chrome Remote Desktop is a browser extension that allows you to remotely access any computer running the Chrome browser. It's compatible with macOS, Windows, and Android devices. Keep in mind that it's best suited for individual use or occasional access¹.</code><br><br><code>2. **Zoho Assist**:</code><br><code>   - **Pros**:</code><br><code>     - Part of the **Zoho ecosystem**.</code><br><code>     - Offers a variety of **advanced tools**.</code><br><code>     - Suitable for **IT teams** and professionals.</code><br><code>   - **Cons**:</code><br><code>     - Not entirely free (premium solutions available).</code><br><code>   - **How It Works**: Zoho Assist provides secure remote access and support. While it offers premium features, its free plan is still robust and reliable³.</code><br><br><code>3. **TeamViewer**:</code><br><code>   - **Pros**:</code><br><code>     - Completely **free for personal use**.</code><br><code>     - Widely trusted and reliable.</code><br><code>   - **Cons**:</code><br><code>     - Some users find it **resource-intensive**.</code><br><code>   - **How It Works**: TeamViewer allows remote access across different platforms. It's a solid choice for personal use, but be aware that it may prompt you to purchase a license for commercial purposes⁵.</code><br><br><code>Remember that while these tools offer convenience, always prioritize security by using strong passwords, enabling two-factor authentication, and keeping your software up to date. Choose the one that aligns best with your needs and ensures a safe connection for remote access! 🚀</code><br><br><code>Source: Conversation with Bing, 3/14/2024</code><br><code>(1) Best free remote desktop software of 2024 | TechRadar. https://www.techradar.com/best/best-free-remote-desktop-software.</code><br><code>(2) Best free remote desktop software 2024 - IT PRO. https://www.itpro.com/mobile/remote-access/368050/best-free-remote-desktop-software-2023.</code><br><code>(3) The Best Remote Access Software for 2024 | PCMag. https://www.pcmag.com/picks/the-best-remote-access-software.</code><br><code>(4) 20+ Free Remote Desktop Software Tools Choices - Heimdal Security. https://heimdalsecurity.com/blog/free-remote-desktop-software/.</code><br><code>(5) 5 Best FREE Remote Desktop Software in 2023 - DNSstuff. https://www.dnsstuff.com/free-remote-desktop-software.</code><br><code>(6) Getty. https://media.gettyimages.com/id/1244052182/photo/in-this-photo-illustration-the-zoho-corporation-logo-is-displayed-on-a-smartphone-screen.jpg?b=1&amp;s=612x612&amp;w=0&amp;k=20&amp;c=MKlc1NavyEJe-2FeZNGYgsSvWg7S_yE-0rnSNwIFUvM=.</code><br><code>(7) Getty. <a href="https://media.gettyimages.com/id/1170968197/photo/the-logo-of-german-tech-firm-teamviewer-stands-in-front-of-the-stock-exchange-in-frankfurt-am.jpg?b=1&amp;s=612x612&amp;w=0&amp;k=20&amp;c=bhJYbdUV-LwzowOkUzgXDAy8wayFoN-PR81jipozjfc=">https://media.gettyimages.com/id/1170968197/photo/the-logo-of-german-tech-firm-teamviewer-stands-in-front-of-the-stock-exchange-in-frankfurt-am.jpg?b=1&amp;s=612x612&amp;w=0&amp;k=20&amp;c=bhJYbdUV-LwzowOkUzgXDAy8wayFoN-PR81jipozjfc=</a>.</code></p>
<p>Bizarrely, this search resulted in two images being appended to the end of the results, presumably because of the earlier determination that Zoho and TeamViewer were some of the top results.</p>
<p>Going through the sources revealed that Copilot definitely did mix and match the results, although the reasons why it picked the sources it did are pretty obscure, aside from PCMag and TechRadar.</p>
<p>Heimdall Security in particular is eyebrow raising, given the quality of its work. If anything was an AI generated listicle, it was probably that.</p>
<p>Since I'm totally uninterested in using Chrome Remote Desktop for a variety of reasons, I decided to take a different tack.</p>
<h2>Search #2: Remote Desktop Apps from WinUtil</h2>
<p><a href="https://github.com/ChrisTitusTech/winutil" title="Chris Titus Tech's Windows Utility">Chris Titus' WinUtil</a> is an open-source PowerShell script that automates a variety of Windows configuration tasks. It also incorporates WinGet installation of a wide variety of free software, including remote desktop access applications.</p>
<p>Since this script includes Wireshark as an install option, it makes sense to use this when I get around to configuring my Windows VM. By default, Microsoft Remote Desktop is going to be my fallback option... assuming it's in the ISO I use.</p>
<p>To figure out which of the four options WinUtil offers is the most useful, I gave Copilot the following prompt:</p>
<p><code>Compare and contrast the following remote desktop applications:</code><br><code>Rust Remote Desktop</code><br><code>AnyDesk</code><br><code>Parsec</code><br><code>TeamViewer</code><br><br><code>Compare them on the following criteria:</code><br><code>-Ability to transfer files</code><br><code>-Ease of Use</code><br><code>-Hardware requirements</code><br><code>-Security</code></p>
<p>What I got was this:</p>
<p><code>Certainly! Let's compare and contrast the mentioned remote desktop applications—**Rust Remote Desktop**, **AnyDesk**, **Parsec**, and **TeamViewer**—based on the specified criteria:</code><br><br><code>1. **Ability to Transfer Files**:</code><br><code>   - **Rust Remote Desktop**:</code><br><code>     - Rust Remote Desktop is a relatively new open-source project, and its file transfer capabilities might be limited.</code><br><code>   - **AnyDesk**:</code><br><code>     - AnyDesk allows easy file transfer between connected devices.</code><br><code>     - You can drag and drop files directly during a remote session.</code><br><code>   - **Parsec**:</code><br><code>     - Parsec primarily focuses on low-latency game streaming and may not have robust file transfer features.</code><br><code>   - **TeamViewer**:</code><br><code>     - TeamViewer offers efficient file transfer functionality.</code><br><code>     - You can share files seamlessly during remote sessions.</code><br><br><code>2. **Ease of Use**:</code><br><code>   - **Rust Remote Desktop**:</code><br><code>     - Being open-source, Rust Remote Desktop may have a learning curve for setup and configuration.</code><br><code>   - **AnyDesk**:</code><br><code>     - AnyDesk provides a straightforward and user-friendly interface.</code><br><code>     - It's easy to install and use, making it suitable for both beginners and experienced users.</code><br><code>   - **Parsec**:</code><br><code>     - Parsec is designed for gaming, but its simplicity extends to general remote access.</code><br><code>     - The setup process is straightforward.</code><br><code>   - **TeamViewer**:</code><br><code>     - TeamViewer has a polished interface and is widely recognized.</code><br><code>     - It's user-friendly and suitable for various scenarios.</code><br><br><code>3. **Hardware Requirements**:</code><br><code>   - **Rust Remote Desktop**:</code><br><code>     - As an open-source solution, Rust Remote Desktop should run on most systems.</code><br><code>     - However, specific hardware requirements may vary based on the underlying Rust libraries.</code><br><code>   - **AnyDesk**:</code><br><code>     - AnyDesk is lightweight and works well even on older hardware.</code><br><code>     - It doesn't demand high system resources.</code><br><code>   - **Parsec**:</code><br><code>     - Parsec is optimized for low-latency streaming, which requires decent hardware.</code><br><code>     - For smooth performance, a capable GPU is recommended.</code><br><code>   - **TeamViewer**:</code><br><code>     - TeamViewer runs on a wide range of devices, including mobile platforms.</code><br><code>     - It adapts well to different hardware configurations.</code><br><br><code>4. **Security**:</code><br><code>   - **Rust Remote Desktop**:</code><br><code>     - Security depends on the implementation and community support.</code><br><code>     - Being open-source, it allows transparency and community scrutiny.</code><br><code>   - **AnyDesk**:</code><br><code>     - AnyDesk uses strong encryption protocols (TLS 1.2) for secure connections.</code><br><code>     - It provides session codes and access permissions.</code><br><code>   - **Parsec**:</code><br><code>     - Parsec emphasizes low latency over security.</code><br><code>     - While it encrypts data, it may not be as robust as other options.</code><br><code>   - **TeamViewer**:</code><br><code>     - TeamViewer has a solid security track record.</code><br><code>     - It uses end-to-end encryption and offers features like two-factor authentication.</code><br><br><code>In summary:</code><br><code>- **AnyDesk** is user-friendly and efficient for file transfer.</code><br><code>- **TeamViewer** is well-established, secure, and versatile.</code><br><code>- **Parsec** is ideal for low-latency gaming but may lack extensive file transfer features.</code><br><code>- **Rust Remote Desktop** is open-source and promising, but its capabilities are still evolving.</code><br><br><code>Choose the one that aligns best with your specific needs and preferences! 🌟</code><br><br><code>Source: Conversation with Bing, 3/14/2024</code><br><code>(1) Teamviewer VS Anydesk - Which is Better Remote Desktop Software?. https://www.youtube.com/watch?v=L4ldNqdKFLM.</code><br><code>(2) AnyDesk vs TeamViewer: What's the difference? (Updated). https://www.youtube.com/watch?v=vnBA1fdZRxs.</code><br><code>(3) AnyDesk vs TeamViewer | Remote Desktop Comparison in 2022. https://www.youtube.com/watch?v=IwlSfec5H7Y.</code><br><code>(4) Let's advise each other on the most efficient remote PC access ... - Reddit. https://www.reddit.com/r/software/comments/ts9b79/lets_advise_each_other_on_the_most_efficient/.</code><br><code>(5) RustDesk Alternatives: 25+ Remote Desktop Tools &amp; Similar Apps .... https://alternativeto.net/software/rustdesk/.</code><br><code>(6) AnyDesk vs. Parsec vs. TeamViewer Comparison - SourceForge. https://sourceforge.net/software/compare/AnyDesk-vs-Parsec-vs-TeamViewer/.</code><br><code>(7) Compare AnyDesk vs. Parsec vs. TeamViewer in 2024 - Slashdot. https://slashdot.org/software/comparison/AnyDesk-vs-Parsec-vs-TeamViewer/.</code><br><code>(8) undefined. https://i.imgur.com/FPxAM2w.png.</code><br><code>(9) undefined. https://sourceforge.net/projects/tigervnc/files/.</code><br><code>(10) undefined. https://play.google.com/store/apps/details?id=com.google.chromeremotedesktop&amp;hl=en_US--.</code><br><code>(11) undefined. <a href="https://parsec.app/downloads--">https://parsec.app/downloads--</a>.</code></p>
<p>In a confusing turn, a random image was among the search results.</p>
<p>Without even getting into the sources, it's telling that the clear trend is that AnyDesk and TeamViewer are the best options, at least for my intended use case. </p>
<p>Looking further into TeamViewer, Slashdot's link is actually a very good side-by-side comparison of the two pieces of software. In terms of functionality, <strong>on paper</strong>, TeamViewer looks like the obvious choice.</p>
<p>Unfortunately, I discovered that TeamViewer has some really awful business practices:</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube-nocookie.com/embed/zbrPQsMK2gU" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>For those who didn't watch, TeamViewer requires you to submit a ticket for cancellation <strong>28 days </strong><strong>in advance</strong>, and if you fail to do so, it will charge you for a <strong>year's subscription</strong>. This is obviously more of an issue for business customers, but the mindset is <strong>highly </strong>concerning.</p>
<p>This led me to do one final thing before coming to a decision.</p>
<h2>The Ultimate Showdown: First Boot of TeamViewer and AnyViewer</h2>
<p>Using Chris Titus' WinUtil, I installed both programs and opened them.</p>
<p>TeamViewer requires an account to use. This means that even if my devices are on the same subnet, some amount of data is being sent out to external servers. That traffic is utterly unnecessary for the execution of the task, and is an extra potential vulnerability and source of traffic that'll make my analysis of Epic Games Store's traffic that much more difficult.</p>
<p>AnyDesk does not require any account, and on startup, just displays a large number that's used for connecting PCs running the AnyDesk client. Minimal, usable, and absolutely what I need to get the job done.</p>
<p>Also, for some reason. the purported file size of TeamVIewer is 200MB, while AnyDesk is supposedly 2MB.</p>
<p>For all these reasons, I will be using AnyDesk for this project.</p>
<h2>The Next Steps</h2>
<p>For the next stage of the project, I'll be doing the following:</p>
<ul>
<li>Familiarizing myself with AnyDesk's best practices for setting up secure connections between systems.</li>
<li>Assembling the system that'll be running the VM running AnyDesk.</li>
<li>Determining if the VM can be treated as an isolated device by the router.</li>
</ul>
<p>The most crucial factor in this project's success is getting router DHCP to properly assign an address to the VM. Without that, Epic Games Store becomes a potential vulnerability on my network, which is <strong>not </strong>the intended goal.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cybersecurity Headache: Home Router UXUI</title>
        <author>
            <name>Xavier Santana</name>
        </author>
        <link href="https://korgano.github.io/cybersecurity-headache-home-router-uxui/"/>
        <id>https://korgano.github.io/cybersecurity-headache-home-router-uxui/</id>
        <media:content url="https://korgano.github.io/media/posts/9/andres-urena-vXPXRp_wIg4-unsplash.jpg" medium="image" />
            <category term="UX/UI"/>
            <category term="Quick Thoughts"/>
            <category term="PC"/>
            <category term="Cybersecurity Projects"/>

        <updated>2024-03-05T08:39:32-05:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://korgano.github.io/media/posts/9/andres-urena-vXPXRp_wIg4-unsplash.jpg" alt="" />
                    As an aspiring cybersecurity professional, there's all sorts of projects that I could undertake. Maintaining my Pi-Hole DNS black hole&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://korgano.github.io/media/posts/9/andres-urena-vXPXRp_wIg4-unsplash.jpg" class="type:primaryImage" alt="" /></p>
                <p>As an aspiring cybersecurity professional, there's all sorts of projects that I could undertake. Maintaining my Pi-Hole DNS black hole is one of those. Personally, I like projects where I'm doing something that has practical benefit to me.</p>
<p>So when I came into some pretty powerful PC hardware, I saw an opportunity.</p>
<p>What I wanted to do:</p>
<ul>
<li>Build a system with a Ryzen 7800X3D CPU and RX 7900 XTX GPU</li>
<li>Set up a Windows VM on the 7800X3D/7900 XTX system</li>
<li>Place the Windows VM on a subnet</li>
<li>Install Epic Games Store on the Windows VM</li>
<li>Use Wireshark to track what traffic EGS produces</li>
<li>Place an old PC on the same subnet</li>
<li>Remotely operate the VM through the old PC</li>
</ul>
<p>What could go wrong?</p>
<h2>Problem #1 - Can I Even Subnet?</h2>
<p>My network uses TP-Link routers... which means I have to use an app to access an online account to set my router settings.</p>
<p>This is suboptimal from a security perspective for many reasons. Perhaps the biggest one is that you need internet access to set up a LAN.</p>
<p>But setting that aside, there's one major problem - there's no way to actually set up subnets and VLANs. What you do get? IoT Network and Device Isolation options.</p>
<p>What you get with these options are the ability to create a "dedicated wireless network to manage your IoT devices together", or "Isolate devices to protect your network from security threats." </p>
<p>Device isolation seemed to be the right pick, so I set a static IP on the old PC and added it to the Device Isolation list.</p>
<h2>Problem #2 - Can't Connect to the Internet</h2>
<p>After configuring things, I immediately tested the network connection on the old PC. My first step was opening the browser and checking the default home page links. When this failed, I tried to ping the DNS server... which also failed.</p>
<p>At the same time, the PC was having weird connectivity issues while in isolation mode, with the WiFi dropping periodically.</p>
<p>To troubleshoot this, I did several things:</p>
<ul>
<li>Checked to see if find any data in the TP-Link app about what settings Device Isolation uses.
<ul>
<li>There wasn't any data, which is a big <strong>YIKES</strong>.</li>
</ul>
</li>
<li>Disabled the Device Isolation, checked the ipconfig, re-enabled Device Isolation, and checked ipconfig again.
<ul>
<li>Since I had static IP on the old PC, this didn't do anything. More on that later.</li>
</ul>
</li>
<li>I tried to setup up static routing.
<ul>
<li>This apparently applied to the <strong>entire </strong>network, and when I undid it, I had to reset the router to get any connectivity to the network. Fun!</li>
</ul>
</li>
</ul>
<p>This experimentation was all necessary because of the following problem:</p>
<h2>Problem #3 - Insufficient Documentation</h2>
<figure class="post__image"><img loading="lazy"  src="https://static-community.tp-link.com/other/25/7/2023/c4ab7cbd7ed54858b68cd8e1999c5cdf.png" alt="Screencaps of TP-Link Device Isolation Control Panels from TP-Link's Device Isolation page" width="1922" height="1136" data-is-external-image="true"></figure>
<p>The reason I had so many problems is because, as you can see above, the UI doesn't provide a lot of details.</p>
<p>This might be forgivable if the website was full of detailed documentation. <a href="https://community.tp-link.com/us/home/kb/detail/412694" title="Using Device Isolation on Deco" target="_blank" rel="noopener noreferrer"><strong>THIS </strong>is what they give you</a> - a pretty good explanation of how it works and how to set up Device Isolation. It does <strong>not </strong>tell you anything about how to troubleshoot issues, and the forums are not helpful either.</p>
<p>One of the big problems with cybersecurity is that building the mindset to be a good practioner is a lot easier when you do it all the time. And that includes the home environment.</p>
<p>The biggest hurdle to that process is that doing cybersecurity properly requires the ability to troubleshoot and fix problems. And if you're not experienced or working with an unfamiliar system, troubleshooting tends to require documentation to explain what to do and what to look for. So the absence of said documentation has a <strong>massive </strong>negative impact.</p>
<p>Especially when the TP-Link app actually has an entire suite of useful testing/security tools:</p>
<ul>
<li>Speed Test</li>
<li>Detect Cameras</li>
<li>Scan For Devices</li>
<li>Ping Test</li>
<li>Public IP Lookup</li>
<li>MAC Lookup</li>
<li>Open Port Checker</li>
<li>Wi-Fi Interference</li>
</ul>
<p>None of these were useful for diagnosing the problems, for reasons I will explain below.</p>
<h2>Solving the Problem</h2>
<p>Because I <strong>did </strong>have experience with troubleshooting, I eventually figured out the problem.</p>
<p>So what was the solution?</p>
<ol>
<li>Remove the static IP address assignment for the old PC.</li>
<li>Connect the device to a network extension instead of directly to the router, solving the connection issues.</li>
<li>Activate device isolation.</li>
<li>Check the ipconfig.</li>
<li>Check to see if webpages load.</li>
</ol>
<p>This worked, but I discovered something odd. When I checked the device list in the TP-Link app, the device IP address was this:</p>
<pre class="language-json line-numbers"><code>###.###.##.55</code></pre>
<p>When I checked the results of ipconfig on the system, the result was this:</p>
<pre class="language-json line-numbers"><code>IPv4 Address: ###.###.##.100 (Preferred)</code></pre>
<p>From what I can tell, it seems as though the router assigns IPv4 addresses starting from 100 to isolated devices, but I cannot confirm this until I try to isolate the VM.</p>
<p>Curiously, there's no actual way to check what the Device Isolation IPs are in the app, and the old PC entry on the device list disappeared after closing and reopening the app.</p>
<p>Checking PiHole for DNS queries from the old PC did yield results, so that confirmed that there was proper routing and filtering.</p>
<p>Thankfully, the problem had a simple solution, but that still took a few hours of research and iteration. </p>
<h2>What TP-Link Can Do</h2>
<p>There's a few things that can be done about this:</p>
<ol>
<li>Include IP addresses on Device Isolation device cards.</li>
<li>Have a Device Isolation troubleshooting page/section that informs users to <strong>not </strong>try to reserve IP addresses to isolated devices.</li>
<li>Have an HTTP control panel that allows for detailed control, like older/Netgear routers.</li>
</ol>
<p>Should they do these things? If they care about the user's cybersecurity, then the answer is yes. Will they do it?</p>
<p>Two of these items are definitely going to be budget and effort sinks, which means that they're unlikely to happen without a <strong>lot </strong>of motivation to do so.</p>
<p>But it's genuinely confusing that the app's information on isolated devices doesn't include the assigned IP. This is a fairly simple bit of data to expose to the user, and definitely necessary for troubleshooting.</p>
<p>That said, TP-Link continues development of their firmware and app, so perhaps they will address these issues in the near future. One can only hope, because making cybersecurity as easy as possible is a great thing for everyone.</p>
            ]]>
        </content>
    </entry>
</feed>
